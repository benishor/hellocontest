// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (26.439kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x73\xdb\xb8\x11\x7f\xcf\xa7\x60\xd1\xc7\x8e\xed\x48\x4e\xae\x9d\x8e\xc4\x1b\xc7\x17\xe7\x6e\x2e\x7f\xa6\xb6\xdb\xde\x1b\x07\x22\x57\x24\x62\x10\xc0\x01\xa0\x65\xf5\xd3\x77\x40\x4a\xb6\x24\xfe\x11\x41\x51\x12\xe9\xe8\x25\x13\x51\xfc\x81\xc0\xee\x6f\x17\xbb\x8b\xa5\x35\xfa\xf9\x29\xa6\xce\x23\x48\x45\x38\x1b\xa3\xc1\xf9\x5b\xe4\x00\xf3\x79\x40\x58\x38\x46\xff\xbe\xbf\x39\xfb\x07\xfa\xd9\x7d\x33\xfa\xcb\xd9\x99\xf3\x09\x18\x48\xac\x21\x70\x66\x44\x47\x4e\x48\x71\x00\xce\xe5\xf9\x70\x78\x3e\x70\xce\xce\xdc\x37\x23\xc2\x34\xc8\x29\xf6\xc1\x7d\xe3\x38\x23\x09\x7f\x26\x44\x82\x72\x28\x99\x8c\x51\xa8\x1f\xfe\x86\x5e\x1e\x74\x79\x3e\x18\xa2\x8b\xf4\x3e\x3e\xf9\x0e\xbe\x76\x7c\x8a\x95\x1a\xa3\x4f\xfa\xe1\x2a\xf8\x9e\x28\x1d\x03\xd3\xc8\x21\xc1\x18\x29\x01\x10\xac\x5c\x34\x28\xc7\x19\x09\xc9\x05\x48\x3d\x77\x18\x8e\x61\x8c\x28\x9f\x81\x44\xee\xfb\xd1\xc5\xf2\x8b\xe2\xfb\x12\x21\xcc\x7d\x3f\xbd\xdd\x76\xe3\x23\xa6\x09\x20\x77\xf8\x6e\xdb\x8d\x4a\x83\xf0\x08\xf3\x25\x64\xd3\x1b\x6c\x03\x08\x1c\xc2\x1a\x60\x63\x2e\xa3\x8b\x4c\x26\x25\xe2\x11\x82\x12\x1f\x6b\xc2\xd9\x7f\x09\x0b\xf8\x2c\x93\x52\x8c\xc9\xf2\x73\xf1\x53\x7d\xcc\xbc\x29\xf7\x13\x85\xdc\x1b\x4c\x15\x6c\x9b\x65\x04\x4f\x02\xb3\x00\xb9\xf7\x32\xd9\x7a\xb3\x26\x9a\x02\x72\xb4\xc4\x4c\x51\xac\xf1\x84\xc2\x18\xcd\x41\x21\xf7\x57\xa0\x94\x3b\xd7\x9c\x69\x50\x3a\x37\x8c\x1f\x11\x1a\x64\xff\x37\x83\x52\xec\x43\xc4\x69\x00\xf2\x62\x71\xc3\xc5\xca\x1d\x1b\x77\xe7\x24\xf3\x81\x3f\x65\xb2\x90\x9c\x6b\xf3\x61\x79\x6b\x81\x72\x89\x22\x13\x0a\xc5\x8b\x6b\x22\xbd\x22\x0c\x97\x04\x98\x4e\x35\x85\xdc\x47\x90\x9a\xf8\x98\x16\x02\xd7\x16\x56\xbc\xb8\x2f\xc0\x92\x0f\x58\xbe\x28\xdb\x5c\x40\xab\x98\x06\xab\x6c\xba\xd2\xe2\x49\x97\x4f\xfc\x37\x0d\xf1\x62\xe6\xc0\x92\x1b\x62\xe6\xb4\x01\x6c\x38\xfb\x5d\x56\x50\xe8\x46\xf0\x04\x68\x21\x91\x3d\x33\x6d\x9b\xa1\x12\x05\x5e\xc2\x02\x90\x94\xb0\x3a\xab\x48\xe5\xe9\xe8\xb9\x30\x3e\x25\x99\xc4\x79\xfd\x56\x89\x78\xe1\x2b\x33\x5c\x89\x84\x77\x92\xf2\xae\x92\x76\x4a\x39\x53\xbd\xb0\x3c\x77\xbe\xc2\xac\x64\x71\x3b\x2f\xb0\x8d\x45\x16\x8d\x91\xd1\xca\xfd\x0a\xb3\xf3\xf3\xf3\x26\x03\x58\x92\x69\x31\xc8\xca\x46\x52\xf4\x6d\x85\x36\xda\xd1\xd4\x37\x01\xac\xa7\xaa\x32\x53\xff\xa1\x74\x75\x87\x1f\xe1\x4a\xf5\x54\x5b\x66\xf2\x0e\x56\xaf\x54\x61\x77\x20\xb0\xc4\x9a\xcb\x75\xcd\xa9\xe5\x65\xa3\xbe\x41\xb7\x35\x77\x74\x7a\x7f\x7c\x12\x5c\xea\x6b\x3c\x91\x84\x52\xde\x6d\x61\xd9\x84\x25\xd9\xba\x9c\xe5\xc2\x5e\xa9\x05\x54\xe9\xf4\xea\x97\xdf\x6e\x5e\x9d\x3e\xcd\xa2\x5e\xa9\x2e\xeb\x78\xb3\x61\xb7\x15\x7a\x74\xe6\xff\x2b\x21\xba\xdb\x22\xb2\xe1\xbc\x59\x4d\xf7\x99\x5e\x0e\x2c\x01\x15\x03\x0a\x6f\x6e\x9e\x4c\xff\x0a\x54\xf4\x30\x99\x36\xd3\xee\x49\x32\x5d\x22\xe1\x9d\xa4\xbc\xab\xa4\x9d\x56\x3c\x89\x59\xd9\xd5\x84\x27\x3d\x75\x25\x6e\x3a\xf7\x1f\xd9\x71\x14\xdd\x38\x12\xd8\x7f\x20\x2c\xac\xae\xf2\x2d\x8b\xbb\xd5\x25\xbe\x0d\xd0\x94\x50\x6a\x57\x4c\x14\x5c\x91\xac\xfe\x99\xab\xb7\x2f\x57\x90\x9b\x6e\x6e\x9d\x75\xca\xa3\x77\xbe\xe4\x94\x42\xb0\x5a\x12\xa7\x3c\xfc\x0f\x81\xd9\x35\x67\x1a\x13\x06\x72\x4b\xb5\x74\x46\x02\x1d\x79\x12\xfe\x4c\x40\x69\xe4\xbe\x7f\x9f\x3b\x4b\x28\x43\xee\x5a\x67\xb5\x81\xa9\x08\x07\x7c\xe6\x19\xcf\x86\x5c\xc2\x76\xad\xce\xde\x4b\x00\x23\xa4\x35\x89\xd5\xd8\x4f\x22\x20\x61\xa4\x5f\xa4\x35\x78\x5b\xa2\xe0\x1d\x24\xb6\x45\x6a\xd6\xdb\x51\xe5\x89\x46\xe5\x6c\x9b\x02\x23\x95\xd2\xd2\x13\x9c\x12\x7f\x8e\x5c\x86\x75\x22\x8b\xcf\x00\x4a\x9f\xbd\xfb\x10\x11\xe0\x00\xa4\xf2\x7c\x4a\xfc\x07\x9c\x8a\xdd\x5a\x76\xc0\x0c\xd0\x53\x80\xa5\x1f\x35\xc0\xab\x88\xcf\xbc\x4c\x8c\x20\x9b\x28\x6f\x31\x81\x50\x92\xc0\x33\x5e\x5b\x55\x1f\xa9\x6c\x19\x46\x4b\x80\xe5\x30\x35\x63\x89\xf4\x74\x93\x61\x7a\x96\x7e\x34\xf9\x0a\x05\x3f\xf3\x6d\xb5\xe2\x0a\x63\x69\x77\xcf\x98\xa5\xb9\xbd\x5c\xb9\xe8\xe2\xf6\x60\xe3\x99\x76\xd9\x1d\x72\x67\xa6\xcb\x05\xb4\xb4\x3b\x68\xac\x13\x35\x59\x1e\x9f\xa9\xe7\x8f\xfb\xf5\xeb\x56\x9b\x6b\x8c\x65\x48\x98\x47\x61\x5a\x70\x24\xbc\x15\x26\x8d\x3b\x6e\x80\x53\x1a\xcb\x26\x38\x30\xec\xb0\x46\x69\x2e\x90\xfb\x93\x25\x68\xc2\xb5\xe6\xb1\x05\xae\xf6\xb9\x6b\x11\x58\x09\xec\x13\x16\x22\x77\x58\x46\xc9\xae\x87\x5c\xd8\x7f\x58\x84\x07\xc0\x02\x7b\x53\x2c\x5d\x77\x3b\xa6\xf8\x49\x92\x20\xb3\x42\x60\x5a\xce\xd3\x8f\x5d\xb5\xc2\x5c\xeb\xc7\x16\xd4\xc2\x08\x6d\x61\xa9\x55\xd4\x0e\x36\x37\xac\xa2\x36\x4e\xf2\x99\xf7\x4c\xee\xda\x28\x9f\xd3\x24\x66\x75\x80\x35\x03\xce\xcf\x59\x4d\x20\xdd\xfe\xcc\x7f\x8b\x2a\x7d\x9d\x88\x16\xcb\x8b\x17\xf7\x11\x10\xf9\x4f\x9b\xb1\xb2\xd4\xc2\x8f\xb0\x09\x7d\x4a\xfd\x58\x11\xf2\x09\x53\x12\x96\xa7\x4f\x4e\x45\x7a\x59\xec\x95\x0a\x97\x0a\x53\xed\x61\xad\xb1\x09\xed\xac\xe2\x78\xcd\xc5\x33\xb0\x64\x0f\x77\x8a\x9d\x87\xb3\x6b\x29\xec\xa3\x71\x1f\x19\x91\x7c\x4c\xa9\x22\x21\xcb\x2e\x6d\x9f\xb5\xf9\x17\xb9\x6b\xa8\x43\x27\x2f\xb6\xd0\x95\xd6\x28\x4f\xc3\x93\x2e\x24\xe6\x35\xa6\x15\xc1\x70\xcb\x3c\xa9\x50\x77\x63\x9e\x94\x58\x4e\xe9\xa6\xe4\xec\x9f\x5b\xda\x18\xfb\x2d\x08\x2e\xb5\x1d\xbd\x36\x81\x5d\x67\x58\x8c\x9f\x3c\x0a\x2c\x34\xe2\xbe\x6c\xec\xdc\xac\x90\xe6\x91\xcd\xd1\xb5\x4c\xe2\xf6\xee\xde\x66\x4c\xc2\x44\xa2\x3d\x91\x48\xc1\x15\x20\x37\x20\x21\xd1\xea\x60\x26\x65\xb5\xfc\x6e\xb8\xde\x94\xe5\x5f\x93\x78\x02\xb2\x81\x79\xac\x00\xbb\x6e\x1e\x6b\x3c\x2d\x8d\x82\x8a\x90\xb5\x78\xfa\xd7\xfe\xb0\xb4\x34\xbc\x2d\x42\x76\x83\xa5\xf1\xbc\x89\x07\x5f\x43\x75\x9d\x9f\x27\xf7\x6d\x6f\x18\x8e\x33\xc2\xbe\x0f\x14\xd2\xbe\x03\xe7\x01\xe6\x63\x24\x91\x63\x82\x42\x4c\xc7\x28\x94\x78\x72\x96\xa9\xc3\x89\x79\x40\xa6\x04\xa4\xa1\xd6\x2f\xbf\x7b\xd7\xdf\xbe\xde\xdf\x7e\xfb\xec\x7d\xb9\xba\xfb\x3d\x5f\xb9\xeb\xca\xb6\x50\x99\x34\xec\xd9\xe0\x9a\xec\x09\x6b\xa8\x83\x18\x9c\x02\xa6\x88\x26\x8f\x4d\x4a\xe2\xbb\x24\x97\xa7\xdd\x64\xe7\xdd\xe4\xc0\xe4\xde\xac\x5b\x14\xf5\x5b\x76\xbc\x6e\xf1\x65\x6e\x55\xb4\x00\x4a\x89\x50\xe4\x7f\x80\xdc\xb4\x4a\x7c\x2a\x78\x74\x86\x81\x31\x28\x85\x43\xc8\xae\xf4\x8f\x87\xd9\xec\x5f\x29\x2b\x2a\x4a\x15\xa5\xe5\x8d\xbf\x1f\x96\x49\xd7\x3c\x9e\xf0\x0f\xfc\xe9\x3e\xdd\x3f\x0c\xa1\x26\x98\x05\xe9\xd5\xce\xb0\x29\x17\x98\x4d\x5e\x02\x33\xc1\x45\x22\x8e\x1b\x93\x35\xae\x7e\x1d\xd8\x69\xe4\x55\x1d\xf3\x00\x3a\xae\xea\xb8\x53\xaa\xb6\x32\xe8\x23\xaa\xfa\x43\xa2\xf5\xb2\xb3\x40\x82\x02\xbd\xb8\xb0\x8b\xab\xbe\x35\xe3\x74\xbe\xb1\x47\x82\x0f\xe4\x11\x94\x17\xc0\x14\x27\x54\x6f\x7b\x7a\xcb\x04\xb1\x8a\x6f\x3a\x42\x10\xca\xc3\x16\xe8\xf1\x99\x87\x27\x72\xec\x89\x1c\xc7\xac\x96\xfd\xe1\x47\x98\x85\x60\x9b\xbd\xaf\xc2\xba\x5e\x2f\x6b\x9e\xa1\xd4\xca\xc0\xff\xb8\x8e\x2a\x4c\xa3\x65\x8e\x59\x15\x10\xba\x51\x20\x4a\xcb\xff\x8d\x68\x96\x43\x9e\x98\xd6\x03\xa6\xb5\xe2\xcd\xba\xdf\x7b\xf5\xdc\x45\x55\x52\xb3\x6d\xbf\x8b\xea\x01\xe6\x20\x4f\x5d\x54\x47\xe9\xa2\x2a\xcd\x0c\xb6\x75\x51\xd5\x06\x9a\xc7\x45\x3c\xe6\x21\x30\xe0\x5b\x5f\x15\x68\x10\x07\x4e\x07\x2d\x84\x81\x37\x56\xd9\x70\x2f\xa2\xc0\xa2\xb4\xf4\x66\xf0\x92\x97\xa6\xbd\xf4\x10\xec\x3d\xf9\xec\x4b\x71\x72\x8d\x53\xc3\x36\x38\x65\x95\x76\xf7\x97\x53\xc3\x1e\x71\xea\xc0\x29\xc9\x1a\xa7\x2e\xdb\xe0\x94\xd5\x49\x6a\x7f\x39\x75\xd9\x23\x4e\x1d\xb8\xb3\x6f\x8d\x53\xef\xda\xe0\x94\xd5\x01\x66\x7f\x39\xf5\xae\x47\x9c\xaa\x30\xf3\x3d\xa7\xb5\xd3\x41\xdd\x64\xf6\x18\x99\x68\xcd\x17\x20\x7b\x70\x54\x52\x7a\x92\x56\x61\x8d\xfb\x56\xfd\xf0\xa4\xfa\xa3\xf6\x88\x1f\x51\xf5\x97\x27\xd5\xb7\xa6\xfa\x26\xe7\xe7\x47\x54\xfd\xbb\x93\xea\x5b\x53\xbd\x7d\xdf\xea\xc1\x55\xbf\x1a\x3f\x2a\xcd\x45\x0b\x11\xe4\x9d\xe6\x56\x7f\x0a\x27\x2b\x83\xbf\x3c\xbc\xeb\xf5\xef\x36\xc2\xcf\x8f\xca\xc7\x02\xf2\x21\xe8\x51\x1b\x03\x1a\xc7\xa7\x07\xe6\x6c\xa7\xdb\xc4\xa2\x45\x67\x97\x75\x8b\x61\x54\xab\xa6\x5f\xa8\xc4\x52\x53\x9c\x89\xb8\xfb\x8d\xaf\x27\xf6\xe4\xd9\x53\xf1\xa6\x7b\x21\xac\xe9\x1f\x74\xa9\xf0\xe2\x02\x20\xb0\xea\xaf\xfd\x9e\x28\x4d\xa6\x73\xe4\xa6\x07\x1e\x07\xe3\x5d\xe3\x76\xa6\x03\xf3\xee\x4e\x10\xb6\xb6\xdb\x1a\x01\x77\x3a\xd8\x5a\x70\xd1\x07\xa6\x41\x1e\xc6\x95\xad\xbe\xf5\x63\x1f\x38\x2f\x0f\xa5\xad\x90\xb9\xb7\x7e\xac\xd0\xf6\x6f\xe8\x6c\x0c\x80\x57\x7e\x08\x64\xe3\x97\x41\xac\x82\xa8\x24\x06\x49\xfc\x03\x47\xc6\x8d\xdf\xe4\xd9\xaf\xed\xe5\x7f\x77\xa3\x62\x94\x1e\x1d\xc2\x97\x48\x6d\xfb\x21\xfc\xfa\x1a\x57\xbe\x7c\xf9\x62\x74\xb1\xf2\x73\x37\xff\x0f\x00\x00\xff\xff\x93\x99\x57\x6b\x47\x67\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 26439, mode: os.FileMode(0664), modTime: time.Unix(1550356118, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0x3, 0x87, 0x64, 0xe0, 0xa0, 0xfa, 0x60, 0x4f, 0x8f, 0xc6, 0x11, 0x9d, 0xb8, 0x3f, 0x5, 0xf9, 0x91, 0x22, 0xb1, 0x7b, 0x1d, 0xac, 0x45, 0x30, 0x6e, 0x96, 0xb0, 0x32, 0x4, 0xea, 0x90}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
