// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (46.215kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x73\xdb\x36\xf2\x7f\x9f\x4f\x81\x3f\xff\x33\x9d\xde\x74\x6c\xc7\x76\xd2\xbb\xb9\xda\xea\x38\x6e\x9c\x76\x6a\xc7\x8d\xe5\x4b\xfa\x8e\x03\x91\x6b\x12\x15\x08\xb0\x00\x68\xd9\xf7\xe9\x6f\x40\x52\xb6\x24\x3e\x88\x20\x29\x89\x94\xf4\xa2\x9d\x31\xc5\x05\x81\xdd\xdf\x3e\x60\xb1\xd8\x9c\xfd\xfc\x14\x50\xf4\x08\x42\x12\xce\xce\xad\xe3\xc3\xb7\x16\x02\xe6\x70\x97\x30\xef\xdc\xfa\xcf\xfd\xd5\xc1\xbf\xac\x9f\x07\x6f\xce\xfe\xef\xe0\x00\x7d\x02\x06\x02\x2b\x70\xd1\x84\x28\x1f\x79\x14\xbb\x80\x4e\x0f\x4f\x4e\x0e\x4f\xd0\xc1\xc1\xe0\xcd\x19\x61\x0a\xc4\x03\x76\x60\xf0\x06\xa1\x33\x01\x7f\x47\x44\x80\x44\x94\x8c\xce\x2d\x4f\x8d\x7f\xb0\x5e\x3f\x74\x7a\x78\xf2\xd6\x3a\x8a\xdf\xe3\xa3\xbf\xc0\x51\xc8\xa1\x58\xca\x73\xeb\x93\x1a\x7f\x23\xcc\xe5\x13\x0b\x11\xf7\xdc\x72\x30\xa5\x84\x3d\xf0\xf4\x99\x26\x40\xe8\x2c\x14\x3c\x04\xa1\x9e\x11\xc3\x01\xe8\x97\x98\xfd\xc0\x9d\x48\x5a\x83\x2b\x4c\x25\x9c\x1d\x4d\x5f\xc8\x7f\x1f\x3b\x0e\x84\xaa\x9c\xc4\xf1\x09\x75\x91\x7a\x0e\xe1\xdc\x52\x44\x51\x18\x61\x91\x7e\x5e\x0f\x48\xb1\x03\x3e\xa7\x2e\x88\xa3\x94\xe0\x28\xa6\x98\xa5\x7e\x79\x3b\xb3\xc2\x4f\x82\xb8\x2f\x83\x65\xe7\xf7\x48\x24\x19\x51\xb0\x06\xf7\x22\xca\xcc\xac\x0e\x03\xb2\x73\xca\x9f\xd7\x35\x1e\x01\x7d\x65\xbc\x24\x1e\x4b\x1e\xcd\x92\xd5\x98\x6f\xdd\x39\xe7\xd1\xf9\x98\x12\x8f\x59\x03\xa9\xb0\x50\x55\x89\x02\x2c\x3c\xc2\x6c\x0a\x0f\xca\x1a\x9c\x18\x52\x09\xe2\xf9\x26\x64\x3e\x3c\x85\x98\xb9\x66\xec\x88\x24\xd8\x01\x16\xe3\x28\x34\xa3\x9b\x08\xbc\x8c\x02\x2b\x25\xc8\x28\x52\x20\xe7\x7f\x98\xfd\x29\x1d\x4d\x3a\x98\x82\x85\x1e\x31\x8d\xe0\xdc\x7a\x67\x1d\x2d\x0c\x75\x94\x3f\xd6\xd9\x51\x02\xa5\xb9\x67\x21\x76\xc6\x84\x79\xe5\xd3\xd7\x12\xb1\xb1\x52\xd8\xf1\xad\xc1\xdb\xaa\x8b\x56\x3c\x5c\x46\x74\x76\x94\xf9\xfe\x9c\x8a\x22\x73\x95\x70\x9f\x1c\x67\xaf\x0e\xfd\x56\x87\x4d\x22\xf5\x78\x6d\x48\x8d\xf5\x77\x0f\xd5\x3d\x54\xeb\x42\xb5\x80\x63\x6d\x41\x75\xe8\x08\x4e\x29\xb8\xb3\x91\x9e\x8c\x42\x10\x8e\x0f\xce\xf8\x92\x33\x85\x09\x03\xb1\x62\xf0\x9a\x90\xd5\x42\xc6\x63\x1d\x22\xe9\x63\x97\x4f\x6c\x1d\x79\x5a\x03\xc2\x0a\xc9\x32\x6c\xce\x67\xf5\x57\x02\x93\x90\x0b\x65\x2d\xbe\x5a\x93\x9f\x4b\x78\x5a\x6a\x10\x72\x19\x5b\xc5\x28\xe4\xce\xb6\x2e\x61\x25\x51\xd6\x16\x67\xb1\x6c\xf2\xe5\x33\x63\xb5\x5f\x35\x20\xcf\x74\x37\x96\x5a\x53\xc9\x35\x92\x5e\x23\x09\x36\x92\x62\xee\x97\x9b\x10\x57\xb5\xf7\x45\xf4\xcb\x23\xf6\x94\x2e\xc7\xfe\x4f\x7f\xc9\x57\xfe\x5c\x82\x9c\x97\x37\xe9\x59\x4e\xeb\x7a\x96\xf9\x49\xcf\xfc\x38\xfb\x43\x79\x32\x41\x60\x05\xdb\x95\x48\xc8\x73\xa4\x7a\x95\xf7\x78\x44\x21\xcf\x8f\xb6\x99\x6a\xa8\x4a\xb2\x54\x55\x8d\xd5\xb3\x86\xcf\xac\x12\x96\x14\xf8\xca\xf5\x06\xcd\x15\xfd\xfa\x8c\xdf\x78\x11\x78\x91\xdb\xd8\x3b\xfa\x55\x39\xfa\x06\xae\x21\x83\x61\xa0\xe0\x28\x5c\x4b\x2e\x4a\x60\x67\x6c\x6b\xb1\x2a\x70\x6d\x4a\xd8\x78\xb9\x84\x1a\x78\x8b\xf6\x2d\xb3\x74\xb8\xd8\x01\xd3\xac\xf6\x66\x79\x77\xcc\xb2\xda\x9b\xe4\xbd\x49\xee\x97\x49\xbe\x70\xff\x8a\xa4\x0a\x80\xa9\xd4\x2c\x87\x00\xee\xcc\xc3\x7c\x53\x4b\xf9\x44\x1b\xb3\xf7\xcb\x4c\x72\x14\x86\xfa\xbd\x1f\x33\xfb\x86\x1c\x78\x45\x60\x0d\x4e\xde\x2d\x7b\x51\x2a\x08\x6d\xc2\x1c\x01\xc9\xf4\x32\x19\xd6\x45\x82\x10\x7b\x30\x47\xb0\x30\x97\x25\xec\x09\x43\x4a\x1c\xac\x08\x67\xb3\x56\x3d\xc0\x84\xb5\xea\xbb\x4a\xb5\x24\x03\x34\xed\xb8\x2c\xa4\x04\x66\x92\xe2\x18\xad\xe7\xd6\x33\x48\x6b\xf0\x2b\x50\xca\x91\x76\x37\x20\x33\x5a\xba\x5a\xe7\xf7\x81\x3f\xa5\xb1\x29\xe7\x4a\xff\xb1\x1a\x57\x57\x7c\xd8\xb9\x40\xc3\x05\x01\xa6\x62\xc9\x59\x83\x47\x10\x8a\x38\x98\xd6\xf5\x47\x37\xc0\xa2\x0f\x58\xbc\x0a\x5f\x3f\xe8\x83\x73\xd2\xf3\xfc\x4d\x41\x90\xce\x1c\x58\x74\x45\xf4\x9c\xba\xe9\x9d\x68\xe2\x4a\x73\x80\x6d\xeb\x69\x9b\x3a\x81\x88\xb9\x20\x28\x61\x55\x56\x31\xab\x1b\x32\x1a\x05\x59\xf9\x96\xb1\x78\x9a\xcd\x1b\x95\x70\xb8\x11\x97\x9b\x72\x1a\x95\xe6\x28\x8b\x17\x96\xc5\xce\x67\x98\x14\x2c\xae\xf1\x02\xdb\x58\x64\xde\x18\x09\xac\x06\xf6\x67\x98\x1c\x1e\x1e\xd6\x19\xc1\x10\x4d\xe9\x20\x85\xd9\x3c\x54\x9c\xd1\x4b\x7f\x6c\x45\x54\xb7\x21\xb0\xbe\xca\x4a\xcf\x7d\xa7\x84\x35\xc4\x8f\x70\x21\xfb\x2a\x2e\x3d\x7b\x74\x21\xb7\x54\x62\x43\x08\xb1\xc0\x8a\x8b\x79\xd1\xc9\xe9\x63\x2d\xbf\xe3\x6e\x8b\x6e\xe3\xf8\xfe\xf8\xa4\x37\xf4\x97\x78\x24\x08\xa5\xbc\xdb\xcc\x32\x89\x4c\x92\x75\x21\x7b\xba\xb2\x2d\x55\x81\x32\xa1\x5e\xfc\xf2\xdb\xd5\xf6\x09\x54\xaf\x6a\x07\x85\x79\x39\xfc\xba\x75\xb2\xbc\x1c\xda\x5f\xb7\x54\x94\x55\x5c\xd3\x49\xb7\x05\xba\x71\xe0\x0f\x41\x29\xc2\xbc\x9e\x06\x5f\xb9\xdb\xe5\xe9\x92\x76\x18\xf5\xa7\xdd\x16\xe7\xc6\x51\xff\x25\x22\x79\x25\x62\x1d\x62\x91\x11\xe2\xf5\x72\xd6\x06\x75\x84\xce\xb0\xe3\x00\x85\x18\x6d\x68\x0c\xcf\xe7\xd6\xdf\x16\x92\xc4\x63\x98\x9e\x5b\xd8\x51\xe4\x11\x2b\xb0\x50\xc0\x5d\xf2\x40\x40\x68\x41\xfc\xf2\xbb\x7d\x79\xfb\xf9\xfe\xee\xf6\xda\xbe\xb9\x18\xfe\xbe\x58\x69\x3f\x33\x76\x5d\x68\xac\xae\x7e\xa8\x49\xc6\xf1\xa3\x9b\x0b\xb4\xae\x67\x1c\xf5\xb4\x3b\x9c\x71\xdc\xca\x04\xa3\xe6\xf9\x25\x05\x2c\x3e\x32\x25\x9e\xaf\x08\x50\xb7\x77\x5e\x59\x71\x4e\x15\x09\x6d\x05\x4f\x2a\x17\x59\xf1\x02\x91\xf2\x01\x81\x5e\x25\x7a\x88\x97\xd9\xb2\x39\x4c\x3e\x12\xb3\x11\x5d\xd5\xfe\x40\x6b\xc6\xd1\xd9\xbc\x71\x6c\x0b\x9f\x9f\xb8\xe2\x3d\x86\x67\x31\x66\xf4\xc2\x90\xdd\x19\xc8\xc0\xf6\x40\x46\xff\x77\x8d\xa5\xfa\x32\xbc\xed\x1b\x5c\x96\x5a\x33\xbd\xb6\xd8\x98\x51\x2c\x15\xfa\x32\xbc\x6d\x79\x07\xaf\x87\xb7\xaf\x1b\x8c\xdd\x1a\x20\xe9\xf6\x00\xf2\x9a\x7b\x3d\xc4\x62\x89\xbb\xbb\xe6\xde\x5a\xf1\xb1\xd1\xbd\x6e\xa7\xc5\xb6\x46\xce\xdc\x61\x97\xf0\x7c\x80\x0f\xff\xe8\x36\x97\x0c\x93\x39\x58\x38\x3e\xfa\x0e\x07\xe1\x4f\xe8\x0f\x1e\x31\xa7\xd6\x17\xea\x1a\xc2\x85\x61\x62\xdb\xd7\x80\xde\x15\x78\x62\x63\x69\x0b\x2d\xbd\x26\xf6\x58\xf6\xd1\x1e\x97\x60\xf6\x2e\xea\xe9\x69\x7d\x2e\x68\xef\xa2\xc2\x8b\x8c\x65\x23\xb6\x04\xd2\xba\x20\x5b\x18\xc6\x13\x3c\x0a\xad\xc1\xab\x55\xa9\x87\x54\xb1\x79\xa4\x76\x33\x35\x34\x57\x43\x39\x47\xdc\xf1\xe4\x50\x32\xf1\x0e\xa7\x87\x66\x0b\xd2\x0a\xb9\xdc\x88\xd3\x4d\xb9\x8d\x5a\x89\x66\x93\xb5\x5d\xa6\x3d\x83\xb6\xc7\x7e\xea\x15\xd9\x7a\x49\xdb\x18\xd2\x16\x89\x71\xe8\x70\x51\x54\x3a\x99\xb7\xce\x8e\xcb\xd0\x8e\xd7\xb3\x4b\x02\xbc\xd3\x9e\x6d\x6b\xe4\xf7\x65\x78\x8b\x6c\xbd\xa4\xee\x8b\xb0\x9b\xee\xfd\x57\xa0\x61\x0f\x9d\xbb\x9e\x76\x4f\x5c\x7b\x01\x87\x1b\x71\xb9\x29\xa7\x51\x2b\x06\x45\xaf\xec\x62\xc4\xa3\x9e\x9e\x51\x0f\xec\x78\xf2\xbb\x6c\x39\xea\xf7\x9c\x98\x5e\x86\x32\xea\x35\xf5\x40\x28\x35\xbb\x6c\x13\x72\x49\x92\xfb\x41\x2b\xee\x28\x97\x77\x31\x98\x72\xef\x2b\x81\x49\xd5\xce\x47\x13\xe2\x2a\xdf\x16\xf0\x77\x04\x52\x59\x83\xf7\xef\x33\x77\xef\x8a\x28\xd7\xd9\x33\xa9\xe5\x4e\x46\xf7\x02\x40\x33\x69\x8e\x63\x15\x1c\x8a\x0f\xc4\xf3\xd5\x2b\xb7\x8e\xdf\x16\x36\x2e\xa9\xcd\xb1\x25\x5c\x33\xbf\x99\xbb\xf6\x7b\xb2\xbe\x8c\x61\x69\x87\x9c\x12\xe7\xd9\x1a\x30\xac\x22\x91\x7f\x47\xae\xf0\xdb\xcd\x87\xf0\x01\xbb\x20\xa4\xed\x50\xe2\x8c\x93\x8b\xb7\xc6\xbc\x03\xa6\x09\x6d\x19\xe7\x49\x6b\xd0\x4b\x9f\x4f\xec\x84\x8d\x20\xea\x08\x2f\x9d\x80\x27\x48\x7c\xf1\x57\x47\x11\x65\x57\x0e\x97\x0c\xa3\x04\xc0\x74\x98\x8a\xc1\x44\xdc\x87\x97\x61\x7a\x10\xff\x39\xbd\xc7\x1c\xdb\xb6\x4a\x81\x85\xd6\xb4\xe1\x0b\xcd\x54\xdd\x5e\x9f\xe4\x24\xa4\x36\xef\x1e\x4c\x2c\x53\x13\xef\xb0\xe2\x2e\x8e\x43\x85\x55\x24\x47\xd3\xeb\xa5\xf2\xe5\xcf\xd5\xda\x75\x23\xe7\x3a\xd7\x93\x71\xf1\x0a\xf5\x52\xb2\xb4\x29\xa3\x31\x5d\xdc\x6c\xa0\x06\x1d\x68\x74\x18\x53\x29\x1e\x5a\x83\x1f\x0d\x89\x46\x5c\x29\x1e\x18\xd0\x55\xbe\x97\x9c\x47\x2c\x43\xec\x10\xe6\x95\x74\x6b\xec\x7a\xc8\x85\x9d\x71\x1a\x1e\x00\x73\xcd\x55\x71\xc5\x5d\x2a\xe3\x2e\xdd\xb1\x16\xc6\xa5\x59\x0b\x4d\xbb\xf3\xa6\xb6\x39\x2d\xcc\xb4\x4a\x58\x42\x95\x2a\xa1\x29\x59\xac\x15\x95\x83\xcd\x05\xad\xa8\x4c\x27\xf8\xc4\x7e\x01\x77\x65\x2a\x87\xd3\x28\x60\x55\x08\xcd\x7b\xb9\xc4\xdb\xb8\xbc\x9b\x13\x9d\x88\x16\x8b\xb3\x17\xf7\x3e\x10\xf1\x6f\x93\xb1\x92\xad\x85\xe3\x63\x1d\xfa\x14\xda\xb1\x3c\xca\xa7\xb4\x29\x4c\x49\x74\x5d\xb4\xbd\xcc\xb7\x4a\xb9\x4b\xad\xd4\x80\x30\x8f\xb2\x42\x27\x66\x94\x6f\x3c\x50\xd3\x5c\x58\x5c\x45\x37\xdf\x56\x3f\x79\xb4\x7c\xd6\xfa\xff\xd6\x60\x8e\x6a\xdd\x9b\x17\xe3\xce\x37\xcb\x8a\xc4\x62\x50\xa2\xcb\x74\x4d\x26\x43\xcf\x74\x25\x29\xa9\xa8\xc5\xb4\x24\xce\x6e\x19\x82\x25\x48\xaa\x0d\xc1\x02\xa5\x2c\xe9\x63\xbd\x72\xd8\x2a\x2d\xb2\x3b\x08\xb9\x50\x66\xc8\x5d\x24\xdc\x12\xf0\x26\x2b\x32\x19\x38\xc0\x4f\x36\x05\xe6\xa9\xe2\x1e\xa8\x25\xb2\x9f\x1a\x64\x23\x4a\xfd\xc9\xfa\xd4\x95\x74\xed\x6e\x78\x6f\x32\x26\x61\x61\xa4\xec\x30\x12\x21\x97\x60\x0d\x5c\xe2\x11\x55\x52\x57\xdc\xb2\xae\x1a\x2d\xbf\x1b\xee\x22\x56\x9f\xcf\x51\x30\x02\x51\x43\xef\x66\x08\xb7\x44\xef\x92\x15\xd5\x56\x9f\xc2\x90\x30\x8f\xb2\x92\x02\xfc\x7f\x7f\xe0\x5f\x18\xeb\xe7\xcb\xa3\x0b\xf0\x0f\x9e\xeb\xf8\x9c\x39\xaa\xde\x03\xff\xe6\x39\xf5\x36\xe8\xfb\x4b\x25\xe8\x81\xf8\xc7\xde\xed\xac\xd6\xed\x2c\x29\xda\xf3\x04\x1e\x1d\x24\xd2\x36\x2b\xdb\xeb\x8a\x3b\x2b\xdd\xa0\xad\x58\x9f\xeb\xf8\xb2\x39\xaa\xb5\xe8\xb3\x04\x26\x49\x52\xd8\x6c\xbc\x19\x6f\xb2\x91\xaf\x62\x0c\xf6\x2e\x70\x03\x2e\x70\xcd\x2a\xb3\x98\x79\xca\x6b\x27\xd5\xf1\xcc\xd3\xcd\xb3\x51\xda\x09\x28\x25\xa1\x24\xff\x85\x1a\x4d\x85\x77\x22\x65\xb5\x39\x04\x06\x20\x25\xf6\xba\xdd\xc9\xba\x04\x87\xc9\xec\xb7\x14\x15\x25\x19\xa1\xc2\x2c\xd2\x3f\xd7\x8b\xa4\x4b\x1e\x8c\xf8\x07\xfe\x74\x1f\xfb\x0f\x0d\xa8\x11\x66\x6e\xfc\xb4\x72\x04\xf0\x42\xd1\xf9\xc2\x8d\xa5\x1e\xfc\x03\x66\x6e\x12\xc9\xff\x30\x2a\x8f\xe4\x33\x31\xe8\xe8\x35\x06\x0d\x79\x18\x85\x9b\x0d\x3f\x6b\x67\x3e\xd7\x6c\xc9\xb2\xf8\x0b\xb8\x0b\x66\xf8\x7b\xa1\xe8\x3f\xfe\x6e\xb8\x0b\xe9\x4e\x32\x30\xc4\x5f\xd0\x29\xfc\x19\x99\xbe\x0d\xe2\xef\x43\xa4\xd4\xb4\x8a\xc6\xa1\x80\x45\xfa\xa0\x89\x53\x8b\xfb\x79\x74\x1e\x8b\x02\x1c\x20\x8f\x20\x6d\x17\x1e\x70\x44\xd5\x0a\x92\x23\xa6\xdd\x53\x5a\xc6\xa0\x51\xb0\xd9\x11\x0c\x52\xee\xb5\x80\xc0\x6b\xee\xed\xf1\x17\xb3\x21\x46\xdf\x97\xe1\x2d\xfa\xfe\x3b\xaa\x7e\xfa\xc8\x14\x88\xef\x3c\xf5\x53\x89\x6d\xed\x0a\x08\x37\x99\xd7\xfd\xd3\xf1\x31\xf3\xc0\x34\x11\x34\x4b\xb6\x0d\x99\xdd\x8f\x4f\xc9\x82\xd6\xb3\xdd\xad\x94\xce\xf9\xf3\xd2\x2f\x51\xed\x96\xb1\x6b\x94\x8d\xea\x46\x0e\x33\x3e\x59\xab\x05\xdf\x0c\x65\xef\x11\x9c\x1c\xca\xed\x41\xbc\x49\x03\xdc\xfd\x2a\xcf\x97\x7a\xcd\xda\xff\xf6\xab\x69\xbd\xe6\x84\x8b\xb1\xde\xb3\x6d\xbc\x64\xd3\x3c\xdb\x36\x9d\x7a\x4f\xd3\x6d\xdf\xd2\xe9\x1b\x25\x7f\x7b\x94\x70\x5b\xb3\xdf\x89\x1b\xc4\xcc\x46\xef\xc9\xad\x96\xa4\xed\x8f\xde\xca\xb7\x10\xca\x1b\x36\x14\xea\x82\x63\xca\x46\xf6\xc6\x10\xae\xda\xb8\x68\x91\x2e\xee\x25\x43\x98\x4b\x1c\xac\xb8\x58\x46\xbf\xa3\x39\xb7\x0c\x6c\x45\xc4\x5a\x42\xeb\x92\x4e\x42\x7b\x74\x1a\xa0\x33\x4b\x9f\xb6\x38\xca\xb7\x32\x6b\x83\xf9\x66\x53\x7b\x3d\x0a\xa8\x0a\xce\xb3\xdb\x0f\xa8\xc6\xf0\x0c\x62\xe3\xd1\xd4\x02\xdd\x8e\x5c\x80\x29\xd4\x86\x0c\x1f\x17\x2e\xc0\x54\x26\xd4\x9f\xf3\x79\xc0\x3d\x60\xc0\x97\xde\xf2\xae\x91\x73\x7c\x38\x6e\xc1\xf2\x5f\x19\x79\xbf\x6d\xcd\x38\x0e\x81\xb9\xe8\x06\x0b\x47\x70\xf4\xfd\xd5\xb1\xe1\x11\xce\xd5\xf1\xeb\x19\x4e\x7c\xc7\x1a\xdc\x95\x1f\xd4\xf4\x25\xd6\x9e\x03\xec\x49\x1b\x80\x35\xf2\x63\xbb\x01\xd8\x13\x53\xc0\x9e\xf4\x08\xb0\x6b\x4e\xa8\xcf\x01\xf6\xb4\x0d\xc0\x1a\x95\x94\xee\x06\x60\x4f\x4d\x01\x7b\xda\x23\xc0\xae\xf9\x42\xd9\x1c\x60\xdf\xb5\x01\x58\xa3\x82\xce\xdd\x00\xec\x7b\x53\xc0\xbe\xeb\x11\x60\x4b\x0c\xd4\x8a\x8f\x7d\x1e\x8e\xab\x1e\xf6\x6c\x22\xe5\x50\xb1\x5f\x50\x0f\xd2\x51\x05\x47\x45\xa5\xb5\xdb\xab\x16\xfd\xc9\x5e\xf4\x1b\xbd\xf7\xbc\x41\xd1\x9f\xee\x45\xdf\x9a\xe8\xeb\x14\x2b\x6f\x50\xf4\xef\xf6\xa2\x6f\x4d\xf4\xe6\x57\x0f\xd7\x2e\xfa\xb9\x53\x36\xc5\xc3\x36\xc2\x53\xa3\xca\x80\xa4\x48\xe4\xf5\xd3\xfd\x3b\xe6\x68\x3f\xb2\x55\x3c\x8c\xeb\xeb\x2e\xbf\x25\x3f\x07\x44\x4a\xc2\x59\x9d\x30\xf7\x7d\x8f\xc2\xdc\x35\x43\xbf\xd3\xb5\x06\x7e\x5a\x1c\x60\x7c\x2d\xcc\xaf\x74\x1c\x93\x2b\xc4\x42\x8d\x9e\x84\xc1\xda\x8c\x6d\xed\xcb\x8a\x7b\xf4\x64\xd1\x53\xd2\x5f\x2e\x97\xac\x6e\x1b\xd5\x92\x32\x8b\x10\xc0\x35\x2a\x8b\xf9\x2b\x92\x8a\x3c\x3c\x5b\x83\xf8\xac\xaa\xfb\xa7\xaf\x6b\xc6\xdd\x30\x24\x6c\xce\x69\x6b\x06\x77\x39\x66\x5b\x7e\x9b\xe1\x1b\x8a\x51\x92\xde\xcf\x91\x46\x9d\x1e\xa6\x48\x77\x80\x29\xb3\xfb\xe1\xf5\x0d\xe5\x6c\x77\x09\xf3\xe8\x7e\x5a\xfe\x69\x44\x99\xe9\x2e\x61\x44\x6d\xde\x09\x62\x61\x00\xec\x6a\xad\x0c\x80\x29\x6b\x10\x03\xee\xe2\xe5\x81\x51\xac\x17\x05\x20\x88\x53\x01\x43\x65\xff\xd0\x59\xef\x3b\x51\xec\x3d\x55\x0b\x71\xce\x5c\x19\x84\x91\x36\xac\xc2\xcb\xe9\x88\xfd\xfe\xcf\x6e\x57\x7f\xd6\xde\xc6\xb6\x82\xd7\x1e\xd5\x17\x15\xec\x5f\x97\xd7\x17\xcd\xaf\x71\xe6\xc7\xd7\x1f\xce\x8e\xe2\x36\xe5\x0f\xd8\x81\xc1\x9b\xff\x05\x00\x00\xff\xff\x10\x15\xb3\x6c\x87\xb4\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 46215, mode: os.FileMode(0664), modTime: time.Unix(1608988467, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0x81, 0x4f, 0x4c, 0x89, 0x7e, 0x91, 0xc, 0x75, 0xb9, 0x66, 0xee, 0x6b, 0x81, 0x86, 0x35, 0x4b, 0x10, 0x57, 0xbc, 0x86, 0x55, 0x4f, 0x78, 0xad, 0x54, 0xc5, 0x21, 0xf, 0xf3, 0xff, 0x3a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
