// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (27.073kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x73\xdb\xb8\x11\x7f\xcf\xa7\x40\xd1\xc7\x8e\xed\x58\x4e\xae\x9d\x8e\xc4\x1b\xc7\x77\xce\xdd\x5c\xfe\x4c\x6d\xb7\xcd\x1b\x07\x22\x57\x24\x62\x10\xc0\x01\xa0\x65\xf5\xd3\x77\x40\x4a\xb6\x64\x91\x14\x41\x51\x12\xe9\xe8\x25\x13\x51\xfc\x81\xc0\xee\x6f\x17\xbb\x8b\xa5\x35\xfc\xf9\x31\x61\xe8\x01\x94\xa6\x82\x8f\xf0\xf9\xe9\x5b\x8c\x80\x07\x22\xa4\x3c\x1a\xe1\x7f\xdf\x5d\x9f\xfc\x03\xff\xec\xbd\x19\xfe\xe5\xe4\x04\x7d\x04\x0e\x8a\x18\x08\xd1\x94\x9a\x18\x45\x8c\x84\x80\x2e\x4e\x07\x83\xd3\x01\x3a\x39\xf1\xde\x0c\x29\x37\xa0\x26\x24\x00\xef\x0d\x42\x43\x05\x7f\xa6\x54\x81\x46\x8c\x8e\x47\x38\x32\xf7\x7f\xc3\xcf\x0f\xba\x38\x1d\xbc\xc5\x67\xd9\x7d\x62\xfc\x1d\x02\x83\x02\x46\xb4\x1e\xe1\x8f\xe6\xfe\x32\xfc\x9e\x6a\x93\x00\x37\x18\xd1\x70\x84\xb5\x04\x08\x97\x2e\x5a\x14\x42\x43\xa9\x84\x04\x65\x66\x88\x93\x04\x46\x98\x89\x29\x28\xec\xbd\x1f\x9e\x2d\xbe\x28\xbe\x2f\x95\xd2\xde\xf7\xd3\xdb\x4d\x37\x3e\x10\x96\x02\xf6\x06\xef\x36\xdd\xa8\x0d\x48\x9f\xf2\x40\x41\x3e\xbd\xf3\x4d\x00\x49\x22\x58\x01\xbc\x98\xcb\xf0\x2c\x97\x49\x89\x78\xa4\x64\x34\x20\x86\x0a\xfe\x5f\xca\x43\x31\xcd\xa5\x94\x10\xba\xf8\x5c\xfc\xd4\x80\x70\x7f\x22\x82\x54\x63\xef\x9a\x30\x0d\x9b\x66\x19\xc3\xa3\x24\x3c\xc4\xde\x9d\x4a\x37\xde\x6c\xa8\x61\x80\x91\x51\x84\x6b\x46\x0c\x19\x33\x18\xe1\x19\x68\xec\xfd\x06\x8c\x09\x74\x25\xb8\x01\x6d\xd6\x86\x09\x62\xca\x42\x64\x66\x72\x31\xc6\x98\xa8\xf9\xfc\xed\x43\x18\x09\x20\x16\x2c\x04\x75\x36\x07\x9c\x65\x88\x65\xf4\xd3\xdd\x6b\x92\xfa\x20\x1e\x73\xd9\x28\x21\x8c\xfd\xb0\xb8\xb5\x40\xd9\x54\xd3\x31\x83\xe2\xc5\x36\x91\x66\x11\x46\x28\x0a\xdc\x64\x9a\xc3\xde\x03\x28\x43\x03\xc2\x0a\x81\x2b\x0b\x2b\x5e\xdc\x67\xe0\xe9\x07\xa2\x9e\x95\x6f\x2f\xe0\x65\x4c\x83\x55\x36\x5d\x69\xf1\xa4\xcb\x27\xfe\xbb\x81\x64\x3e\x73\xe0\xe9\x35\xb5\x73\x7a\x01\x6c\x38\xfb\x6d\x56\x50\xe8\x56\xc8\x18\x58\x21\xb1\x7d\x3b\x6d\x97\xa1\x52\x0d\x7e\xca\x43\x50\x8c\xf2\x3a\xab\x58\xb6\x0d\x9d\x8e\x93\x75\xfd\x56\x89\x78\xee\x3b\x73\x5c\x89\x84\xb7\x92\xf2\xb6\x92\x46\xa5\x9c\xa9\x5e\xd8\x3a\x77\xbe\xc0\xb4\x64\x71\x5b\x2f\xb0\x8d\x45\x16\x8d\x91\xd3\xca\xfb\x02\xd3\xd3\xd3\xd3\x26\x03\x38\x92\x69\x3e\xc8\xd2\xc6\x52\xf4\x6d\x85\x36\xda\xd1\xd4\x57\x09\xbc\xa7\xaa\xb2\x53\xff\xa1\x74\x75\x4b\x1e\xe0\x52\xf7\x54\x5b\x76\xf2\x88\xe8\x57\xaa\xb0\x5b\x90\x44\x11\x23\xd4\xaa\xe6\xf4\xe2\xb2\x55\xdf\x79\xb7\x35\x77\x70\x7a\xff\xfa\x28\x85\x32\x57\x64\xac\x28\x63\xa2\xdb\xc2\x72\x09\x4b\xf2\x75\xa1\xc5\xc2\x5e\xa9\x05\x54\xe9\xf4\xf2\x97\xdf\xaf\x5f\x9d\x3e\xed\xa2\x5e\xa9\x2e\xeb\x78\xb3\x41\xb7\x15\x7a\x70\xe6\xff\x2b\xa5\xa6\xdb\x22\x72\xe1\xbc\x5d\x4d\xf7\x99\x5e\x0e\x2c\x01\x15\x03\x0a\x6f\x6e\x9e\x4c\xff\x06\x4c\xf6\x30\x99\xb6\xd3\xee\x49\x32\x5d\x22\xe1\xad\xa4\xbc\xad\xa4\x51\x2b\x9e\xc4\xae\xec\x72\x2c\xd2\x9e\xba\x12\x2f\x9b\xfb\x8f\xec\x38\x8a\x6e\x1c\x4a\x12\xdc\x53\x1e\x55\x57\xf9\x16\xc5\xde\xea\x12\xdf\x0b\xd0\x84\x32\xe6\x56\x4c\x94\x42\xd3\xbc\xfe\xb9\x56\x7f\x5f\xac\x60\x6d\xba\x6b\xeb\xac\x53\x1e\xbd\x0d\x94\x60\x0c\xc2\xe5\x12\x39\x13\xd1\x7f\x28\x4c\xaf\x04\x37\x84\x72\x50\x1b\xaa\xa5\x53\x1a\x9a\xd8\x57\xf0\x67\x0a\xda\x60\xef\xfd\xfb\xb5\xb3\x85\x32\xe4\xb6\x75\x56\x17\x98\x8e\x49\x28\xa6\xbe\xf5\x6c\xd8\xa3\x7c\xdb\xea\xec\x9d\x02\xb0\x42\x5a\x91\x58\x8d\xfd\x24\x06\x1a\xc5\xe6\x59\x5a\xe7\x6f\x4b\x14\xbc\x85\xc4\x36\x48\xcd\x79\x3b\xaa\x3c\xe1\xa8\x9c\x6d\x53\x60\xac\x33\x5a\xfa\x52\x30\x1a\xcc\xb0\xc7\x89\x49\x55\xf1\x19\x40\xe9\xb3\xb7\x1f\x22\x06\x12\x82\xd2\x7e\xc0\x68\x70\x4f\x32\xb1\x3b\xcb\x0e\xb8\x05\xfa\x1a\x88\x0a\xe2\x06\x78\x1d\x8b\xa9\x9f\x8b\x11\x54\x13\xe5\xcd\x27\x10\x29\x1a\xfa\xd6\x6b\xeb\xea\x23\x95\x0d\xc3\x18\x05\xb0\x18\xa6\x66\x2c\x91\x9d\x76\x72\xc2\x4e\xb2\x8f\x36\x5f\x61\x10\xe4\xbe\xad\x56\x5c\x61\x2d\xed\xf6\x09\xb3\x30\xb7\xe7\x2b\x67\x5d\xdc\x1e\x5c\x3c\xd3\x36\xbb\xc3\xda\x19\xea\x62\x01\x2d\xed\x0e\x86\x98\x54\x8f\x17\xc7\x67\xfa\xe9\xe3\x6e\xfd\xba\xd3\xe6\x9a\x10\x15\x51\xee\x33\x98\x14\x1c\x11\x6f\x84\x29\xeb\x8e\x1b\xe0\xb4\x21\xaa\x09\x0e\x2c\x3b\x9c\x51\x46\x48\xec\xfd\xe4\x08\x1a\x0b\x63\x44\xe2\x80\xab\x7d\xee\x5a\x04\xd6\x92\x04\x94\x47\xd8\x1b\x94\x51\xb2\xeb\x21\x17\x09\xee\xe7\xe1\x01\xf0\xd0\xdd\x14\x4b\xd7\xdd\x8e\x29\x7e\x54\x34\xcc\xad\x10\xb8\x51\xb3\xec\x63\x57\xad\x70\xad\x15\x64\x03\x6a\x6e\x84\xae\xb0\xcc\x2a\x6a\x07\x9b\x2f\xac\xa2\x36\x4e\x89\xa9\xff\x44\xee\xda\xa8\x40\xb0\x34\xe1\x75\x80\x35\x03\xce\x4f\x79\x4d\x20\xdb\xfe\xec\x7f\x8b\x2a\x7d\x9d\x88\x16\xcb\x8b\x17\x77\x31\x50\xf5\x4f\x97\xb1\xf2\xd4\x22\x88\x89\x0d\x7d\x4a\xfd\x58\x11\xf2\x91\x30\x1a\x95\xa7\x4f\xa8\x22\xbd\x2c\xf6\x4a\x85\x4b\x85\x89\xf1\x89\x31\xc4\x86\x76\x4e\x71\xbc\x11\xf2\x09\x58\xb2\x87\xa3\x62\xe7\x81\xb6\x2d\x85\xfd\x6a\xdd\x47\x4e\xa4\x80\x30\xa6\x69\xc4\xf3\x4b\x9b\x67\x6d\xff\xc5\xde\x0a\x6a\xdf\xc9\x8b\x2b\x74\xa9\x35\xca\x37\xf0\x68\x0a\x89\x79\x45\x58\x45\x30\xdc\x32\x4f\x2a\xd4\xdd\x98\x27\x25\x96\x53\xba\x29\xa1\xdd\x73\xcb\x58\x63\xbf\x01\x29\x94\x71\xa3\xd7\x4b\x60\xd7\x19\x96\x90\x47\x9f\x01\x8f\xac\xb8\x2f\x1a\x3b\x37\x27\xa4\x7d\x64\x73\x74\x2d\x93\xb8\xb9\xbd\x73\x19\x93\x72\x99\x1a\x5f\xa6\x4a\x0a\x0d\xd8\x0b\x69\x44\x8d\xde\x9b\x49\x39\x2d\xbf\x1b\xae\x37\x63\xf9\x97\x34\x19\x83\x6a\x60\x1e\x4b\xc0\xae\x9b\xc7\x0a\x4f\x4b\xa3\xa0\x22\x64\x2d\x9e\xfe\xb5\x3f\x2c\x2d\x0d\x6f\x8b\x90\xdd\x60\x69\x32\x6b\xe2\xc1\x57\x50\x5d\xe7\xe7\xd1\x7d\xbb\x1b\x06\x42\x43\x12\x04\xc0\x20\xeb\x3b\x40\xf7\x30\x1b\x61\x85\x91\x0d\x0a\x09\x1b\xe1\x48\x91\xf1\x49\xae\x0e\x94\x88\x90\x4e\x28\x28\x4b\xad\x5f\xfe\xf0\xaf\xbe\x7e\xb9\xbb\xf9\xfa\xc9\xff\x7c\x79\xfb\xc7\x7a\xe5\xae\x2b\xdb\x42\x65\xd2\xb0\x63\x83\x6b\xb2\x27\xac\xa0\xf6\x62\x70\x1a\xb8\xa6\x86\x3e\x34\x29\x89\x6f\x93\x5c\x1e\x77\x93\xad\x77\x93\x3d\x93\xfb\x65\xdd\xa2\xa8\xdf\xb2\xe3\x75\x8b\xcf\x33\xa7\xa2\x05\x30\x46\xa5\xa6\xff\x03\xec\x65\x55\xe2\x63\xc1\xa3\x33\x0c\x4c\x40\x6b\x12\x41\x7e\xa5\x7f\x3c\xcc\x67\xff\x4a\x59\x51\x51\xaa\x28\x2d\x6f\xfc\x7d\xbf\x4c\xba\x12\xc9\x58\x7c\x10\x8f\x77\xd9\xfe\x61\x09\x35\x26\x3c\xcc\xae\x76\x86\x4d\x6b\x81\xd9\xf8\x39\x30\x93\x42\xa6\xf2\xb0\x31\x59\xe3\xea\xd7\x9e\x9d\xc6\xba\xaa\x13\x11\x42\xc7\x55\x9d\x74\x4a\xd5\x4e\x06\x7d\x40\x55\x7f\x48\x8d\x59\x74\x16\x28\xd0\x60\xe6\x17\xb6\x71\xd5\x37\x76\x9c\xce\x37\xf6\x28\x08\x80\x3e\x80\xf6\x43\x98\x90\x94\x99\x4d\x4f\x6f\x99\x20\x4e\xf1\x4d\x47\x08\xc2\x44\xd4\x02\x3d\x3e\x89\xe8\x48\x8e\x1d\x91\xe3\x90\xd5\xb2\x6f\x41\x4c\x78\x04\xae\xd9\xfb\x32\xac\xeb\xf5\xb2\xe6\x19\x4a\xad\x0c\xfc\xdb\x55\x5c\x61\x1a\x2d\x73\xcc\xa9\x80\xd0\x8d\x02\x51\x56\xfe\x6f\x44\xb3\x35\xe4\x91\x69\x3d\x60\x5a\x2b\xde\xac\xfb\xbd\x57\x4f\x5d\x54\x25\x35\xdb\xf6\xbb\xa8\xee\x61\x06\xea\xd8\x45\x75\x90\x2e\xaa\xd2\xcc\x60\x53\x17\x55\x6d\xa0\x7d\x5c\x2c\x12\x11\x01\x07\xb1\xf1\x55\x81\x06\x71\xe0\xe4\xbc\x85\x30\xf0\xda\x29\x1b\xee\x45\x14\x58\x94\x96\x5e\x9f\x3f\xe7\xa5\x59\x2f\x3d\x84\x3b\x4f\x3e\xfb\x52\x9c\x5c\xe1\xd4\xa0\x0d\x4e\x39\xa5\xdd\xfd\xe5\xd4\xa0\x47\x9c\xda\x73\x4a\xb2\xc2\xa9\x8b\x36\x38\xe5\x74\x92\xda\x5f\x4e\x5d\xf4\x88\x53\x7b\xee\xec\x5b\xe1\xd4\xbb\x36\x38\xe5\x74\x80\xd9\x5f\x4e\xbd\xeb\x11\xa7\x2a\xcc\x7c\xc7\x69\xed\xe4\xbc\x6e\x32\x7b\x88\x4c\xb4\xe6\x0b\x90\x3d\x38\x2a\x29\x3d\x49\xab\xb0\xc6\x5d\xab\x7e\x70\x54\xfd\x41\x7b\xc4\x0f\xa8\xfa\x8b\xa3\xea\x5b\x53\x7d\x93\xf3\xf3\x03\xaa\xfe\xdd\x51\xf5\xad\xa9\xde\xbd\x6f\x75\xef\xaa\x5f\x8e\x1f\xb5\x11\xb2\x8d\x08\xd2\xa9\xa8\x9a\x17\xc1\x9f\x1f\xdd\xf5\xea\x77\x2b\xc1\xe7\xfb\x1e\x05\x9f\x7b\x26\x64\xa7\x7b\xc0\xe2\x79\xdb\x96\x73\xff\x60\x5c\xab\x60\x5f\xa8\xc4\x52\x3b\x9b\xca\xa4\xfb\x5d\xad\x47\xf6\xac\xb3\xa7\xe2\x35\xf6\x42\x58\xd3\xbf\xd6\x52\x4e\x9d\x5b\x09\x10\x3a\x35\xcf\x7e\x4f\xb5\xa1\x93\x19\xf6\xb2\xd3\x8c\xbd\xf1\xae\x71\xaf\xd2\x9e\x79\x77\x2b\x29\x5f\xd9\x4a\xad\x80\x3b\x1d\x49\xcd\xb9\x18\x00\x37\xa0\xf6\xe3\xca\x96\x5f\xe9\x71\x8f\x8a\x17\x27\xce\x4e\xc8\xb5\x57\x7a\x9c\xd0\xee\xaf\xdf\xbc\x18\x80\x2c\xfd\xea\xc7\x8b\x9f\x01\x71\x8a\x91\xd2\x04\x14\x0d\x9a\x84\x1a\xfa\x15\xbd\xfe\x73\xdc\x4b\x5a\x88\x44\x56\x8e\xb2\x9d\xac\x61\x17\xfb\x90\x11\x12\xdd\x7d\xeb\x7e\x26\xd7\x0a\xf5\x7a\xd4\xee\x51\xb2\xde\xcd\xed\x1e\xab\x6b\x5c\xfa\xf2\xf9\x8b\xe1\xd9\xd2\x0f\x2d\xfd\x3f\x00\x00\xff\xff\xe2\xbe\x08\x67\xc1\x69\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 27073, mode: os.FileMode(0664), modTime: time.Unix(1598082567, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0xe8, 0x8c, 0x2d, 0xa7, 0xc0, 0x18, 0x12, 0xdf, 0x26, 0x4c, 0x4a, 0x94, 0x43, 0x8c, 0xce, 0x7b, 0xe8, 0x7, 0xca, 0xf0, 0xb4, 0xa0, 0xe8, 0x10, 0x32, 0xe4, 0xa5, 0xf5, 0xff, 0xca, 0x9e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
