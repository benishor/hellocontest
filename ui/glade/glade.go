// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (48.195kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6f\x73\xdb\x36\xd2\x7f\x9f\x4f\x81\x87\xcf\x4c\x27\x37\x1d\xdb\xb1\x9d\xf4\x6e\xae\xb6\x3a\x8e\x6a\xa7\x9d\xda\x71\x63\xf9\x92\xbc\xe3\x40\xe0\x9a\x44\x0d\x02\x2c\x00\x5a\xf6\x7d\xfa\x1b\x90\x92\xf5\x8f\xa4\x08\x8a\x92\x48\x49\x2f\xda\x99\x50\x5c\x10\xbb\xfb\xc3\xee\x62\xb1\x58\x9f\xfd\xf2\x1c\x32\xf4\x04\x52\x51\xc1\xcf\x9d\xe3\xc3\x77\x0e\x02\x4e\x84\x47\xb9\x7f\xee\xfc\xe7\xfe\xea\xe0\x5f\xce\x2f\x9d\x37\x67\xff\x77\x70\x80\x3e\x01\x07\x89\x35\x78\x68\x40\x75\x80\x7c\x86\x3d\x40\xa7\x87\x27\x27\x87\x27\xe8\xe0\xa0\xf3\xe6\x8c\x72\x0d\xf2\x01\x13\xe8\xbc\x41\xe8\x4c\xc2\xdf\x31\x95\xa0\x10\xa3\xfd\x73\xc7\xd7\x8f\x3f\x3a\xe3\x0f\x9d\x1e\x9e\xbc\x73\x8e\x92\xf7\x44\xff\x2f\x20\x1a\x11\x86\x95\x3a\x77\x3e\xe9\xc7\x6f\x94\x7b\x62\xe0\x20\xea\x9d\x3b\x04\x33\x46\xf9\x83\x18\x3e\x33\x04\x08\x9d\x45\x52\x44\x20\xf5\x0b\xe2\x38\x04\xf3\x12\x77\x1f\x04\x89\x95\xd3\xb9\xc2\x4c\xc1\xd9\xd1\xe8\x85\xec\xf7\x31\x21\x10\xe9\x62\x12\x12\x50\xe6\x21\xfd\x12\xc1\xb9\xa3\xa9\x66\xd0\xc7\x72\xf8\x79\x33\x20\xc3\x04\x02\xc1\x3c\x90\x47\x43\x82\xa3\x84\x62\x92\xfa\xf5\xed\x39\x0e\x3f\x49\xea\xbd\x0e\x36\x3f\xbf\x27\xaa\x68\x9f\x81\xd3\xb9\x97\xf1\xdc\xcc\xaa\x08\x60\x7e\x4e\xd9\xf3\xba\xc6\x7d\x60\x63\xc1\x2b\xea\xf3\xf4\xd1\x24\x59\x85\xf9\x56\x9d\x73\x16\x5d\x80\x19\xf5\xb9\xd3\x51\x1a\x4b\x5d\x96\x28\xc4\xd2\xa7\xdc\x65\xf0\xa0\x9d\xce\x89\x25\x95\xa4\x7e\x60\x43\x16\xc0\x73\x84\xb9\x67\x27\x8e\x58\x81\x1b\x62\xf9\x18\x47\x76\x74\x03\x89\x17\x51\x60\xad\x25\xed\xc7\x1a\xd4\xf4\x0f\x93\x3f\x0d\x47\x53\x04\x33\x70\xd0\x13\x66\x31\x9c\x3b\xef\x9d\xa3\x99\xa1\x8e\xb2\xc7\x3a\x3b\x4a\xa1\x34\xf5\x2c\xc2\xe4\x91\x72\xbf\x78\xfa\x46\x23\x2e\xd6\x1a\x93\xc0\xe9\xbc\x2b\xcb\xb4\x16\xd1\x22\xa2\xb3\xa3\xb9\xef\x4f\x2d\x51\x64\xbf\x24\xbc\x67\x42\xf6\xcb\xa1\xdd\xcb\x61\x93\x48\x3d\x5e\x1b\x52\x93\xf5\xbb\x87\xea\x1e\xaa\x55\xa1\x9a\x23\xb1\xba\xa0\xda\x23\x52\x30\x06\xde\x64\xa4\xa7\xe2\x08\x24\x09\x80\x3c\x76\x05\xd7\x98\x72\x90\x2b\x06\xaf\x0d\x59\x25\x64\x3c\x55\x21\x52\x01\xf6\xc4\xc0\x35\x91\xa7\xd3\xa1\x3c\x97\x6c\x4e\xcc\xd9\xa2\xfe\x4a\x61\x10\x09\xa9\x9d\xd9\x57\x2b\xca\x73\x81\x4c\x0b\x0d\x42\xa6\x60\xcb\x18\x85\xcc\xd9\x56\x25\x2c\xa5\xca\xca\xea\xcc\xd7\x4d\xb6\x7e\x26\xac\xf6\x78\x05\x64\x99\xee\xa5\xb5\xb6\xac\xe6\x96\xd2\xde\x52\x1a\x5c\x4a\x8b\x99\x5f\x5e\x86\xb8\xac\xbd\xcf\xa3\x5f\x1c\xb1\x0f\xe9\x32\xec\xff\xe8\x97\xec\xc5\x9f\x49\x90\xf1\xf2\x26\x3d\xcb\x69\x55\xcf\x32\x3d\xe9\x89\x1f\x27\x7f\x28\x4e\x26\x48\xac\x61\xbb\x12\x09\x59\x8e\xd4\x70\x79\x8f\xfb\x0c\xb2\xfc\x68\x9d\xa9\x86\xb2\x24\x0b\x97\xaa\xf5\xf2\xac\xe0\x33\xcb\x84\x25\x39\xbe\x72\xbd\x41\x73\x49\xbf\x3e\xe1\x37\x5e\x15\x9e\xe7\x36\xf6\x8e\x7e\x55\x8e\x7e\x09\xd7\x30\x87\x61\x60\x40\x34\xae\xa4\x17\x2d\x31\x79\x74\x8d\x5a\x35\x78\x2e\xa3\xfc\x71\xb1\x86\x96\xf0\x16\xf5\x5b\x66\x45\x84\xdc\x01\xd3\xac\xf7\x66\x79\x77\xcc\xb2\xde\x9b\xe4\xbd\x49\x6e\x97\x49\xbe\xf0\xfe\x8a\x95\x0e\x81\xeb\xa1\x59\x8e\x00\xbc\x89\x87\xd9\xa6\x96\x89\x81\x31\x66\x1f\x16\x99\xe4\x38\x8a\xcc\x7b\x3f\xcd\xed\x1b\x32\xe0\x15\x83\xd3\x39\x79\xbf\xe8\x45\xa5\x21\x72\x29\x27\x12\xd2\xe9\xcd\x65\x58\x67\x09\x22\xec\xc3\x14\xc1\xcc\x5c\x16\x88\x27\x8a\x18\x25\x58\x53\xc1\x27\xad\x7a\x88\x29\xaf\xd5\x77\x15\xae\x92\x39\xa0\x19\xc7\xe5\x20\x2d\x31\x57\x0c\x27\x68\x3d\x77\x5e\x40\x39\x9d\xdf\x80\x31\x81\x8c\xbb\x01\x35\xb7\x4a\x57\xeb\xfc\x3e\x8a\xe7\x61\x6c\x2a\x84\x36\xff\x58\x8d\xab\xcb\x3f\xec\x9c\xa1\x11\x92\x02\xd7\x89\xe6\x9c\xce\x13\x48\x4d\x09\x66\x55\xfd\xd1\x0d\xf0\xf8\x23\x96\x63\xe5\x9b\x07\x6d\x70\x4e\x66\x9e\xbf\x6b\x08\x87\x33\x07\x1e\x5f\x51\x33\xa7\x66\x7a\x27\x96\xba\xd2\x0c\x60\xbb\x66\xda\xb6\x4e\x20\xe6\x1e\x48\x46\x79\x19\x2e\x26\xd7\x86\x8a\xfb\xe1\xbc\x7e\x8b\x44\x3c\xca\xe6\xf5\x0b\x24\xbc\x94\x94\x97\x95\x34\x2a\xcc\x51\xe6\x33\x36\x8f\x9d\xcf\x30\xc8\x61\x6e\x69\x06\xeb\x60\x32\x6b\x8c\x14\x56\x1d\xf7\x33\x0c\x0e\x0f\x0f\xab\x8c\x60\x89\xa6\xe1\x20\xb9\xd9\x3c\x94\x9f\xd1\x1b\xfe\x58\x8b\xaa\x6e\x23\xe0\x6d\xd5\x95\x99\xfb\x4e\x29\xab\x87\x9f\xe0\x42\xb5\x55\x5d\x66\xf6\xe8\x42\x6d\xa9\xc6\x7a\x10\x61\x89\xb5\x90\xd3\xaa\x53\xa3\xc7\x46\x7f\xc7\xcd\x56\xdd\xc6\xf1\x7d\xf9\x6c\x36\xf4\x5d\xdc\x97\x94\x31\xd1\x6c\x61\xd9\x44\x26\x29\x5f\xc8\x1d\x71\xb6\xa5\x4b\xa0\x48\xa9\x17\xbf\xfe\x7e\xb5\x7d\x0a\x35\x5c\xed\xa0\x32\xbb\xbd\xaf\x5b\xa7\xcb\x6e\xcf\xfd\xba\xa5\xaa\x2c\xe3\x9a\x4e\x9a\xad\xd0\x8d\x03\xbf\x07\x5a\x53\xee\xb7\x34\xf8\xca\xdc\x2e\x8f\x58\xda\x61\xd4\x9f\x36\x5b\x9d\x1b\x47\xfd\x97\x98\x66\x95\x88\x35\x48\x44\x56\x88\x37\xec\xac\x0d\xea\x08\x9d\x61\x42\x80\x41\x82\x36\xf4\x08\x2f\xe7\xce\xdf\x0e\x52\xd4\xe7\x98\x9d\x3b\x98\x68\xfa\x84\x35\x38\x28\x14\x1e\x7d\xa0\x20\x8d\x22\x7e\xfd\xc3\xed\xde\x7e\xbe\xbf\xbb\xbd\x76\x6f\x2e\x7a\x7f\xcc\x56\xda\x4f\x8c\x5d\x15\x1a\xab\xab\x1f\x5a\x26\xe3\x78\xe9\x65\x02\xad\xe9\x19\x47\x33\xed\x06\x67\x1c\xb7\x32\xc1\x68\x64\xde\x65\x80\xe5\x25\xd7\xf2\xe5\x8a\x02\xf3\x5a\xe7\x95\xb5\x10\x4c\xd3\xc8\xd5\xf0\xac\x33\x91\x95\x30\x88\x74\x00\x08\x0c\x97\xe8\x21\x61\xb3\x66\x73\x98\x7e\x24\x11\x23\xba\xaa\xfc\x81\xda\x8c\x23\xd9\xbc\x71\xac\x0b\x9f\x9f\x84\x16\x2d\x86\x67\x3e\x66\x0c\x63\xc8\x6d\x0c\x64\x60\x7b\x20\x63\xfe\xbb\xc6\x4a\x7f\xe9\xdd\xb6\x0d\x2e\x0b\xad\x99\xe1\x2d\x31\x66\x0c\x2b\x8d\xbe\xf4\x6e\x6b\xde\xc1\x9b\xe1\xdd\xeb\x25\xc6\xae\x0d\x90\x6c\x7b\x00\x79\x2d\xfc\x16\x62\xb1\xc0\xdd\x5d\x0b\x7f\xad\xf8\xd8\xe8\x5e\xb7\xd1\x6a\x5b\xa3\x64\xee\xb0\x47\x45\x36\xc0\x7b\x7f\x36\x5b\x4a\x96\xc9\x1c\x2c\x49\x80\x7e\xc0\x61\xf4\x33\xfa\x53\xc4\x9c\x54\xfa\x42\x55\x43\x38\x33\x4c\x62\xfb\x96\xa0\xf7\x24\x1e\xb8\x58\xb9\xd2\x68\x6f\x19\x7b\xac\xda\x68\x8f\x0b\x30\x7b\x17\xb7\xf4\xb4\x3e\x13\xb4\x77\x71\xee\x45\xc6\xa2\x11\x6b\x02\x69\x55\x90\xcd\x0c\xe3\x4b\x11\x47\x4e\x67\x6c\x55\xaa\x21\x55\x6e\x1e\xa9\xcd\x4c\x0d\x4d\xd5\x50\x4e\x11\x37\x3c\x39\x94\x4e\xbc\xc1\xe9\xa1\xc9\x82\xb4\x5c\x29\x2f\x25\xe9\x65\xa5\x8d\x6a\x89\x66\x53\xde\xba\xc3\x9e\x41\xdb\x63\x3f\x0d\x47\xae\x61\x69\x1b\x43\xda\x3c\x35\xf6\x88\x90\x79\xa5\x93\x59\x7c\x36\x5c\x87\x6e\xc2\xcf\x2e\x29\xf0\xce\x78\xb6\xad\xd1\xdf\x97\xde\x2d\x72\x0d\x4b\xcd\x57\x61\x33\xdd\xfb\x6f\xc0\xa2\x16\x3a\x77\x33\xed\x96\xb8\xf6\x1c\x09\x2f\x25\xe5\x65\x25\x8d\x6a\x31\x28\x86\xb3\x8b\xbe\x88\x5b\x7a\x46\xdd\x71\x93\xc9\xef\xb2\xe5\xa8\xde\x73\x62\x74\x19\xca\xaa\xd7\xd4\x03\x65\xcc\xee\xb2\x4d\x24\x14\x4d\xef\x07\xad\xb8\xa3\x5c\xd6\xc5\x60\x26\xfc\xaf\x14\x06\x65\x3b\x1f\x0d\xa8\xa7\x03\x57\xc2\xdf\x31\x28\xed\x74\x3e\x7c\x98\xbb\x7b\x97\x47\xb9\xce\x9e\x49\x35\x77\x32\xba\x97\x00\x46\x48\x53\x12\x2b\xe1\x50\x02\xa0\x7e\xa0\xc7\xd2\x3a\x7e\x97\xdb\xb8\xa4\xb2\xc4\x16\x48\xcd\xfe\x66\xee\xda\xef\xc9\x06\x2a\x81\xa5\x1b\x09\x46\xc9\x8b\xd3\xe1\x58\xc7\x32\xfb\x8e\x5c\xee\xb7\x97\x1f\x22\x00\xec\x81\x54\x2e\x61\x94\x3c\xa6\x17\x6f\xad\x65\x07\xdc\x10\xba\x2a\xc9\x93\x56\xa0\x57\x81\x18\xb8\xa9\x18\x41\x56\x51\xde\x70\x02\xbe\xa4\xc9\xc5\x5f\x13\x45\x14\x5d\x39\x5c\x30\x8c\x96\x00\xa3\x61\x4a\x06\x13\x49\x1f\x5e\x8e\xd9\x41\xf2\xcf\xd1\x3d\xe6\xc4\xb6\x95\x0a\x2c\xcc\x4a\xeb\xbd\xd2\x8c\x96\xdb\xf8\x49\x46\x42\x6a\xf3\xee\xc1\xc6\x32\x2d\xe3\x1d\x56\xdc\xc5\x31\x69\x0d\x9c\x88\x3c\xa9\x07\x99\xe9\x14\x9c\x35\xb5\xb5\xf6\x70\x9c\x6a\xc7\x38\x77\x3f\x7b\x01\xd5\xb0\x1d\xa3\x2d\x99\x16\x51\xc6\xed\xf2\x05\x44\x7d\xa1\xb5\x08\x2d\xe8\xa4\x18\xb8\x2a\xc2\x84\x72\xdf\x82\x8a\x08\x16\x87\xbc\x0c\xa1\x7d\x03\x89\x24\x76\xcc\x2a\xd7\x6e\x84\x8b\xca\xdf\x32\xdd\x07\x40\xe5\xbf\x6d\xc6\x4a\xe3\x19\x12\x60\x63\x6f\x7f\xb2\xa1\x7c\x1e\x76\xa2\x28\x70\xe9\x79\x31\x6d\xb6\x79\xc9\x64\xb5\x54\xd7\xb3\x2c\xca\x12\xed\x5f\x51\xb6\xf1\x40\xcb\x6e\xc0\x93\xd2\x9d\xe9\x5e\xde\xe9\xa3\xc5\xb3\x36\xff\x77\x3a\x53\x54\xeb\x8e\x98\xac\xdb\x6d\x2c\xaa\x4c\x49\x40\x89\xba\x43\x9e\x6c\x86\x9e\x68\x85\x50\x50\xc6\x87\x59\x81\x73\xaf\x19\x82\x05\x48\xaa\x0c\xc1\x9c\x45\x59\xd0\x3c\x77\xe5\xb0\xd5\x46\x65\x77\x10\x09\xa9\xed\x90\x3b\x4b\xb8\x25\xe0\x4d\x39\xb2\x19\x38\xc4\xcf\x2e\x03\xee\xeb\xfc\xc6\x8b\x05\xba\x1f\x19\x64\x2b\x4a\xf3\xc9\xea\xd4\xa5\xd6\xda\x5d\xef\xde\x66\x4c\xca\xa3\x58\xbb\x51\x2c\x23\xa1\xc0\xe9\x78\xd4\xa7\xba\xa0\x98\xb1\xe6\xb5\x6a\xc5\x7e\x33\xdc\x45\xb2\x7c\x3e\xc7\x61\x1f\x64\x85\x75\x37\x41\xb8\x25\xeb\x2e\xe5\xa8\xf2\xf2\xc9\x0d\x09\xb3\x28\x4b\x2d\x80\xff\x6f\x0f\xfc\x73\x63\xfd\x6c\x7d\x34\x01\xfe\xe1\x4b\x15\x9f\x33\x45\xd5\x7a\xe0\xdf\xbc\x0c\xbd\x0d\x7a\xdb\xd5\x92\x1d\xc8\x7f\xec\xdd\xce\x6a\xdd\xce\x82\x4a\x21\x5f\xe2\xfe\x41\xaa\x6d\xbb\x5a\xa1\xa6\xb8\xb3\xc2\x0d\xda\x8a\xd7\x73\x15\x5f\x36\x45\xb5\x96\xf5\xac\x80\x2b\x9a\x56\x53\x5a\x6f\xc6\x97\xd9\xc8\x97\x31\x06\x7b\x17\xb8\x01\x17\xb8\xe6\x25\x33\x9b\x79\xca\xea\x61\xd3\xf0\xcc\xd3\xcd\x8b\x55\xda\x09\x18\xa3\x91\xa2\xff\x85\x0a\x9d\x4c\x77\x22\x65\xb5\x39\x04\x86\xa0\x14\xf6\x9b\xdd\x3e\xb7\x00\x87\xe9\xec\xb7\x14\x15\x05\x19\xa1\xdc\x2c\xd2\x3f\xd7\x8b\xa4\xae\x08\xfb\xe2\xa3\x78\xbe\x4f\xfc\x87\x01\x54\x1f\x73\x2f\x79\x5a\x3a\x02\x78\xa5\x68\xfc\x69\xf1\x42\x0f\xfe\x11\x73\x2f\x8d\xe4\x7f\xec\x17\x47\xf2\x73\x31\x68\x7f\x1c\x83\x46\x22\x8a\xa3\xcd\x86\x9f\x95\x33\x9f\x6b\xb6\x64\xf3\xf8\x0b\x85\x07\x76\xf8\x7b\xa5\x68\x3f\xfe\x6e\x84\x07\xc3\x9d\x64\x68\x89\xbf\xb0\x51\xf8\xb3\x32\x7d\x1b\xc4\xdf\xc7\x58\xeb\xd1\xd1\x3d\x61\x80\xe5\xf0\xc1\x32\x4e\x2d\x69\x22\xd0\x78\x2c\x4a\x20\x40\x9f\x40\xb9\x1e\x3c\xe0\x98\xe9\x15\x24\x47\x6c\x5b\x36\xd4\x8c\x41\xab\x60\xb3\x21\x18\x64\xc2\xaf\x01\x81\xd7\xc2\xdf\xe3\x2f\x11\x43\x82\xbe\x2f\xbd\x5b\xf4\xf6\x07\xa6\x7f\xbe\xe4\x1a\xe4\x0f\xbe\xfe\xb9\xc0\xb6\x36\x05\x84\x9b\xcc\xeb\x7e\x27\x01\xe6\x3e\xd8\x26\x82\x26\xc9\xb6\x21\xb3\x7b\xf9\x9c\x32\xb4\x9e\xed\x6e\xa9\x74\xce\xf7\x6e\x50\xb0\xb4\x6b\xc6\xae\x55\x36\xaa\x19\x39\xcc\xe4\x64\xad\x12\x7c\xe7\x28\x5b\x8f\xe0\xf4\x50\x6e\x0f\xe2\x4d\x1a\xe0\x16\x55\xf3\xaf\xf8\x4f\x19\x8f\xeb\x35\x07\x42\x3e\x9a\x3d\xdb\xbe\x64\x73\x5d\x25\x9b\xab\x2c\xbe\x1c\x69\xb3\xa5\x19\xc8\x6f\xc3\xe9\x5b\xe5\xc3\x5b\x94\x83\x5c\xb3\x2b\x4e\x1a\x75\x4c\x6e\x68\xd2\xdb\x05\x69\xfb\x95\x1b\xe1\x41\x0d\xbb\x1b\xcb\xc6\x2e\x4d\xf0\xd5\xf3\x9b\x1d\x6b\x08\x97\x6d\x20\x33\x4b\x97\xf4\xf4\xa0\xdc\xa3\x04\x6b\x21\x17\xd1\xef\x68\x1a\x72\x0e\xb6\x32\xe6\x35\xa1\x75\x41\x47\x97\x3d\x3a\x2d\xd0\x39\x4f\x3f\x6c\x35\x93\x6d\x65\xd6\x06\xf3\xcd\x66\x3b\x5b\x14\x63\x56\xfe\xa3\xe6\xb6\x31\xe6\x23\xbc\x80\xdc\x07\x98\x1b\xb9\x13\x94\xbb\x1a\xaa\x87\xa5\x19\x9f\x0b\x44\x28\x7c\xe0\x20\x16\xde\xb6\xad\x90\x86\x7d\x38\xae\xc1\xf2\x5f\x59\x79\xbf\x6d\x4d\xc2\xf6\x80\x7b\xe8\x06\x4b\x22\x05\x7a\x7b\x75\x6c\x79\xaa\x75\x75\x3c\x3e\xd6\x4a\xee\xba\x82\xb7\xf2\xb3\xab\xb6\xc4\xda\x53\x80\x3d\xa9\x03\xb0\x56\x7e\x6c\x37\x00\x7b\x62\x0b\xd8\x93\x16\x01\x76\xcd\x67\x0c\x53\x80\x3d\xad\x03\xb0\x56\x55\xb6\xbb\x01\xd8\x53\x5b\xc0\x9e\xb6\x08\xb0\x6b\xbe\x63\x37\x05\xd8\xf7\x75\x00\xd6\xaa\xc6\x75\x37\x00\xfb\xc1\x16\xb0\xef\x5b\x04\xd8\x02\x03\xb5\xe2\x93\xb0\x87\xe3\xb2\xe7\x5f\x9b\x48\x39\x94\xec\xdb\xd2\x82\x74\x54\xce\xe9\x59\x61\x39\xfb\xaa\x55\x7f\xb2\x57\xfd\x46\xaf\x82\x6f\x50\xf5\xa7\x7b\xd5\xd7\xa6\xfa\x2a\xf5\xdb\x1b\x54\xfd\xfb\xbd\xea\x6b\x53\xbd\xfd\x6d\xcc\xb5\xab\x7e\xea\x94\x4d\x8b\xa8\x86\xf0\xf4\xb2\xd7\xb5\xe1\x3b\x2d\x9c\x19\x7f\xbb\x7d\xe7\x1c\xf5\x87\xb6\x5a\x44\x49\xcd\x61\xf7\x5b\xfa\x73\x48\x95\xa2\x82\xa3\xb7\x97\xbd\xae\x65\xa0\x7b\xa9\x08\x8e\xa0\x45\xc1\xee\x9a\x17\x40\xa3\x2b\x0e\x82\x61\x89\x80\xf5\x7d\xb9\xa0\xd4\xa1\x4c\xa6\x12\x73\xd7\xf5\x20\x0a\xd7\x66\x72\x2b\xdf\xe2\xdc\xa3\x67\x1e\x3d\xc0\xbd\x15\x38\x59\xab\x62\x8b\x08\xc0\xb3\x2a\x8e\xf9\x2b\x56\x9a\x3e\xbc\x38\x9d\xe4\xc4\xaa\xf9\x67\xb0\x6b\xc6\x5d\x2f\xa2\x7c\xca\x75\x1b\x01\x37\x39\x72\x5b\x7c\xcd\xe3\x1b\x4a\x50\x32\xbc\xb8\xa4\xac\x5a\x60\x8c\x90\x4e\x80\x6b\xbb\x8b\xf3\xd5\x0d\xe5\x64\xdb\x0d\xfb\x18\x7f\x54\x17\x6b\x45\x39\xd7\x76\xc3\x8a\xda\xbe\x45\xc6\xcc\x00\xd8\x33\xab\x32\x04\xae\x9d\x4e\x02\xb8\x8b\xd7\x07\x56\x01\x5f\x1c\x82\xa4\xa4\x04\x86\x8a\xfe\xec\x54\xeb\x5b\x74\xec\x3d\x55\x0d\x71\xce\x54\x31\x84\xd5\x6a\x58\x85\x97\x33\x61\xfb\xfd\xf7\x66\xd7\x80\x56\xde\xcc\xd6\x82\xd7\x16\x55\x19\xe5\xf0\x5b\x7f\x95\x91\xd2\x58\xc7\x6a\x5f\x66\xb4\xa9\x3a\xf6\xe3\x3a\x0b\xd9\x03\x1c\x32\xda\xef\x25\x2a\x6d\xb4\xc9\xcd\x37\x63\xbf\x25\x2c\xac\xcd\x20\xb5\xa5\x50\x66\x42\xc9\x64\xd0\x6a\x05\x77\xbf\x35\xdf\xdb\x6c\x4e\xb9\xde\x33\x21\xad\x56\xef\xaf\xdf\xbb\x05\x09\xd8\xa6\x6c\x98\x37\xa7\x60\x45\xa2\x56\xeb\xb7\xd7\x2d\xf8\x53\xa8\x4d\xd9\xdd\xec\x5a\x4d\x7a\x4e\x0c\xb1\x38\x5a\x9c\xe6\x71\xe2\xc7\xf1\x0f\x67\x47\xc9\x9f\x18\x79\xc0\x04\x3a\x6f\xfe\x17\x00\x00\xff\xff\x1e\x26\x02\x0c\x43\xbc\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 48195, mode: os.FileMode(0664), modTime: time.Unix(1609094648, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x64, 0xdb, 0x13, 0x40, 0xe9, 0x91, 0x74, 0x8b, 0x54, 0xd7, 0xf8, 0x1a, 0x9e, 0xf2, 0x21, 0x2d, 0x0, 0x50, 0xab, 0x78, 0x79, 0x88, 0xd, 0xbb, 0xc, 0xaa, 0xf2, 0x7c, 0x68, 0xe3, 0xf0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
