// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (37.275kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xeb\x73\xdb\x36\x12\xff\x9e\xbf\x82\xc7\x9b\xe9\xf4\xa6\x63\x3b\x96\x93\xde\x4d\x6b\xb1\xe3\xa8\x71\x9a\x69\x9c\x5c\x2c\xb7\xc9\x37\x0d\x44\xae\x48\xc4\x20\xc0\x00\xa0\x65\xdd\x5f\x7f\xc3\x87\xac\x07\x1f\x22\xf8\x10\x49\x59\x5f\x3c\x63\x92\x0b\x02\xbb\xbf\x7d\x60\x77\x41\x5d\xfe\xf6\xe8\x12\xed\x01\xb8\xc0\x8c\x0e\xf5\xf3\xd3\x97\xba\x06\xd4\x64\x16\xa6\xf6\x50\xff\xeb\xee\xfa\xe4\x3f\xfa\x6f\xc6\x8b\xcb\x7f\x9c\x9c\x68\xef\x80\x02\x47\x12\x2c\x6d\x8e\xa5\xa3\xd9\x04\x59\xa0\x5d\x9c\x0e\x06\xa7\x03\xed\xe4\xc4\x78\x71\x89\xa9\x04\x3e\x43\x26\x18\x2f\x34\xed\x92\xc3\x77\x1f\x73\x10\x1a\xc1\xd3\xa1\x6e\xcb\xfb\x9f\xf4\xd5\x8b\x2e\x4e\x07\x2f\xf5\xb3\xf0\x39\x36\xfd\x06\xa6\xd4\x4c\x82\x84\x18\xea\xef\xe4\xfd\x17\x4c\x2d\x36\xd7\x35\x6c\x0d\x75\x13\x11\x82\xe9\x8c\xc5\xd7\x02\x02\x4d\xbb\xf4\x38\xf3\x80\xcb\x85\x46\x91\x0b\xc1\x43\x74\x32\x63\xa6\x2f\x74\xe3\x1a\x11\x01\x97\x67\xcb\x07\xe2\xe7\x4d\x07\x13\x4b\x93\x0b\x0f\x86\xba\xc4\x92\xc0\x14\xf1\x78\xac\x60\x34\x82\x4c\x70\x18\xb1\x80\x9f\xc5\x04\x67\x21\xc5\x3a\xf5\xd3\xd3\x89\xe9\xbe\xe3\xd8\x7a\x1a\x2c\x39\xb9\x07\x2c\xf0\x94\x80\x6e\xdc\x71\x3f\x31\xb3\x32\xab\x49\xce\x29\x7d\x5e\x1f\xd0\x14\xc8\x8a\x8b\x02\xdb\x34\xba\xb4\x4e\x56\x62\xbe\x65\xe7\x9c\x46\xe7\x20\x82\x6d\xaa\x1b\x42\x22\x2e\x8b\x12\xb9\x88\xdb\x98\x4e\x08\xcc\xa4\x6e\x0c\x14\xa9\x38\xb6\x1d\x15\x32\x07\x1e\x3d\x44\xad\x1d\xec\x40\x52\x72\x3c\xf5\x25\x88\xcd\x1b\xeb\xb7\xe2\x01\x85\x89\x08\xe8\xda\x03\x22\x3e\x0c\xf5\x57\xfa\xd9\xd6\x50\x67\xe9\x63\x5d\x9e\x45\x02\xde\xb8\xe6\x21\xf3\x1e\x53\x3b\x7f\x05\x01\x9f\x26\x48\x4a\x64\x3a\xba\xf1\xb2\xe8\xba\x25\xf3\xd4\x89\xe6\xd8\x92\x8e\x6e\xbc\x4a\x7f\xfe\xf2\x2c\x31\xdf\x0d\x45\xd3\xd4\x81\x6d\x3d\x9a\xe6\x11\xd4\x0d\x81\x7a\x5b\xb8\x1c\x79\x79\x14\x6d\x22\xf4\xbc\xb3\x08\x35\x19\x95\x98\x02\x95\x2d\xc3\xb4\x4d\xe9\x64\xe0\xb2\x01\x6e\x63\xe9\x77\xce\x1c\x90\x68\x7a\x92\x23\x2a\x08\x92\x68\x4a\x60\xa8\x2f\x40\xe8\xc6\xfb\xbb\xbf\x7e\xd1\x4e\x1a\x95\x57\x61\xc5\x68\x47\x5e\xe6\xf7\x1e\x89\x6b\xf4\xb9\x69\x69\x15\x36\xe0\xed\x48\x0b\x71\x4e\x7a\x24\xaf\xab\xdb\xdb\x0f\x4d\x4b\xec\xa2\x83\x12\x1b\x9b\x9c\x11\x02\xd6\xfa\x3e\x4a\xf8\x1e\x70\xd3\x01\xf3\x7e\xc4\xa8\x44\x98\x02\x6f\x58\x88\x2a\x64\xa5\xe2\x91\x87\x32\x44\xc2\x41\x16\x9b\x4f\x82\xad\xa0\x6e\x60\x9a\x49\x96\x60\x73\x3a\xab\xff\xc6\x30\xf7\x18\x97\xfa\xf6\xa3\x25\xf9\xb9\x83\xa7\xb9\x8a\x91\xca\xd8\x22\xa1\x68\xea\x6c\xcb\x12\x16\x12\x65\x69\x71\x66\xcb\x26\x5d\x3e\x6b\xc6\x6b\xa5\x01\x69\x26\xac\xb2\xd4\xaa\x4a\xae\x92\xf4\x2a\x49\xb0\x92\x14\x53\xdf\x5c\x85\xd8\x17\x30\x71\x11\xbf\xf7\x73\xf7\x1a\xd9\xf4\xbb\x76\x29\x4f\x74\x29\xf6\x7f\x79\x27\x5d\xf9\x53\x09\x52\x1e\x6e\x33\xd2\x2e\xec\x8e\xaa\xee\x83\x36\x17\xb9\x76\x73\xfd\x46\x52\x1f\xaf\xac\x6f\xbe\x90\x2e\x50\x19\x2b\xa5\x07\x60\xad\x5d\x4c\xcf\xef\x11\x36\x0f\xdc\xd5\xeb\x44\x5e\x6f\x1b\x3b\x9e\x17\x3c\xf7\x73\x82\x75\x29\xba\xe1\x83\x6e\x0c\x12\xcb\x4f\xb8\x0b\x09\xde\x04\x53\x93\x43\x34\xbd\x44\x38\xbd\x4d\xe0\x21\x1b\x36\x08\xb6\xe6\xb2\x83\x3d\x9e\x47\xb0\x89\x24\x66\x74\xdd\x79\xbb\x08\xd3\x6a\x09\x50\x15\xf5\x4e\xe0\x0b\x4b\x02\xa9\x01\xd6\x1f\x40\x08\xd3\x82\x80\x02\x44\xc2\xc4\x34\x9b\x74\x7d\xc3\x1e\x23\xde\x70\xc6\x64\xf0\xcf\x1a\x52\x55\x4d\x78\xa9\x04\xec\x16\x0d\xe3\x18\xa8\x0c\x25\xa7\x1b\x0f\xc0\x25\x36\x11\x29\x9b\xb9\xbd\x01\xea\xbf\x41\x7c\x25\xfc\xe0\x42\xab\x31\x77\xc1\x70\x28\x98\xe7\x7b\x09\x6e\x3c\x73\xa0\xfe\x35\x0e\xe6\xd4\xcd\xe0\x28\x7b\xe7\x30\x09\xa6\xad\x32\x54\xe0\xb5\x7c\x6a\x01\x27\x98\x16\x59\xc5\xba\x6e\x08\x7f\xea\x26\xe5\x9b\xc7\xe2\x65\x40\x33\xcd\xe1\x70\x25\x2e\x57\xe5\xb4\x96\x1b\xa6\x65\x2f\x2c\x89\x9d\x8f\x30\xcf\x58\x5c\xe5\x05\xd6\xb1\xc8\xb4\x31\x22\x58\x19\x1f\x61\x7e\x7a\x7a\x5a\x66\x00\x45\x30\xc5\x83\x64\xc6\x33\x5a\x76\x4c\x13\xdf\xac\x45\x52\x9f\x3c\xa0\x3d\x15\x55\x30\xf5\x67\x25\xab\x31\x7a\x80\x2b\xd1\x53\x69\x05\x93\xd7\x90\x38\x50\x81\x8d\xc1\x43\x1c\x49\xc6\x37\x25\x27\x96\x97\x03\xf1\x9d\x77\x5b\x72\xad\xc3\xfb\xed\xa3\xc7\xb8\x1c\xa1\x29\xc7\x84\xb0\x6e\x33\x4b\x25\x2c\x89\xd6\xa5\x2d\x17\x76\xa0\x1a\x90\x27\xd3\xab\xdf\xdf\x5f\x1f\x9c\x3c\x83\x45\x1d\xa8\x2c\x8b\x58\xb3\x41\xb7\x05\xda\x3a\xf2\x3f\xfb\x38\x2d\xbf\xdc\x21\x16\xa9\x60\x3e\x58\x4d\xf7\x91\xde\x5c\x76\xb0\xca\x66\x7a\x23\x07\x94\xc7\xac\xae\x6d\xa7\xa3\x89\xf7\x64\x43\x9d\xc9\xe5\x4a\x9c\xae\xca\x6d\xad\x16\x7b\x12\xad\x6d\x14\x37\x55\x1e\x8e\x55\x59\xae\x68\x6f\x96\x45\xd3\x2e\x91\x69\x02\x81\xd0\x8d\x69\xf7\xb0\x18\xea\x58\xd7\x04\xb6\x29\x22\x43\x1d\x99\x12\x3f\x20\x09\xba\xe6\x32\x0b\xcf\x30\xf0\x40\x22\xbf\xff\x39\x19\x7d\xfa\x78\x77\xfb\xe9\xc3\xe4\xe6\x6a\xfc\xe7\x76\xeb\xdf\xda\xd8\x87\x65\xb7\xfe\x00\xe2\xf5\xd0\x6a\x05\xd3\xee\x89\xcd\xca\xe0\x70\x25\x2e\x57\xe5\xb4\x56\x8b\xc5\x0a\x56\x76\x35\x65\x7e\x4f\x43\x20\x23\x9c\xfb\x73\x0e\x78\xca\x97\x43\x97\x45\x2a\xa5\x76\xa0\x19\x26\x44\xad\x08\xe2\x31\x81\xa3\xba\x4d\x46\xc9\xb5\xc9\xbe\x1c\xc2\xec\xbf\x31\xcc\x8b\x36\xe5\x84\x65\xdb\x09\x87\xef\x3e\x08\xa9\x1b\xaf\x5f\x27\x6a\xa2\x59\x94\xfb\x6c\xe7\xa9\xb9\xc9\xe6\x8e\x03\x04\x4c\xda\xe0\x58\x01\x7f\xe2\x00\xb6\x1d\xb9\xe2\xd6\xf9\xcb\xcc\x9a\x7a\x69\x8e\xed\xe0\x9a\x7a\xc3\x4e\xf3\xed\x33\xdb\x6f\x14\x21\x2c\x27\x1e\x23\xd8\x5c\xe8\x06\x45\xd2\xe7\xe9\xb5\xcb\xcc\x77\x57\x1f\xc2\x01\x64\x01\x17\x13\x93\x60\xf3\x1e\x85\x6c\x57\xe6\x1d\xd0\x80\x70\x22\x00\x71\xd3\x29\x41\x2f\x1c\x36\x9f\x44\x6c\x04\x5e\x46\x78\xf1\x04\x6c\x8e\xad\x49\x60\xb5\x45\x7e\x29\x78\xc7\x30\x92\x03\x2c\x87\x29\x18\x4b\x84\x07\xb0\x28\x22\x27\xe1\xbf\x43\x5d\x00\x01\x33\xb2\x6d\x85\xe2\x8a\x40\xd3\xc6\x4f\x34\x4b\x75\x5b\x5d\x49\x09\x58\xdb\x77\x0f\x2a\x96\xa9\x8a\x77\xc8\x68\xa5\xae\xcd\x3b\x48\x24\x7d\x31\x5d\x96\xfd\xc5\xd3\xbf\xcd\xda\x75\x25\xe7\xba\x71\x48\x65\xbb\xb5\x65\x27\x59\x7c\x4a\x45\x99\x2e\xec\x60\x2b\x41\x07\x01\x3a\x94\xa9\x24\xf3\x74\xe3\x67\x45\xa2\x29\x93\x92\xb9\x0a\x74\x85\xfb\x45\xd2\x88\x85\x87\x4c\x4c\xed\x9c\x46\xe2\xae\x87\x5c\xc8\xbc\x8f\xc3\x03\xa0\x96\xba\x2a\x36\xdc\x40\x1d\x9e\xe8\x0c\xb5\x10\xa8\xe4\x8b\xad\x03\x9e\x69\x53\x6b\x4f\x0b\x33\x3a\xf8\x76\x29\xa1\x2a\x59\xa8\x15\x85\x83\xcd\x2d\xad\x28\x4c\xc7\xd9\x7c\xf2\x04\xee\xc2\x54\x26\x23\xbe\x4b\x8b\x10\x16\x0c\x38\xd7\xba\x86\xc3\x5d\x5c\x5a\x85\xa2\x13\xd1\x62\x76\xf2\xe2\xce\x01\xcc\x7f\x51\x19\x2b\xda\x5a\x98\x0e\x0a\x42\x9f\x4c\x3b\x96\x46\xf9\x18\x77\x1a\xe7\x44\xd7\x59\xdb\xcb\x74\xab\x94\xba\xd4\x42\xbd\xb1\x69\x94\x85\xce\x09\xa6\x1a\x0f\xad\x6a\x2a\xec\x6d\x60\x3e\x36\x8f\x60\x47\x97\x76\xcf\x3a\xf8\xab\x1b\x1b\x54\xfb\xde\xbc\xa8\x92\x4a\xc6\x88\xc4\xde\x44\xc2\xa3\xcc\x06\xa5\x36\x8a\xd7\xa4\x32\xf4\x5a\xb7\x68\xf6\xf0\xc1\xc0\x7b\x83\x60\x0e\x92\x4a\x43\x30\x43\x29\x73\xce\x85\x35\x0e\x5b\x19\x88\xec\x16\x3c\xc6\xa5\x1a\x72\xb7\x09\x0f\x04\xbc\xd1\x8a\x54\x06\x76\xd1\xe3\x84\x00\xb5\x65\x5e\x7b\x7e\xa6\xec\x97\x06\x59\x89\x32\x78\x65\x79\xea\x42\xba\x76\x3b\xbe\x53\x19\x13\x53\xcf\x97\x13\xcf\xe7\x1e\x13\xa0\x1b\x16\xb6\xb1\x14\x7b\xd3\x55\xa5\xe5\x77\xc3\x5d\x84\xea\xf3\xd1\x77\xa7\xc0\x4b\xe8\xdd\x1a\xe1\x81\xe8\x5d\xb4\xa2\xd2\xea\x93\x19\x12\xa6\x51\x16\x52\x80\x7f\xf6\x07\xfe\x99\xb1\x7e\xba\x3c\xba\x00\x7f\x77\x51\xc6\xe7\x6c\x50\xf5\x1e\xf8\x37\x8b\xd8\xdb\x68\x3f\x8e\x24\x27\x27\xfc\x5f\x47\xb7\xd3\xac\xdb\x49\x2b\xea\xf3\x55\x51\xdf\xe6\x68\x7a\x12\x49\x5b\xad\xac\xdf\x15\x77\x96\xbb\x41\x6b\x58\x9f\xcb\xf8\xb2\x0d\xaa\xbd\xe8\xb3\x00\x2a\xb0\xc4\x0f\x65\xca\x0f\x55\x36\xf2\x45\x8c\xc1\xd1\x05\xb6\xe0\x02\xf7\xac\x32\xdb\x99\xa7\xb4\x4e\xff\x8e\x67\x9e\x6e\x16\x4a\x69\x27\x20\x04\x7b\x02\xff\x0f\x4a\x7c\x6b\xe0\x59\xa4\xac\xda\x43\xa0\x0b\x42\x20\x1b\xb2\x3e\x97\xd0\x75\x1c\x46\xb3\x3f\x50\x54\xe4\x64\x84\x32\xb3\x48\xff\xde\x2f\x92\x46\xcc\x9d\xb2\x37\xec\xf1\x2e\xf4\x1f\x01\xa0\xa6\x88\x5a\xe1\xd5\xae\xa2\x69\xa7\x1b\x7e\x83\xa8\x15\x85\xe3\x3f\x4d\xf3\xc3\xf1\x44\x20\x39\x5d\x05\x92\x1e\xf3\x7c\xaf\xdd\x18\xb2\x74\xfa\x72\xcf\xe6\x28\x09\x22\x97\x59\xd0\x6f\x10\xdd\x30\x0b\xe2\x3d\x9d\xab\x08\x22\xb7\x53\x20\x52\x32\x42\x2d\x82\xe8\x8d\x2f\xe5\xb2\x9f\x85\x83\x00\x19\x5f\xa8\xe2\x5e\x6e\x83\x71\x3a\xdf\x4e\xc6\xc1\x04\xfc\x00\x62\x62\xc1\x0c\xf9\x44\x36\x90\xa6\x08\x19\xa1\xfd\xf8\x03\x91\xbf\xbe\x1d\x8f\x7e\xb0\xe5\xaf\x39\x98\xae\x19\x80\x4a\x31\x5f\x47\x00\x48\x98\x5d\x03\xfc\x3e\x30\xfb\x08\xbe\x90\x0d\x9a\x74\x40\xfb\x3c\xfe\x14\x43\x90\x4a\xe0\x3d\x01\x61\x9b\xe9\xd5\xaf\xa6\x83\xa8\x0d\xaa\xf9\x98\x75\xb2\x43\x48\xb0\xbe\x7d\x8c\x16\xb4\x9f\x5d\x67\xa1\xac\xca\xd7\x91\x93\xa3\xda\x35\x63\x57\x29\x29\xd4\x8d\x54\x62\x58\xe0\x2a\x05\xdf\x04\x65\xef\x11\x1c\xd5\xc6\x8e\x20\x6e\xd3\x00\x77\xbf\xd9\xf2\xa9\x6d\x32\xa3\x70\x50\x7f\xdb\xe4\x9c\xf1\xfb\x60\x9f\xd6\x7a\xe7\xa4\x7a\xd2\x6b\x39\xf5\x9e\x66\xbd\xbe\xc4\xd3\xcf\xc9\xc1\x76\x25\x85\xb5\x67\x17\x72\x8b\x2c\xcc\xd6\x03\xf1\xe8\x9c\xc8\x7f\x99\x4f\x4d\x08\xb6\xe4\x35\x44\xe5\xe3\x70\xc8\x1f\x90\xeb\xfd\x1a\x8d\xdb\x75\x0f\x93\x0c\xd1\x95\xb1\x18\x1e\x75\x2e\x31\x6b\x8b\xa3\xf9\x04\x53\x0b\x9b\x48\x32\xbe\x8b\xfe\x99\xa6\xbf\x12\xa0\xe5\x3e\xad\x09\xab\xb7\xbe\x52\x07\xe6\x11\x9d\x4a\xf4\x36\x67\xbe\xa7\x1b\xe9\x36\x66\x6f\x30\x6f\x37\x41\xd7\xa3\xc8\xa8\xe1\xdf\x83\x59\x45\x46\xf7\xb0\x00\xde\x7a\x58\xb4\x45\xf7\x4c\x0e\x94\x14\xfe\x75\x8d\xed\x03\x25\x85\x09\x83\xd7\x39\xcc\x65\x36\x50\x60\x3b\x4f\x4d\x97\x48\x1e\xce\xce\x6b\xb0\xfc\xd7\x4a\xde\xef\x50\x53\x87\x63\xa0\x96\x76\x83\xb8\xc9\x99\xf6\xe3\xf5\xb9\x62\x21\xe6\xfa\x7c\x55\x89\x09\xcf\x2c\x83\xd5\x78\xb9\xa5\x2f\x91\xf6\x06\x60\x07\x75\x00\x56\xc9\x8f\x3d\x0f\xc0\x0e\x54\x01\x3b\xe8\x11\x60\xf7\x9c\x19\xdf\x00\xec\x45\x1d\x80\x55\x6a\xd1\x7c\x1e\x80\xbd\x50\x05\xec\x45\x8f\x00\xbb\xe7\x03\x5a\x1b\x80\x7d\x55\x07\x60\x95\x1a\x24\x9f\x07\x60\x5f\xab\x02\xf6\x55\x8f\x00\x9b\x63\xa0\x1a\xae\xdf\xcc\xce\x8b\x56\x6d\xda\x48\x39\x14\xfc\xfe\x4e\x0f\xd2\x51\x19\x35\x9f\xdc\x5e\xe8\xa6\x45\x3f\x38\x8a\xbe\xd5\x73\xc4\x2d\x8a\xfe\xe2\x28\xfa\xda\x44\x5f\xa6\xf9\xb7\x45\xd1\xbf\x3a\x8a\xbe\x36\xd1\xab\x1f\xe5\xdb\xbb\xe8\x37\x6a\x6c\x92\x79\x75\x84\xa7\x4a\x25\xfe\xa8\xdb\x63\xf5\xea\xfe\x95\x39\xea\x8f\x6c\x25\xf3\xc2\x46\xb9\xd1\x97\xe8\xb6\x8b\x85\xc0\x8c\x96\x09\x73\x5f\xf7\x28\xcc\xdd\x33\xf4\x3b\xdd\x34\x50\xfa\xb7\x60\x9d\x42\xe5\x98\x54\x21\x66\x6a\xf4\xdc\x73\xf7\x66\x6c\x4b\x1f\xfe\x3b\xa2\x27\x89\x9e\x9c\xef\xb5\xa5\x92\x95\xfd\x2c\x69\x4e\x93\x85\x07\x60\x29\x9d\x31\xfc\xe6\x0b\x89\x67\x0b\xdd\x08\x6b\x55\xdd\xaf\xbe\xee\x19\x77\x63\x0f\xd3\x0d\xa7\x1d\x30\xb8\xcb\x31\xdb\x4e\x77\x37\xfa\xa2\x85\x28\x89\x4f\xd9\x08\xa5\x2f\x27\x2c\x91\x6e\x02\x95\x6a\xe7\xad\xcb\x1b\xca\xf5\xaf\x35\xa8\x47\xf7\xcb\x3e\x4e\x25\xca\xc4\xd7\x1a\x94\xa8\xd5\xbf\xac\xb0\x35\x00\x5a\xfb\xd1\xdf\xad\x5f\x01\x56\x8a\xf5\x7c\x17\x38\x36\x0b\x60\x28\x11\xc8\x88\x03\xfa\xb2\xc3\xd1\x53\xd5\x10\xe7\x6c\xb4\x41\x28\x69\x43\x13\x5e\x2e\x88\xd8\xef\xbe\x76\x7f\x47\x5a\x0b\xf4\x7a\xd4\x2a\x94\xb1\x15\xad\xe5\x27\xd3\x2f\xcf\xc2\x2f\x78\xcf\x90\x09\xc6\x8b\xff\x07\x00\x00\xff\xff\x3f\x70\xcb\x09\x9b\x91\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 37275, mode: os.FileMode(0664), modTime: time.Unix(1599916078, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x47, 0x76, 0x54, 0x18, 0x77, 0xd7, 0x6c, 0x30, 0x2, 0x27, 0x27, 0x45, 0x5c, 0xb3, 0xb7, 0x62, 0xc4, 0x30, 0xa3, 0xc9, 0x8a, 0x15, 0xf, 0xef, 0xbd, 0x98, 0xf, 0xe1, 0x67, 0x8c, 0xbe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
