// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (84.27kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x6b\x73\xdb\x38\xb2\xf6\xf7\xf9\x15\x78\xf9\x56\xcd\xe6\xd4\x8e\x93\xd8\xc9\xec\xd9\xb3\x63\x6b\xcb\x51\xec\x24\x35\xbe\xc5\xf2\x24\xf9\xc6\x82\xc8\x96\x84\x31\x08\x70\x00\xd0\x92\xb6\xce\x8f\x3f\xc5\x8b\xac\x1b\x6f\xa0\x28\x5e\x64\x7e\x98\xa9\x58\x52\x83\x00\xfa\x79\xba\x1b\xcd\x06\x70\xfa\xef\x99\x43\xd1\x13\x08\x49\x38\x3b\x33\x8e\x5f\xbf\x35\x10\x30\x8b\xdb\x84\x8d\xcf\x8c\x3f\x1e\x2e\x8f\xfe\x69\xfc\xbb\xf7\xd3\xe9\xff\x3b\x3a\x42\x9f\x80\x81\xc0\x0a\x6c\x34\x25\x6a\x82\xc6\x14\xdb\x80\xde\xbd\x3e\x39\x79\x7d\x82\x8e\x8e\x7a\x3f\x9d\x12\xa6\x40\x8c\xb0\x05\xbd\x9f\x10\x3a\x15\xf0\x97\x47\x04\x48\x44\xc9\xf0\xcc\x18\xab\xc7\xbf\x1b\xcb\x07\xbd\x7b\x7d\xf2\xd6\x78\x13\xfc\x8e\x0f\xff\x04\x4b\x21\x8b\x62\x29\xcf\x8c\x4f\xea\xf1\x3b\x61\x36\x9f\x1a\x88\xd8\x67\x86\x85\x29\x25\x6c\xc4\xa3\xcf\x7c\x01\x84\x4e\x5d\xc1\x5d\x10\x6a\x8e\x18\x76\xc0\xff\x11\x33\x47\xdc\xf2\xa4\xd1\xbb\xc4\x54\xc2\xe9\x9b\xc5\x0f\xe2\x7f\x8f\x2d\x0b\x5c\x95\x2e\x62\x4d\x08\xb5\x91\x9a\xbb\x70\x66\x28\xa2\x28\x0c\xb1\x88\x1e\xef\x37\x48\xb1\x05\x13\x4e\x6d\x10\x6f\x22\x81\x37\x81\xc4\xaa\xf4\xf3\xaf\xb7\x46\xf8\x49\x10\xfb\xb9\xb1\xed\xfe\x3d\x11\x49\x86\x14\x8c\xde\x83\xf0\xb6\x7a\x56\x64\x02\xb6\xfb\x14\xdf\xaf\x2b\x3c\x04\xba\x9c\x78\x49\xc6\x2c\xfc\x68\x55\xac\x40\x7f\x8b\xf6\x39\x4e\x6e\x82\x29\x19\x33\xa3\x27\x15\x16\x2a\xaf\x90\x83\xc5\x98\x30\x93\xc2\x48\x19\xbd\x13\x4d\x29\x41\xc6\x13\x1d\xb1\x09\xcc\x5c\xcc\x6c\xbd\xe9\xf0\x24\x98\x0e\x16\x8f\x9e\xab\x27\x37\x15\x38\x4b\x02\x2b\x25\xc8\xd0\x53\x20\xd7\xbf\x58\xfd\x2a\x6a\x4d\x5a\x98\x82\x81\x9e\x30\xf5\xe0\xcc\x78\x6f\xbc\xd9\x68\xea\x4d\x7c\x5b\xa7\x6f\x42\x28\xad\x7d\xe6\x62\xeb\x91\xb0\x71\x7a\xf7\x7d\x8d\x98\x58\x29\x6c\x4d\x8c\xde\xdb\xbc\x83\x56\xdc\xcd\x12\x3a\x7d\xb3\xf5\xfc\x35\x8a\x22\x7d\x4a\xd8\x33\xcb\xea\xe8\xd0\x6e\x3a\xd4\x89\xd4\xe3\xca\x90\x1a\xf0\xb7\x83\x6a\x07\xd5\xa2\x50\x4d\x98\xb1\xb2\xa0\x3a\xb0\x04\xa7\x14\xec\xd5\x48\x4f\x7a\x2e\x08\x6b\x02\xd6\x63\x9f\x33\x85\x09\x03\xb1\x67\xf0\xea\x88\x15\x42\xc6\x53\x11\x21\x39\xc1\x36\x9f\x9a\x7e\xe4\x69\xf4\x08\x4b\x14\xdb\x9a\xe6\xf8\xa9\xfe\x46\x60\xea\x72\xa1\x8c\xcd\x9f\x16\x9c\xcf\x8c\x39\x4d\x35\x08\xb1\x13\x9b\xc7\x28\xc4\xf6\xb6\xa8\x60\x2e\x55\x16\x56\x67\xb2\x6e\xe2\xf5\xb3\x62\xb5\x97\x0c\x88\x33\xdd\x3b\x6b\x6d\x57\xcd\xed\xa4\xbd\x9d\x34\xb8\x93\x16\x63\x9f\xbc\x8b\x70\x5e\x7b\x9f\x24\x9f\x1d\xb1\x47\x72\x31\xf6\x7f\xf1\x4d\x3c\xf9\x63\x05\x62\x7e\x5c\xa7\x67\x79\x57\xd4\xb3\xac\x77\x7a\xe5\xcb\xd5\x2f\xd2\x93\x09\x02\x2b\x38\xac\x44\x42\x9c\x23\xf5\x47\xf9\x80\x87\x14\xe2\xfc\x68\x99\xa9\x86\xbc\x22\x99\x54\xd5\xa6\x67\x01\x9f\x99\x27\x2c\x49\xf0\x95\xd5\x06\xcd\x39\xfd\xfa\x8a\xdf\x78\x56\x78\x92\xdb\xe8\x1c\xfd\xbe\x1c\xfd\x0e\xae\x61\x0b\xc3\x40\xc1\x52\xb8\x90\x5e\x94\xc0\xd6\xa3\xe9\xab\x55\x81\x6d\x52\xc2\x1e\xb3\x35\xb4\x83\xb7\x28\xdf\x32\x4b\x8b\x8b\x17\x60\x9a\x55\x67\x96\x5f\x8e\x59\x56\x9d\x49\xee\x4c\x72\xbb\x4c\xf2\x47\x82\x29\x1f\x47\x26\x19\x94\x22\x6c\x2c\xa3\xcf\xca\xb1\xca\xbe\x29\x30\x27\x84\x29\xa3\x67\x07\xed\xee\xc3\x26\xa3\xe0\x3d\x24\xc3\xf4\x28\xf8\xf3\xcc\x78\x1a\xf2\x99\x91\x6c\xa9\x3f\xf0\x59\x38\xe4\x21\x9f\x1d\xa7\x18\xe5\x5c\x6f\xd9\x92\x00\x9f\x5b\x82\x0b\x02\x4c\x61\x45\x38\x33\x7a\x4f\x20\x14\xb1\x30\xcd\x65\x6d\x5d\x6c\x11\x36\x36\x7a\xff\x93\x6c\x68\xb7\xa6\x06\x5b\xfe\x83\x4c\x2c\x00\x1b\xe9\x56\xf8\x83\xa7\x14\x67\x1f\x56\x66\xb2\xf8\x2c\xc5\xc9\x51\x3c\xe7\x9e\x32\xa5\x9a\xfb\x74\x03\x66\xef\x6a\x8a\xc3\x0e\x87\x9a\xe5\x2e\xb0\x8f\x30\xc2\x1e\x55\x32\xfa\x3c\x9b\xc2\x34\xb4\xe5\x4a\x60\x26\x29\x0e\xec\xc0\x99\x31\x07\x69\xf4\x6e\x5d\x60\xc8\x5c\x34\xa8\x65\xc7\x4a\xb0\xf3\xba\xa2\x02\x2c\x20\x4f\x20\x4d\x3b\xec\x70\x31\x23\xea\x31\x1b\x04\x25\x2c\xb3\xef\x49\x79\x8b\xf8\x0c\x43\xdc\xe3\x8a\xda\xfa\x11\xa1\x54\x5f\xca\xe5\x92\x84\x6c\x4b\x78\x41\x83\xe2\xf3\x13\x28\x29\x13\x53\x04\xa0\x02\x24\x28\x4d\x64\xf6\xcc\x7b\x5f\xaa\x83\xdf\x86\xa6\xda\x0a\xbf\xc4\xd7\x54\xfb\x87\x9f\x45\xb9\x04\x6d\xf8\xf5\x7d\xa9\x0e\x7e\x1b\x9a\x6a\x2b\xfc\x12\x32\xb3\x48\x0b\x7e\xc5\x53\xcb\x99\x81\x52\xf2\x98\xb5\x44\x96\x03\xae\xae\x72\x64\x11\x4b\x5f\x83\x94\x78\x7c\x20\x6f\xe6\xb3\x43\xdb\x38\xa9\x7c\xeb\xb1\x5a\x60\xa4\x33\xd3\x95\xa1\x28\x28\x15\x0c\x41\x14\x2e\x0a\x36\x6a\x07\x6b\xc7\x8e\xe0\x53\xf3\x79\xe9\x91\xbb\xd2\xc2\xe2\xd4\x73\xd8\x52\xf0\xd7\x72\x12\x2f\x87\x96\x68\x49\x5e\x82\x0c\x42\x34\xa4\x36\x96\x5c\xf8\xb7\xfe\xf5\xe2\xc5\x24\x04\xe5\x32\x8b\xea\xbf\x21\xa7\xf6\x66\x01\x60\x20\x97\x50\x04\x88\x4a\xf1\x7e\xf9\xde\x30\xc6\x49\xe6\x28\x0a\x8c\x17\x9c\x12\x5b\x25\xd7\xbc\xa0\x3d\x85\x5f\x87\x09\xd8\xb5\x72\xad\x63\x2d\x35\x24\x63\xbd\x1f\xd5\x22\xeb\xb4\x36\x8b\x46\x90\xd2\x85\xa6\x80\xb5\xe2\x65\x67\x07\x3c\x9d\x3c\x8f\xc0\x8a\x8b\x03\x05\x5e\x67\xf1\x9a\x0a\xbc\x2b\x6e\x1d\x30\xee\x4a\x59\x69\xe6\xc7\xdd\x05\x53\x62\xbe\x16\x43\x2f\x1c\x4a\xf8\x4d\x76\xe7\xfd\xff\x07\xd0\x58\x15\x6e\x7a\xe2\x43\x71\x4e\x15\x71\x4d\x05\x33\x15\x0b\xb2\x87\x09\xa0\x68\x4c\x7f\x93\xc8\x2a\x30\xac\x95\xd7\x31\xc9\x8f\x29\x32\x5f\x84\xb9\x9e\x0a\x5e\x14\x49\xa3\xf7\xe9\xe1\x77\xf3\xcb\xcd\xdd\x1f\x0f\xe6\xe7\x2f\x37\x0f\xe6\x1f\x77\x77\x17\xf7\xfd\xf3\xc1\x85\xd9\xff\x7c\x7e\x3f\x40\xff\x8b\x36\x7e\x70\x73\x7b\x73\x51\x19\x09\x52\x9c\x77\xa3\xbc\xfe\x36\x09\x16\xce\xad\x10\x09\x8a\x78\xc6\xc6\x92\x80\x47\x83\xd9\x27\x0b\x16\x13\x86\x3a\x3a\x34\x21\x16\xd9\xa6\x43\xe4\x72\x0b\xb1\xa1\x80\xbb\x6e\x2c\x19\x96\x1e\xc1\xc1\xc4\x06\x36\x01\x6c\x23\xaa\x3f\xc0\x5c\xac\xc8\x9c\xb8\xa6\xc0\xb3\xe2\x90\xe5\x30\x43\xe5\x94\x15\x3e\x67\x0a\x64\x7a\x63\x2f\x37\x9b\xf5\xbe\xcb\x66\x1d\xd0\xda\xee\x06\x3b\x5a\xbd\x6f\xd1\xc2\x2e\x31\x8b\xbf\x77\x27\x6e\x85\x06\xc4\x9f\x5b\x3d\x0f\xbe\x22\x78\x10\xee\x3b\x1a\xcf\xdf\x64\x20\xa4\x57\xed\x68\x71\x66\x63\x31\x37\x89\xc5\x99\xb9\xe7\xa7\xe5\x5b\x3a\x66\xb9\x85\xa6\x84\x07\x15\x03\xbf\x3f\x01\x6b\xbd\x7e\x23\x9c\xa8\x0b\xa6\x40\x3c\x4c\x80\x88\x1b\xcf\x19\x82\x28\xa1\xd4\x2d\x68\x12\x05\x6d\xa2\xb0\x51\x9d\x39\x5a\xe3\xd8\x66\xef\x9a\xce\xb7\xed\xca\x11\x6d\xcf\x93\x49\xa2\x40\x93\x48\x4d\x88\x44\x64\x84\xe6\xdc\x43\x53\x42\x29\x8a\x1e\x8d\x30\x92\x20\x08\xa6\x88\x05\x33\x86\x46\x82\x3b\x48\x05\x4b\xd6\xe0\x0d\xf4\x73\xb8\x5e\x89\x3b\xb4\x05\x9e\x9a\x84\xd9\x24\x08\xda\xf7\x5f\x09\x53\x0e\x37\xff\xd1\x34\x6e\xfe\xb0\x26\x98\x8d\x75\xcb\xad\xb2\xc8\x19\xb5\x5a\x02\x3b\x0b\xb4\xf4\x52\xe9\xc9\x10\xcc\xc2\xd9\xea\xa8\x59\x80\x9a\xff\xdd\x0c\x6a\xde\x87\x27\x95\x95\x4c\xce\x35\x5a\x22\x22\x51\xf4\x98\xc4\xc2\xf6\xb8\xe6\xd7\x28\x1a\xd3\xcf\x8e\xa4\x9b\x24\xf5\x29\x98\x4d\x4a\x5f\x1f\x0e\x66\xb6\xcf\x96\x79\xc7\xd0\x44\x86\xfe\xb3\x19\x0c\x3d\xa7\x94\x4f\xaf\x3d\xaa\xc8\x07\xcc\xec\x12\xc8\x19\xb4\xe5\x52\x40\x7e\x7b\x12\x05\xed\xef\xc0\xcc\xf5\xfe\x75\xa4\x8c\xf3\x9c\x0e\x9e\xa3\x29\x17\x8f\x01\x1f\x25\x76\x96\x5c\xe4\x0c\x39\x0b\x7d\x0c\x7d\x7d\x74\x84\x4c\x24\x64\xec\xe6\xae\x45\x17\xeb\x20\xe4\x35\xb7\xcb\xf0\x96\xcf\x84\xf4\xdb\x2b\x93\x90\x7e\x7b\x1d\x21\xf5\x08\x49\x56\x08\xe9\xf8\xfa\xe8\x08\x99\x48\xc8\xb4\xb4\x70\x97\x69\xcf\x2b\x98\x6c\x18\xee\x38\x61\x4a\xa2\x11\x17\x68\xe0\x63\xb4\xcf\x3d\xa6\xf4\x62\xb6\x16\x65\xd0\x8f\xbb\x62\xd0\x8a\xd1\xc4\x14\x61\xc0\xb4\x9a\x6f\x13\x9e\xba\xf7\x80\x95\xe1\xc9\x05\x8b\x8c\x88\x15\x59\x28\xa2\xe7\x35\xdb\x84\xa9\xae\x18\x62\xaf\x98\xda\x06\x12\xba\x13\x30\x22\xb3\xc3\x45\x54\x4a\x85\x43\x87\xa8\x52\xad\xd4\xad\x9a\x80\x08\xdc\x1e\xb6\xf4\x8e\xae\x68\x13\x9e\x2a\x7e\x1f\x7b\x98\x78\x2a\x7c\xca\x53\xe6\x2a\x9f\x80\x38\x58\xe8\x55\xfc\xba\x71\xbb\x06\xc6\x8f\x6b\xa3\x45\x52\xc8\xfb\x42\x05\x31\x5b\xad\x34\x3d\x87\x92\xab\x5e\xc5\x5d\x1a\x42\x2b\x32\x81\xe1\x65\x36\x51\xe6\x43\x2e\xdf\x18\x04\x09\x91\x8f\x3f\xfa\x7d\x04\x4c\x11\xa5\xb5\xe0\x0c\xeb\xb5\x5d\x4f\xb8\x5c\x82\xd1\xb3\xc9\x98\xa4\x4d\x60\x63\x52\x19\xf5\xed\x49\x58\x43\x5d\xb4\x24\xdb\x19\xbd\x6b\xed\xbc\x48\xfc\x5a\x45\x96\xb7\x6d\x45\x6f\x7d\x5b\x08\x16\xa8\x8b\x02\xf7\x12\xac\x6f\x5c\x4b\x2f\x09\xc1\x72\xb1\x06\xb2\x9e\xd7\x40\xaf\x24\x00\x62\x30\x53\x88\xbb\xfe\x2f\xff\xeb\x25\x60\xba\xbe\xad\x92\x09\x48\x8c\x16\xa2\xa5\xa0\xba\xc0\xa2\xb6\x91\xb8\x3e\x47\x16\x77\x1c\x7c\x24\xc1\xc5\xe1\x05\x79\x94\x48\x85\xf8\x08\xb9\x82\x38\x58\xcc\xc3\x38\xc2\x2d\x30\xde\x5c\x65\xb2\x1f\xaf\x7e\xb9\xfc\xe5\x93\x3e\x1d\x0e\x7a\x43\x59\xd5\x39\x85\x6d\xea\x04\x4b\xed\x1d\x9c\xc0\x8a\x7c\xeb\x29\x92\xcf\xf4\xab\x09\x56\xc8\xe6\x88\x71\x85\x1c\xac\xac\x09\xc2\x6c\xee\xf3\x28\x28\xe1\x09\x32\x17\x16\x56\x30\xe6\x91\x43\x08\x43\x9c\xc0\x98\xfc\xb2\x11\xf0\xfc\xb2\xe9\x42\xe6\x2f\xc2\x5f\x54\x9c\xf8\xd8\x3e\x0e\x36\xae\x87\xb5\xa4\x3d\x72\x9f\xa3\x9b\x3e\xe6\xf8\x71\x27\x95\x45\x04\xf9\x0d\xdf\xd8\x27\x56\x44\xc4\x75\x35\x39\x5f\x12\xf8\x8d\x8b\xcc\xf5\x67\x5c\xa3\x6b\xa6\xe4\xb9\x5f\xba\xad\x94\x75\xbb\x50\x11\xf1\x02\x55\x11\x71\xcd\x14\xa8\x1f\x5c\x59\xf6\x23\x22\x11\x5e\x54\x43\x90\xf4\x4d\x0b\x71\x4f\xdf\xe9\x86\x24\xbd\x8a\x08\x94\x62\x88\x50\xaa\x31\x8a\x7b\x76\xae\x83\xf4\x92\x84\xf3\x9d\x45\x19\x27\x99\x79\xb0\xde\x72\xa4\xc9\xb6\x35\xfe\x7e\xa4\x12\x29\xfe\xfd\xee\x47\x49\x0c\xff\x7e\xf7\x23\x7a\xbb\xb3\x3b\xc1\xbf\xdf\xfd\xe8\xf8\x9d\x87\xdf\x61\x24\x8e\xb0\x65\x71\x61\x13\x36\x46\x8a\x07\x9f\xf7\xbf\x22\x5f\x1f\xc2\xa3\x20\x3b\xe2\xd7\x45\xfc\xd4\xe8\xa7\x66\xe2\x67\x6d\x0f\x88\x1b\x59\xce\x2d\x02\xbb\xf3\xbf\x60\x43\x2f\xd3\x06\xe4\xdb\x23\xd0\x59\x80\x3a\x2c\x40\x4a\x26\x17\x15\xb2\x00\x8d\x59\x9f\x35\x64\x33\x62\x90\x81\xbb\x03\x51\xd2\x6e\x8a\xa0\x39\x14\xd8\x20\x89\x5c\x10\x48\x77\x17\xc4\x9a\x2d\x5b\xed\x5c\xd3\x13\x1f\xf5\xec\x6f\x5a\xda\x24\x19\x66\x37\x82\xa4\x0a\x60\x6b\x12\xec\x9f\x40\x8b\x44\x24\xed\xb6\x36\xa5\x70\xb1\xe2\xdd\x87\xdb\x09\xc2\xc8\x5f\x07\xbc\xb9\xc3\x4a\x81\xd0\x3c\x91\x30\xb9\x9d\xa6\xf3\x26\x47\x4e\x5d\xc0\xd8\xa3\x58\x20\x98\xb9\x02\xa4\xf4\x1d\x72\x90\x1f\x8c\xf2\x7a\x20\xd1\xc8\x13\x41\x4e\x70\x3a\x21\xd6\x64\xe9\xd0\x83\x13\x7f\x16\xc4\xc0\x72\x95\x2d\x5a\x74\xc8\x77\x11\x43\x63\xe0\x5c\xf1\x56\xbd\xc3\xac\x79\x4a\xf6\x71\x11\xc9\x8e\x02\x96\xa1\x8b\x67\x50\x1e\x6a\x1d\x53\x07\xa7\xbd\xc2\xe9\x01\xa4\x0a\x7c\xf9\xe1\x23\xa9\xe2\x2d\x8b\x0d\x7e\x27\xf1\x7c\xdd\x85\xde\x59\x62\x13\xee\xf0\x31\x30\xe0\xb9\x3c\xad\x46\xaa\x63\x3b\x24\x79\xd0\x0b\x4b\xe2\x7a\xbb\x16\x9a\x24\xb4\xd7\xa6\x14\x45\x66\xa8\x12\x9e\xc2\x82\xc3\xb8\x23\x48\x25\x8a\x39\xe2\x5e\x48\xef\x98\x28\xc6\x8f\xd5\x17\xb1\x4a\xce\xd8\xe4\xa0\x56\xf7\x35\x27\xf6\x57\xee\x65\x9a\xad\x20\xf3\x9b\xaf\xbd\x24\x2f\x14\x37\xa0\xb2\x30\xb9\x9f\x84\xd7\xc3\xda\x32\x31\xc2\x26\xcc\x94\xc0\x96\x02\x7b\x99\xf4\x1a\x93\x27\x60\xc8\xa7\x6a\xf8\x9b\x5f\x90\x27\x83\x8c\x78\x3c\x76\xf1\x90\x3f\x69\x77\x76\xa7\x44\x58\xb2\x0b\x7d\xc5\x78\x58\x25\x90\xfa\x66\xff\xa0\xa8\x53\x7a\x6a\xbc\x31\xab\x97\x8a\x83\x84\x97\x16\x6e\xf6\xf1\x50\x10\x4a\x39\xfa\x3a\xb8\x45\x0f\xe0\xb8\x14\xab\x43\x3d\x85\xf4\xa4\xe2\x1d\xf9\xdb\x51\xd4\x62\xb6\xbf\x0e\x6e\x17\x73\x5d\x28\xb1\x13\xd3\x4e\xeb\x13\x3b\xbe\x63\x52\xd1\x60\x82\x50\x08\x07\x98\xa4\x84\x01\x22\x2c\x7c\x0d\xbb\x00\x2b\xcc\x5c\x2e\xc2\xe4\x66\x90\xfe\xb4\x72\x1c\x13\xdd\xee\x2c\xce\x9e\xb1\xbb\x7d\x7f\x7a\xd7\x4a\x4d\xad\xec\x7e\xc5\xa5\xce\xed\x8e\x3b\x5d\x94\x9a\x80\xe6\xec\x2b\x2e\xd7\xc7\xb8\xf2\xe5\xea\x17\xdb\x06\xf5\xdc\xfe\xd3\x93\xca\x01\xa6\xa2\x1b\x1a\x5c\x00\x7b\xe5\xc3\xa8\xb9\x4d\x02\xf2\x29\x88\x98\xa3\x78\x37\x7f\xe7\xb9\xae\xff\xbb\x7f\x6c\x31\x6d\xcb\x7c\xfa\xf1\xb0\xd1\x3b\xd9\x2a\x24\xde\x5a\xd6\x2b\x70\x4d\xc2\x2c\x01\x61\xf7\xb6\xe6\x6b\x6b\x6a\xf1\x18\xd6\x04\x36\xfa\x92\x31\x3d\xae\x4b\x89\x15\xbc\xa2\xfe\x4e\x98\xcd\xa7\xe1\x2c\x39\x98\x2c\xfe\x8e\x7f\x6a\x56\x48\xa2\x65\x3a\xb7\x8c\x18\x51\x14\x62\x0d\xfe\x67\xf0\x4d\x79\xc2\x51\xce\x21\x93\x90\x9a\xbb\x8b\x36\x86\x58\x3c\xbb\xc9\x18\x46\xad\x21\x6c\x9d\x87\xf1\xa9\xa0\xf0\x7a\x75\xce\xd5\x7a\x5e\x48\xdb\x57\x16\x09\xf0\x0a\xd7\xa4\xe6\xb9\x19\xf6\x1a\x98\xf7\x01\x8b\xa5\xf2\xfd\x0f\x6a\xbd\x19\x36\x67\xbc\xe4\xf7\xf3\x8b\x02\x27\xea\x39\x30\xef\x92\xf8\x7d\x6a\x66\x30\x9e\x1c\x53\x9b\x7e\xb7\x75\x9a\xd2\xba\x48\x7c\x83\x1b\xd2\x1b\x3a\xdb\xfa\x4d\x9b\xe2\xc8\x76\x86\x72\x09\x33\xbc\xd3\x2c\xef\x3a\xd3\x28\x35\x71\x93\x3c\xb0\x6d\xec\xdc\xc0\x34\x61\x70\x3b\x0f\xb0\x8c\x41\xc6\xb5\xb1\xb8\x43\xff\x06\xa6\xaf\x5f\xbf\x2e\xd2\x82\x26\x9a\xa2\x46\x52\x72\x21\x29\xf9\x35\x54\x9a\xaa\x6e\x5d\x48\xaa\x9b\x8b\x1b\x64\xa3\x74\xe5\xf7\xfd\x45\x29\x6b\x80\x9f\xe0\x5c\xb6\x55\x5d\x7e\xef\xd1\xb9\x3c\x50\x8d\x0d\xc2\x1a\x1f\x2e\xd6\x55\x27\x17\x1f\xfb\xfa\x3b\x6e\xb6\xea\x6a\xc7\xf7\x45\x90\x5f\x58\xa4\x1b\x9a\x3d\x59\x3a\x91\x49\x38\x2e\x64\x2e\x46\x76\xa0\x14\x48\x53\xea\xf9\xc7\x2f\x97\x87\xa7\x50\x7f\x54\x2f\x50\x99\xfd\xc1\xb7\x83\xd3\x65\x7f\x60\x7e\x3b\x50\x55\xe6\x71\x4d\x27\xcd\x56\x68\xed\xc0\x1f\x80\x52\x84\x8d\x5b\x1a\x7c\xc5\x2e\x97\x17\x43\xaa\x12\xf5\x08\x9d\x62\xcb\x02\x1a\x5d\xbe\xfb\x08\xf3\x33\xc3\x05\x41\xb8\x6d\x20\x49\xc6\x0c\xd3\x33\x03\x5b\x8a\x3c\x61\x05\x06\x72\xb8\x4d\x46\x04\x84\xaf\x98\x8f\xbf\x9b\xfd\xdb\x9b\x87\xfb\xdb\x2b\xf3\xfa\x7c\xf0\x7b\xdc\xdd\x91\xd1\x03\x9a\x45\xac\x77\xcd\x46\x4c\xed\xc4\xfa\xea\x11\xd5\xec\x29\xd2\x22\x95\x3f\x9c\x5a\xd9\xf4\x57\xfd\x44\x4a\x16\xd4\xaa\x7a\xd8\xe9\x25\xf0\x36\xd8\x2e\xec\x58\xa0\x35\x3d\xa9\xe9\x77\xbb\xc1\x49\xcd\x83\xcc\x61\xfa\x73\xde\xa7\x80\xc3\xdb\xc7\x2f\x09\x50\xbb\x75\x8e\x3f\x7b\x1b\x93\x3f\xc0\x70\xeb\xa5\x3f\x4a\x34\x0a\x86\x59\xb2\x39\x0c\x1f\x12\x4c\x23\xba\x2c\xfc\x80\xd2\x8c\xa3\x55\xbf\x71\x2c\x0b\x9f\x9f\xb8\xe2\x2d\x86\x67\x32\x66\xfc\x81\x21\xb3\x31\x90\x81\xc3\x81\x8c\xff\xdf\x15\x96\xea\xeb\xe0\xb6\x6d\x70\xc9\x2e\xfa\xb6\x49\x58\xe0\x4d\xb1\x54\xe8\xeb\xe0\xb6\xe4\x24\x81\xdf\xbc\x79\xb5\x43\xdb\xa5\x01\x92\x1e\x0e\x20\xaf\xf8\xb8\x85\x58\x4c\x71\x77\x57\x7c\x5c\x29\x3e\x6a\x5d\xeb\x36\x5a\x6d\x15\xce\xcc\x3d\xb6\x09\x8f\x07\xf8\xe0\xae\xd9\xb3\xa4\x99\x2f\xc2\xc2\x9a\xa0\x9f\xb1\xe3\xfe\x86\xee\xb8\xc7\xac\x42\x4f\x28\x6a\x08\x37\x9a\x09\x6c\xdf\x0e\xf2\xc1\x26\x79\x2c\x4d\xe1\x6b\x6f\x17\x7b\x2c\xdb\x68\x8f\x53\x30\x7b\xef\xb5\xb4\x20\x20\x16\xb4\xf7\x5e\xe6\xe6\xb6\xb8\x16\x4b\x02\x69\x51\x90\x6d\x34\x33\x16\xdc\x73\x8d\xde\xd2\xaa\x14\x43\xaa\xa8\x1f\xa9\xcd\x4c\x0d\xad\x95\x69\xae\x09\x37\x3c\x39\x14\x76\xbc\xc1\xe9\xa1\xd5\x9a\xb7\xc4\x59\xde\x69\xa6\x77\x9d\x6d\x54\x4a\x34\x1b\x8e\xad\x8f\x29\x25\x6c\x74\x40\x95\x0b\xfe\x88\x4c\x7f\x48\x87\x18\xd2\x26\xa9\x71\x60\x71\x91\x54\x9d\x19\x37\xce\x86\xeb\xd0\x0c\xc6\xf3\x92\x14\x78\xef\x7b\xb6\x83\xd1\xdf\xd7\xc1\x2d\x32\xef\x33\xf6\x9a\x25\x35\x5b\xad\x0a\x9b\xe9\xde\x3f\x03\x75\x5b\xe8\xdc\xfd\x6e\xb7\xc4\xb5\x27\xcc\xf0\x4e\xb3\xbc\xeb\x4c\xa3\x52\x0c\x8a\x3f\xb2\xf3\x21\xf7\x5a\xfa\x8e\xba\x67\x06\x9d\x7f\xc9\x96\x63\xf7\x8d\x7d\x5a\xdb\xf4\xb2\x8f\x15\x48\xde\xd8\x97\xb0\xd9\x34\x7b\x63\x5f\xbe\x1d\x4a\x03\x4b\x70\x4a\xc1\x5e\xdd\xa5\x46\xf9\xf8\x1b\x81\x69\x70\x01\x25\x61\x20\x32\x36\x2c\x4d\x89\xad\x26\xa6\x80\xbf\x3c\x90\xca\xe8\xfd\xfa\x6b\xe2\x05\x07\x65\x6f\x75\xd2\x11\x93\x13\x6c\xf3\xa9\xe9\x9b\x36\xa3\x47\x12\x13\x00\x79\x3d\xca\x83\x00\xf0\x27\x69\x6d\xc6\x72\x38\x94\x09\x90\xf1\x44\x2d\x67\xeb\xf8\xad\xd6\x1e\xfa\x7a\xce\x3a\xc8\xb7\x3f\x3b\xa6\xb7\x45\x05\x27\x32\x80\xa5\xe9\x72\x4a\xac\xb9\xd1\x63\x58\x79\x22\xe3\x6a\x88\xcd\x67\xef\xde\xc4\x04\xb0\x0d\x42\x9a\x16\x25\xd6\x23\x0e\xa6\x5d\x7b\xee\x80\xf9\x82\xa6\x0c\xf2\xa4\x45\x8e\xa3\x9a\xf0\xa9\x19\x4e\x23\x88\x22\xca\x8b\x3a\x30\x16\xc4\x36\x7d\xab\x2d\x73\xde\xb4\x11\xdf\x8c\x12\x00\x8b\x66\x72\x06\x13\x84\x29\x10\x0c\xd3\xa3\xe0\xcf\x33\x43\x02\x05\x2b\xb4\x6d\xb9\x02\x0b\x9f\x69\x83\x67\x99\x05\xdd\x96\x9f\xc4\x24\xa4\xea\x77\x0f\xfa\xfb\xbe\x8b\x79\x87\xc2\xdb\xbe\xf3\x79\x87\x4f\x82\xd8\xe1\x94\x07\xf5\x20\xc1\x9f\xfb\x35\xe9\x5a\x7e\xd5\xc1\x62\x4c\x98\x49\x61\xa4\x8c\x5e\xe2\x5d\x52\x09\x52\xc2\x37\xc4\xfa\x62\x8a\xbb\x31\x1b\xd8\x33\x84\x86\x5c\x29\xee\x68\xc8\x09\x3e\x35\x9f\x4f\xa2\xcb\x2d\x65\x71\xea\x39\x2c\x8f\xa0\xd6\x11\x3c\x21\xe7\xfc\x7f\xc6\x55\x84\x37\xc2\x45\x65\x9c\xdf\xff\x2f\x9d\xb6\xc2\x78\xc6\x9a\x60\xdf\xde\xa6\x1c\x06\xbe\x2d\xd9\xa6\x03\x78\xd2\xba\xb8\xdf\xf3\x77\x30\xa5\x92\x8c\x75\x8f\x51\x5e\x95\xaa\x3a\x62\xda\xc7\x01\x3b\x44\xa0\x7e\x34\x26\x9d\xa6\x73\x5d\x36\xe8\x37\xac\xd3\xe8\x0b\xb8\x6a\xb0\x3e\xbc\x2b\x5f\xd7\xf7\xe0\x72\xa1\xf4\x20\xbf\x29\x78\x20\xa8\x0f\x47\xa4\xd3\xb0\x83\x67\x26\x05\x36\x56\x13\xa3\x97\x72\xd9\x6a\x86\x25\xd7\x92\xf4\x1f\x59\x5c\x3a\x17\x49\xef\x07\x0f\xfa\x1c\xad\xeb\xb6\xc3\xd4\xdb\x3e\x1a\xcc\xbb\x1b\xcf\x19\x82\x28\xc0\xbb\x15\xc1\x03\xe1\x5d\x38\xa2\xc2\xf4\x49\xb9\xb5\xb2\x20\x01\xfe\x7f\x7b\xe0\xaf\xc5\xfe\x66\xc0\xdf\x99\x17\xf1\x39\x6b\x52\xad\x07\xfe\xf5\x3c\xf2\x36\xe8\x55\x5f\x09\x7a\x24\xb4\xee\x97\xed\xdc\x8e\x3e\xef\x32\x4a\x8c\xc6\x02\x0f\x8f\x42\x6d\x6f\x16\x19\x5d\xdf\x7e\x3c\x4e\xa8\x30\x6a\x8a\x2f\x4b\x09\x3e\xf7\x4e\xe6\x22\x8e\x6c\x4d\xaa\x12\x32\x4b\x60\x92\x84\x35\x98\xda\x4b\xf8\x5d\x96\xff\x79\x2c\x41\xe7\xff\x6a\xf0\x7f\x15\x53\x66\x33\x5f\x15\x77\xb8\x4e\xc3\xf3\x55\xd7\x73\xad\x64\x15\x50\x4a\x5c\x49\xfe\x03\x05\x8e\xa2\x7e\x11\x89\xae\xfa\x10\xe8\x80\x94\x78\x9c\x78\x5f\x41\xd3\x71\x18\xf6\xfe\x40\x51\xa1\x1f\xcf\x19\xbd\x8a\xef\xa2\xeb\x73\x67\xc8\x3f\xf0\xd9\x43\xe0\x3f\x7c\x40\x0d\x31\xb3\x83\x4f\x73\x47\x00\xcf\x12\x8d\x7f\xc7\x9c\xe9\xc1\x3f\x60\x66\x87\x61\xfc\xdf\x87\xe9\x61\xfc\x56\x00\x3a\x5c\x06\xa0\x2e\x77\x3d\x57\xb3\xc0\xbd\x29\xe1\x67\xc5\x47\xe6\x6f\xe3\xcf\xe1\x36\xe8\xe1\xef\x59\xa2\xfd\xf8\xbb\xe6\x36\x44\xcb\x48\x47\x13\x7f\x4e\xa3\xf0\x57\x38\x96\xab\xef\xca\x06\x67\x1e\xdd\x4f\xa5\xbb\xfe\x59\x15\x3b\x84\x6c\xc6\xc5\x2c\xfb\xfa\xf0\xf2\xa2\xbc\x5c\xab\x98\x1f\xfd\xc9\xb8\x21\xef\x9a\xe2\xb8\x37\x6b\x58\xf2\x21\xb1\xdc\x20\x1e\x12\x4d\x48\x3e\x04\xf9\xf0\x42\x04\xdc\x92\x6c\x3d\x07\xc3\x54\x7a\x47\xc3\x0a\x5f\xf9\x16\x66\x4c\xc5\xb9\xf7\xb5\x2b\xdc\x29\x60\x51\xc6\xa5\xed\x7e\x3b\x8d\x8f\x9d\xb6\x2f\x58\x2f\x9d\x77\xba\x07\x13\x95\x8c\x41\xad\xe4\x5f\x8d\x56\x7b\x15\x83\x94\x8f\x4b\x40\xe0\x15\xd7\x32\x2b\x87\x8a\xbf\x2b\x1e\x5e\xb7\xf8\x75\x70\x8b\x5e\xfd\x4c\xd5\x6f\xc1\x85\xa2\x3f\x8f\xd5\x6f\x29\x6b\x81\xa6\x80\xb0\x62\x43\xb8\x92\x02\xf3\x94\xd5\xd2\xf4\xd7\xdb\xb7\xff\xd2\xab\xcc\x2f\x2d\x11\xab\xe5\xef\x5a\x94\x72\xab\x78\xf9\xb8\x9a\x88\x9d\xf7\x31\xa5\x2d\x05\xe2\xc7\xab\xb7\xe7\x1f\xfa\x55\x21\xb1\x7a\x3c\x15\xbf\x8e\xb4\x36\x3c\x8d\x82\xdd\x3b\xcc\x9a\x37\x1a\x52\x8b\x1b\x4a\x81\xd9\xe5\x20\xf1\x08\x3d\x7e\xfe\x8f\x4e\x53\x7f\x7a\x52\x91\xd1\xdc\xe8\x05\xa5\xf6\x05\x21\x9c\xda\xfd\xa6\x60\xb1\xbb\x11\xb2\xf1\xad\xb4\x68\xcb\x67\x42\xbc\x56\xfe\xa6\x9e\x29\x17\x8f\x0e\xb7\xa1\xdb\xd7\x53\xd5\xbe\x9e\x7d\xee\xd0\x59\x68\xb3\xd1\x5e\x29\xd9\xbd\x7c\x8f\xba\xaf\x55\xfe\xd0\xc5\xbf\xd1\xa7\xf1\xa7\xb9\xad\xe6\x03\xc2\x2d\xa8\xe1\x19\x7d\xd7\xdc\x86\x12\x92\x03\x9a\xa7\xff\x35\x21\xc3\xbb\x9d\x2b\xd0\x86\x70\xde\x53\x06\x37\xe5\x82\x83\xdf\x08\xb3\x89\x85\x15\x17\x6d\xb9\xed\xba\x6e\xd8\x0a\x8f\x95\x84\xd6\x8c\x63\xff\x3a\x74\x6a\xa0\x73\x5b\x3e\x3a\x8f\x30\xde\xca\x54\x06\xf3\x7a\x8b\x2b\x5a\x14\x63\x26\x54\x01\x94\x1f\x63\x3e\xc2\x1c\x44\x17\x60\xd6\xb2\x71\x3c\x91\x0d\xc5\xc3\xd2\x98\xc7\x4d\xb8\xc3\xc7\xc0\x80\x67\x1e\xc9\x52\xe0\x2d\xc6\xe8\xb8\x04\xcb\x7f\xa9\xe5\xfd\x0e\xf5\x1d\xc6\x00\x98\x8d\xae\xb1\xb0\x04\x47\xaf\x2e\x8f\x35\x8b\x98\x2e\x8f\x97\x95\x14\xc1\x81\x28\x60\xef\xbd\x58\xa2\x2d\xb1\xf6\x1a\x60\x4f\xca\x00\xac\x96\x1f\x7b\x19\x80\x3d\xd1\x05\xec\x49\x8b\x00\x5b\xe3\x7b\xe2\xd1\xbb\x32\x00\xab\x55\x55\xf8\x32\x00\xfb\x4e\x17\xb0\xef\x5a\x04\xd8\x1a\x8b\x6b\x46\xef\xcb\x00\xac\xd6\x6b\xd6\x97\x01\xd8\x5f\x75\x01\xfb\xbe\x45\x80\x4d\x31\x50\x7b\xae\x9f\x1c\x1d\xe7\xad\x9a\xac\x23\xe5\x90\xf3\x70\xbf\x16\xa4\xa3\x12\xea\x2a\x52\x2b\x2a\xf6\xad\xfa\x93\x4e\xf5\x55\xbc\xf0\x6f\xa2\xea\xdf\x75\xaa\xaf\xe2\xf4\xa6\x26\xaa\xfe\x7d\xa7\xfa\xd2\x54\x5f\x64\xa7\x66\xc5\xaa\x5f\x7b\xcb\xa6\xb8\x5b\x42\x78\x7a\x31\xd0\x2a\xf9\x62\xc1\x76\x8b\xe5\xb3\xdb\xf7\x9e\xa3\xfc\xd0\x56\x71\x37\x28\xd9\xed\x7f\x0f\xbf\x76\x88\x94\x84\x33\xf4\xea\x62\xd0\xd7\x0c\x74\x2f\xa4\x85\x5d\x68\x51\xb0\x5b\x31\x01\x1a\x5d\x71\xb0\xa8\x83\xd3\xae\x85\x9c\xe4\x7a\x29\x13\xab\xc4\x44\x5e\x4f\x5d\xa7\x32\x93\x5b\x78\xe3\x4c\x87\x9e\x9d\xab\x28\x0b\x1f\x99\x9e\x52\x6c\xe1\x02\xd8\x5a\xc5\x31\x79\xeb\x2f\x9b\xf2\x0e\xb6\x62\xdc\x0d\x5c\xc2\xd6\x5c\xb7\x3f\xc1\x4d\x8e\xdc\xb2\x77\x49\x7d\x47\x01\x4a\xa2\x7d\xea\x52\xeb\xb8\xb3\x05\xd2\x2d\x60\x4a\xef\x9c\xa4\xe2\x86\x72\xf5\x88\x35\xfd\x18\x7f\xb1\x63\x42\x4b\x72\xeb\x88\x35\x2d\x69\xfd\xe3\xd0\x36\x1a\xc0\xb6\xcf\x4a\x07\x98\x32\x7a\x01\xe0\xce\x9f\x3f\xd0\x0a\xf8\x3c\x07\x04\xb1\x72\x60\x28\xed\x6e\xd2\x46\xec\x88\x2e\x7c\x1e\x41\xe7\xa6\x4a\x08\x72\xd6\x2a\x21\xb4\xa8\xb0\x0f\x17\xe7\xc7\xec\x0f\x3f\x9a\x5d\x00\x5a\x78\x25\x5b\x0a\x5e\x5b\x54\x62\x94\x30\xde\xf2\x4b\x8c\xa4\xc2\xca\x93\x5d\x8d\x51\x5d\x45\xec\xc7\x65\x56\xb1\x4b\xcb\x1d\x04\xfa\x6c\xb4\xbd\x4d\xb1\x61\xfd\x94\x9b\x98\x9b\xb2\xc2\xab\x6f\x2f\xa6\x3d\xb3\xac\x56\xeb\xf7\xe3\x8f\x7e\x4a\x6a\xae\x29\xb1\x51\x7d\x0a\xb6\xa6\xad\x56\x6f\xff\x7b\xf3\xd7\xc9\xf5\x29\x77\x82\x1d\x4a\x86\xad\x56\xf0\xe7\x60\x08\xcd\x8f\x16\xeb\x53\xb2\xb2\x48\xab\x35\xfc\xd0\xff\x52\x99\x7a\xeb\xad\x50\x6d\xd1\x62\x20\x21\x44\xcc\x5e\x0c\xac\x8f\x71\xe5\xcb\xe5\x17\xa7\x6f\x82\x3b\x06\x47\xd8\x82\xde\x4f\xff\x17\x00\x00\xff\xff\x1c\xe2\x55\x77\x2e\x49\x01\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 84270, mode: os.FileMode(0664), modTime: time.Unix(1612303471, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x8d, 0x6a, 0xe7, 0x64, 0x78, 0x95, 0xad, 0x28, 0x59, 0xb9, 0xa2, 0xe3, 0xff, 0x26, 0xa9, 0xd0, 0x99, 0xcb, 0x8c, 0x19, 0x65, 0x41, 0xf8, 0x3d, 0xb8, 0x62, 0x27, 0x29, 0x6d, 0xc4, 0x56}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
