// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (34.945kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5d\x6f\xdb\xb8\xd2\xbe\xef\xaf\xe0\xab\x17\x58\xf4\x60\x91\xa4\x71\xda\x3d\x07\xbb\xb1\x16\xa9\xb7\xe9\x16\xdb\xb4\x68\x9c\xdd\xf6\xce\xa0\xa5\xb1\xc4\x86\x22\x55\x92\x8a\xe3\xf3\xeb\x0f\x24\xd9\xf1\x87\x3e\x2c\x4a\x96\x25\x39\xbe\x09\x10\x49\x0f\x45\xce\x3c\x33\x1c\x0e\x87\xf2\xe5\xef\x8f\x1e\x45\x0f\x20\x24\xe1\xac\x6f\x9c\x9f\xbe\x32\x10\x30\x8b\xdb\x84\x39\x7d\xe3\xef\xbb\xeb\x93\xff\x18\xbf\x9b\x2f\x2e\xff\xef\xe4\x04\xbd\x07\x06\x02\x2b\xb0\xd1\x94\x28\x17\x39\x14\xdb\x80\x2e\x4e\x7b\xbd\xd3\x1e\x3a\x39\x31\x5f\x5c\x12\xa6\x40\x4c\xb0\x05\xe6\x0b\x84\x2e\x05\xfc\x08\x88\x00\x89\x28\x19\xf7\x0d\x47\xdd\xff\x6c\x2c\x5f\x74\x71\xda\x7b\x65\x9c\x45\xcf\xf1\xf1\x77\xb0\x14\xb2\x28\x96\xb2\x6f\xbc\x57\xf7\x5f\x09\xb3\xf9\xd4\x40\xc4\xee\x1b\x16\xa6\x94\xb0\x09\x9f\x5f\x0b\x01\x08\x5d\xfa\x82\xfb\x20\xd4\x0c\x31\xec\x41\xf8\x10\x1b\x4d\xb8\x15\x48\xc3\xbc\xc6\x54\xc2\xe5\xd9\xe2\x81\xf9\xf3\x96\x4b\xa8\x8d\xd4\xcc\x87\xbe\xa1\x88\xa2\x30\xc6\x62\xde\x56\xd8\x1a\xc5\x16\xb8\x9c\xda\x20\xce\xe6\x80\xb3\x08\xb1\x8a\x7e\x7a\x3a\xd1\xdd\xf7\x82\xd8\x4f\x8d\x25\x3b\xf7\x40\x24\x19\x53\x30\xcc\x3b\x11\x24\x7a\x56\x66\x34\xc9\x3e\xa5\xf7\xeb\x23\x1e\x03\x5d\x4a\x51\x12\x87\xc5\x97\x56\x61\x25\xfa\x5b\xb6\xcf\x69\x38\x17\x53\xe2\x30\xc3\x94\x0a\x0b\x55\x14\xe4\x61\xe1\x10\x36\xa2\x30\x51\x86\xd9\xd3\x44\x09\xe2\xb8\x3a\x30\x17\x1e\x7d\xcc\xec\x2d\xe2\xc0\x4a\x09\x32\x0e\x14\xc8\xf5\x1b\xab\xb7\xe6\x0d\x4a\x0b\x53\x30\xd0\x03\xa6\x01\xf4\x8d\xd7\xc6\xd9\x46\x53\x67\xe9\x6d\x5d\x9e\xc5\x0a\x5e\xbb\xe6\x63\xeb\x9e\x30\x27\x7f\x04\xa1\x9c\x46\x58\x29\x6c\xb9\x86\xf9\xaa\xe8\xb8\x15\xf7\xf5\x41\x53\x62\x2b\xd7\x30\x5f\xa7\x3f\x7f\x79\x96\xe8\xef\x9a\xa1\x21\x7d\x62\xdb\x8f\x96\x75\x24\x75\x4d\xa4\xde\x54\xae\xc0\x7e\x1e\xa2\x49\x86\x9e\xb7\x96\xa1\x16\x67\x8a\x30\x60\xaa\x61\x9a\x36\xa9\x9d\x0c\x5e\xd6\x20\x6d\xa2\x82\xd6\xb9\x03\x1a\x77\x4f\x09\xcc\x24\xc5\x0a\x8f\x29\xf4\x8d\x19\x48\xc3\xfc\x70\xf7\xf7\xaf\xe8\xa4\x56\x7d\x15\x36\x8c\x66\xf4\x65\xfd\xe8\x90\xba\x06\x5f\xea\xd6\x56\x61\x07\xde\x8c\xb6\xb0\x10\xb4\x43\xfa\xba\xba\xbd\xfd\x58\xb7\xc6\x2e\x5a\xa8\xb1\xa1\x25\x38\xa5\x60\xaf\xae\xa3\x64\xe0\x83\xb0\x5c\xb0\xee\x07\x9c\x29\x4c\x18\x88\x9a\x95\xa8\x03\x2b\x15\x8f\x3c\x94\x01\x49\x17\xdb\x7c\x3a\x0a\x97\x82\x86\x49\x58\x26\x2c\x21\xe6\x74\x51\xff\x43\x60\xea\x73\xa1\x8c\xcd\x47\x4b\xca\x73\x8b\x4c\x73\x0d\x23\x55\xb0\x45\x42\xd1\xd4\xde\x96\x05\x16\x52\x65\x69\x75\x66\xeb\x26\x5d\x3f\x2b\xce\x6b\x69\x01\x69\x2e\xac\xb2\xd6\xaa\x6a\xae\x92\xf6\x2a\x69\xb0\x92\x16\x53\xdf\x5c\x05\x1c\x48\x18\x79\x58\xdc\x07\xb9\x6b\x8d\x6c\xfc\xb6\x55\xca\x13\x2e\xc5\xff\x2f\xee\xa4\x1b\x7f\x2a\x20\xe5\xe1\x26\x23\xed\xc2\xd3\x51\xd5\x75\xd0\xfa\x20\x57\x6e\xae\xde\x48\xda\xe3\x95\xfd\x3d\x90\xca\x03\xa6\xe6\x46\xe9\x03\xd8\x2b\x17\xd3\xf3\x7b\x94\x4f\xc3\xe9\xea\x4d\x22\xaf\xb7\xc9\x1d\xdf\x0f\x9f\xfb\x25\x21\xba\x14\xdb\x08\xc0\x30\x7b\x89\xe1\x27\xa6\x0b\x05\xfe\x88\x30\x4b\x40\xdc\xbd\x44\x38\xbd\x09\xf0\xb1\x03\x6b\x80\x8d\xbe\x6c\x11\x8f\xef\x53\x62\x61\x45\x38\x5b\x9d\xbc\x3d\x4c\x58\xb5\x04\xa8\x8e\x79\x27\xf8\x45\x14\x85\xd4\x00\xeb\x4f\xa0\x94\xa3\x30\xa0\x00\x99\x70\x31\xf5\x26\x5d\xdf\xf2\xc7\x58\x36\x82\x73\x15\xfe\xb3\xc2\x54\x5d\x17\x5e\x2a\x01\xbb\x81\xe1\x82\x00\x53\x91\xe6\x0c\xf3\x01\x84\x22\x16\xa6\x65\x33\xb7\x37\xc0\x82\xb7\x58\x2c\x95\x1f\x5e\x68\x34\xe6\x2e\x18\x0e\x85\xfd\xfc\xa0\xc0\x9b\xf7\x1c\x58\x70\x4d\xc2\x3e\xb5\x33\x38\xca\x5e\x39\x8c\xc2\x6e\xeb\x34\x15\xce\x5a\x01\xb3\x41\x50\xc2\x8a\x8c\x62\xd5\x36\x64\x30\xf6\x92\xfa\xcd\x13\xf1\x22\xa0\x19\xe7\x48\xb8\x92\x94\xab\x4a\x1a\xe5\x86\x69\xd9\x03\x4b\x72\xe7\x13\x4c\x33\x06\x57\x79\x80\xbb\x18\x64\x5a\x1b\x31\xad\xcc\x4f\x30\x3d\x3d\x3d\x2d\xd3\x80\x26\x99\xe6\x8d\x64\xc6\x33\x28\x3b\xa6\x99\xdf\xdc\x89\xa6\x3e\xfb\xc0\x3a\xaa\xaa\xb0\xeb\xcf\x4a\x57\x43\xfc\x00\x57\xb2\xa3\xda\x0a\x3b\x8f\xb0\x3c\x50\x85\x0d\xc1\xc7\x02\x2b\x2e\xd6\x35\x27\x17\x97\x43\xf5\x9d\xb7\x5b\x73\x8d\xd3\xfb\xdd\xa3\xcf\x85\x1a\xe0\xb1\x20\x94\xf2\x76\x0b\x4b\x27\x2c\x89\xc7\x85\x16\x03\x3b\x50\x0b\xc8\xd3\xe9\xd5\x1f\x1f\xae\x0f\x4e\x9f\xe1\xa0\x0e\x54\x97\x45\xbc\x59\xaf\xdd\x0a\x6d\x9c\xf9\x5f\x02\x92\x96\x5f\x6e\x91\x88\x74\x38\x1f\x8e\xa6\xfd\x4c\xaf\x2f\x3b\x58\x65\x31\xbd\x96\x03\xca\x13\x56\xdb\x96\xd3\x71\xc7\x3b\xb2\xa0\xce\x94\x72\x25\x49\x57\x95\x36\xda\x89\x3f\x89\xc7\x36\x98\x17\x55\x1e\x8e\x57\x59\x8c\x68\x6f\x9e\x05\xa1\x4b\x6c\x59\x40\x21\x9a\xc6\xd0\x3d\xcc\xfa\x06\x31\x90\x24\x0e\xc3\xb4\x6f\x60\x4b\x91\x07\xac\xc0\x40\x1e\xb7\xc9\x84\x80\x08\x35\xf2\xc7\x5f\xa3\xc1\xe7\x4f\x77\xb7\x9f\x3f\x8e\x6e\xae\x86\x7f\x6d\x96\xfe\xad\xb4\x7d\x58\x7e\xeb\x4f\xa0\x7e\x07\xbd\x56\xd8\xed\x8e\xf8\xac\x0c\x09\x57\x92\x72\x55\x49\xa3\x9d\x78\xac\x70\x64\x57\x63\x1e\x74\x34\x04\x32\xa3\xbe\x3f\xe7\x80\xa7\xfc\x76\xe8\x62\x93\x4a\xab\x1c\x68\x42\x28\xd5\xdb\x04\xf1\xb9\x24\xf1\xbe\x4d\xc6\x96\x6b\x9d\x75\x39\x94\x3b\xff\x10\x98\x16\x2d\xca\x89\xb6\x6d\x47\x02\x7e\x04\x20\x95\x61\xbe\x79\x93\xd8\x13\xcd\x42\xee\xb3\x9c\x67\xc7\x45\x36\x77\x02\x20\x14\xd2\x9a\xc4\x0a\xcc\x27\x2e\x10\xc7\x55\x4b\x69\x9d\xbf\xca\xdc\x53\x2f\x2d\xb1\x2d\x52\xd3\x2f\xd8\xa9\xbf\x7c\x66\xf3\x8d\x32\xa2\xe5\xc8\xe7\x94\x58\x33\xc3\x64\x58\x05\x22\x7d\xef\x32\xf3\xdd\xd5\x9b\x70\x01\xdb\x20\xe4\xc8\xa2\xc4\xba\xc7\x91\xd8\xb5\x65\x07\x2c\x04\x8e\x24\x60\x61\xb9\x25\xf0\xd2\xe5\xd3\x51\x2c\x46\x10\x65\x94\x37\xef\x80\x23\x88\x3d\x0a\xbd\xb6\xcc\xdf\x0a\xde\xd2\x8c\x12\x00\x8b\x66\x0a\xc6\x12\xd1\x01\x2c\x86\xe9\x49\xf4\x6f\xdf\x90\x40\xc1\x8a\x7d\x5b\xa1\xb8\x22\xb4\xb4\xe1\x13\x66\x61\x6e\xcb\x2b\x29\x01\x6b\xf3\xd3\x83\x8e\x67\xaa\x32\x3b\x64\x94\x52\xef\x6c\x76\x50\x58\x05\x72\xbc\xd8\xf6\x97\x4f\xff\xd6\xeb\xd7\xb5\x26\xd7\xb5\x43\x2a\x9b\xa5\x2d\x5b\x61\xf3\x53\x2a\xda\xb8\xa8\x82\xad\x04\x0e\x42\x76\x68\xa3\x14\xf7\x0d\xf3\x17\x4d\xd0\x98\x2b\xc5\x3d\x0d\x5c\xe1\x7a\x91\x34\xb0\xf4\xb1\x45\x98\x93\x53\x48\xdc\xf6\x90\x0b\x5b\xf7\xf3\xf0\x00\x98\xad\x6f\x8a\x35\x17\x50\x47\x27\x3a\x23\x2b\x04\xa6\xc4\x6c\xe3\x80\x67\x5a\xd7\x9a\xb3\xc2\x8c\x0a\xbe\x6d\x46\xa8\x0b\x8b\xac\xa2\x70\xb0\xb9\x61\x15\x85\x71\x82\x4f\x47\x4f\xe4\x2e\x8c\xb2\x38\x0d\x3c\x56\x04\x58\x30\xe0\x5c\xa9\x1a\x8e\x56\x71\x69\x3b\x14\xad\x88\x16\xb3\x93\x17\x77\x2e\x10\xf1\xab\x4e\x5b\xf1\xd2\xc2\x72\x71\x18\xfa\x64\xfa\xb1\x34\xe4\xe3\xbc\xd2\x38\x27\xba\xce\x5a\x5e\xa6\x7b\xa5\xd4\xa1\x16\xaa\x8d\x4d\x43\x16\x3a\x27\x98\xea\x3c\x50\xd5\x54\xd8\xbb\xd0\x7d\xac\x1f\xc1\x8e\x2f\x6d\xef\x75\xf8\xd7\x30\xd7\x50\xfb\x5e\xbc\xe8\x42\x15\xe7\x54\x11\x7f\xa4\xe0\x51\x65\x93\x12\x0d\xe6\x63\xd2\x69\x7a\xa5\x5a\x34\xbb\xf9\xb0\xe1\xbd\x51\x30\x87\x49\xa5\x29\x98\x61\x94\x39\xe7\xc2\x6a\xa7\xad\x0a\x55\x76\x0b\x3e\x17\x4a\x8f\xb9\x9b\xc0\x03\x21\x6f\x3c\x22\x9d\x86\x3d\xfc\x38\xa2\xc0\x1c\x95\x57\x9e\x9f\xa9\xfb\x85\x43\xd6\x42\x86\xaf\x2c\x8f\x2e\x64\x6b\xb7\xc3\x3b\x9d\x36\x09\xf3\x03\x35\xf2\x03\xe1\x73\x09\x86\x69\x13\x87\x28\xb9\x37\x5b\xd5\x1a\x7e\x3b\xa6\x8b\xc8\x7c\x3e\x05\xde\x18\x44\x09\xbb\x5b\x01\x1e\x88\xdd\xc5\x23\x2a\x6d\x3e\x99\x21\x61\x1a\xb2\x90\x01\xfc\x7f\x77\xe8\x9f\x19\xeb\xa7\xeb\xa3\x0d\xf4\xf7\x66\x65\xe6\x9c\x35\x54\xe7\x89\x7f\x33\x9b\xcf\x36\xe8\xe5\x40\x09\x7a\x22\xfe\x75\x9c\x76\xea\x9d\x76\xd2\x36\xf5\xc5\x72\x53\xdf\x11\x78\x7c\x12\x6b\x5b\x6f\x5b\xbf\x2d\xd3\x59\xee\x02\xad\x66\x7b\x2e\x33\x97\xad\xa1\xf6\x62\xcf\x12\x98\x24\x8a\x3c\x94\xd9\x7e\xa8\xb2\x90\x2f\xe2\x0c\x8e\x53\x60\x03\x53\xe0\x9e\x4d\x66\x33\xf3\x94\x56\xe9\xdf\xf2\xcc\xd3\xcd\x4c\x2b\xed\x04\x94\x12\x5f\x92\xff\x42\x89\x6f\x0d\x3c\x8b\x94\x55\x73\x0c\xf4\x40\x4a\xec\x40\xd6\xe7\x12\xda\xce\xc3\xb8\xf7\x07\xca\x8a\x9c\x8c\x50\x66\x16\xe9\xdf\xfb\x65\xd2\x80\x7b\x63\xfe\x96\x3f\xde\x45\xf3\x47\x48\xa8\x31\x66\x76\x74\xb5\xad\x6c\xda\x3a\x0d\xbf\xc5\xcc\x8e\xc3\xf1\x9f\xc7\xf9\xe1\x78\x22\x90\x1c\x2f\x03\x49\x9f\xfb\x81\xdf\x6c\x0c\x59\x3a\x7d\xb9\x67\x77\x94\x24\x91\xc7\x6d\xe8\x36\x89\x6e\xb8\x0d\xf3\x35\x9d\xa7\x49\x22\xaf\x55\x24\xd2\x72\x42\x0d\x92\xe8\x6d\xa0\xd4\xa2\x9e\x45\x80\x04\x35\xbf\x50\x65\x7a\xb9\x0d\xdb\x69\x7d\x39\x99\x00\x0b\xc8\x03\xc8\x91\x0d\x13\x1c\x50\x55\x43\x9a\x22\x12\x04\x7a\xf9\x13\x55\xbf\xbd\x1b\x0e\x7e\x72\xd4\x6f\x39\x9c\xde\x31\x01\xb5\x62\xbe\x96\x10\x90\x72\x67\x07\xf4\xfb\xc8\x9d\x23\xf9\x22\x31\x20\xe5\x02\xfa\x32\xfc\x3c\xa7\x20\x53\x20\x3a\x42\xc2\x26\xd3\xab\xdf\x2c\x17\x33\x07\x74\xf3\x31\xab\xb0\x43\x48\xb0\xbe\x7b\x8c\x07\xb4\x9f\x55\x67\xa1\xac\xca\xb7\x81\x9b\x63\xda\x3b\xe6\xae\x56\x52\xa8\x1d\xa9\xc4\x68\x83\xab\x14\x7d\x13\xc8\xce\x33\x38\xde\x1b\x3b\x92\xb8\x49\x07\xdc\xfe\x62\xcb\xa7\xb2\xc9\x8c\x8d\x83\xdd\x97\x4d\xde\xc3\x0c\xc4\xb1\x6c\xb2\x91\xb2\xc9\xc2\xdf\x90\xde\x2c\x9b\x2c\x0c\x0c\x5f\xe7\x72\x8f\x3b\xc0\x80\x6f\x3d\x1b\x54\x22\x44\x9e\x9c\xef\x20\x42\xbe\xd6\x4a\x71\x1c\x6a\x80\x3c\x04\x66\xa3\x1b\x2c\x2c\xc1\xd1\xcb\xeb\x73\xcd\x74\xc3\xf5\xf9\x32\xdf\x10\x9d\xcc\x01\xbb\xf6\xa4\x42\x57\x12\xe5\x6b\x84\xed\xed\x82\xb0\x5a\xe9\x94\xe7\x41\xd8\x9e\x2e\x61\x7b\x1d\x22\xec\x9e\xd7\x7f\x6b\x84\xbd\xd8\x05\x61\xb5\x0a\x11\x9e\x07\x61\x2f\x74\x09\x7b\xd1\x21\xc2\xee\xb9\x0c\x79\x8d\xb0\xaf\x77\x41\x58\xad\x32\x80\xe7\x41\xd8\x37\xba\x84\x7d\xdd\x21\xc2\xe6\x38\xa8\x9a\xb3\x14\x93\xf3\xa2\xb9\x89\x26\x12\x0b\x05\x4f\x99\x77\x60\xcf\x31\x73\xb3\x3b\xc7\xd4\xeb\x56\x7d\xef\xa8\xfa\x46\x4f\xcb\x34\xa8\xfa\x8b\xa3\xea\x77\xa6\xfa\x32\x25\x2e\x0d\xaa\xfe\xf5\x51\xf5\x3b\x53\xbd\x7e\xc1\xfa\xde\x55\xbf\x1a\x9c\x4a\xc5\xfd\x5d\x84\xa7\x5a\x89\xec\x78\x4f\x63\xf9\xea\xb6\x6f\x66\xec\x23\xb2\x55\xdc\x8f\xb6\x83\x07\x5f\xe3\xdb\x1e\x91\x92\x70\x56\x26\xcc\x7d\xd3\xa1\x30\x77\xcf\xd4\x6f\x75\x41\x68\xe9\x5f\x3c\x73\x0b\x6d\xc7\xa4\x2a\x31\xd3\xa2\xa7\xbe\xb7\x37\x67\x5b\xba\xc4\xfd\xc8\x9e\x24\x7b\x72\xbe\x4a\x92\x0a\x2b\xfb\xf1\xad\x6c\xea\x0c\x7d\x00\x5b\xab\x92\xfe\x7b\x20\x15\x99\xcc\x0c\x33\xda\xab\xda\x1b\xef\x4a\x17\x01\xee\x99\x77\x43\x9f\xb0\xb5\x49\x3b\x14\x70\x9b\x63\xb6\xad\xd3\xdd\xe0\x2b\x8a\x58\x32\xaf\x25\x95\x5a\xe7\x03\x17\x4c\xb7\x80\x29\xbd\x53\x45\xe5\x1d\xe5\xea\x99\x44\xfd\xe8\x7e\x51\xad\xa0\x85\x4c\x9c\x49\xd4\x42\xeb\x9f\x1f\xdc\x68\x00\xaf\xfc\xb4\xdd\xc6\x6f\xdd\x69\xc5\x7a\x81\x07\x82\x58\x05\x38\x94\x08\x64\xe4\x01\x9d\x5f\x3c\xce\x54\x3b\x88\x73\xd6\xca\x20\xb4\xac\xa1\x8e\x59\x2e\x8c\xd8\xef\xbe\xb5\x7f\x45\xba\x13\xea\x75\xa8\x54\xa8\xce\x1f\x06\xbd\x3c\x8b\xbe\x53\x39\xc1\x16\x98\x2f\xfe\x17\x00\x00\xff\xff\x8d\x9b\xb9\x2d\x81\x88\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 34945, mode: os.FileMode(0664), modTime: time.Unix(1599318964, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0x1, 0x62, 0x52, 0xda, 0xba, 0x73, 0x49, 0x15, 0x75, 0x9d, 0x2a, 0x65, 0x85, 0x94, 0x4e, 0xb0, 0xed, 0x2d, 0xbb, 0x60, 0x3e, 0x37, 0xb0, 0x8b, 0x8a, 0x1e, 0x14, 0xbf, 0x1f, 0x5b, 0x50}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
