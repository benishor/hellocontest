// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (37.907kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xeb\x6f\xdb\x38\x12\xff\xde\xbf\x42\xa7\x03\x8a\x1e\x16\x49\x9a\xa4\xdd\x3b\x6c\x63\x2d\x52\x6f\xd3\x2d\xb6\x69\xaf\x71\xb6\xed\x37\x81\x96\xc6\x12\x1b\x8a\x54\x49\x2a\x8e\xef\xaf\x3f\xe8\xe1\xf8\xa1\x87\x45\x49\xb6\x24\xc7\x5f\x02\x44\xd2\x50\xe4\xcc\x6f\x1e\x9c\x19\xca\x17\xbf\x3f\x78\x44\xbb\x07\x2e\x30\xa3\x03\xfd\xf4\xf8\xa5\xae\x01\xb5\x98\x8d\xa9\x33\xd0\xff\xbe\xbd\x3a\xfa\x8f\xfe\xbb\xf1\xec\xe2\x1f\x47\x47\xda\x7b\xa0\xc0\x91\x04\x5b\x9b\x62\xe9\x6a\x0e\x41\x36\x68\xe7\xc7\x67\x67\xc7\x67\xda\xd1\x91\xf1\xec\x02\x53\x09\x7c\x82\x2c\x30\x9e\x69\xda\x05\x87\x9f\x01\xe6\x20\x34\x82\xc7\x03\xdd\x91\x77\xbf\xe8\x8b\x17\x9d\x1f\x9f\xbd\xd4\x4f\xa2\xe7\xd8\xf8\x07\x58\x52\xb3\x08\x12\x62\xa0\xbf\x97\x77\xdf\x30\xb5\xd9\x54\xd7\xb0\x3d\xd0\x2d\x44\x08\xa6\x13\x96\x5c\x0b\x09\x34\xed\xc2\xe7\xcc\x07\x2e\x67\x1a\x45\x1e\x84\x0f\x51\x73\xc2\xac\x40\xe8\xc6\x15\x22\x02\x2e\x4e\xe6\x0f\x24\xcf\x5b\x2e\x26\xb6\x26\x67\x3e\x0c\x74\x89\x25\x81\x31\xe2\xc9\x58\xe1\x68\x04\x59\xe0\x32\x62\x03\x3f\x49\x08\x4e\x22\x8a\x65\xea\xc7\xa7\x53\xd3\x7d\xcf\xb1\xfd\x38\x58\x7a\x72\xf7\x58\xe0\x31\x01\xdd\xb8\xe5\x41\x6a\x66\x55\x56\x93\x9e\x53\xf6\xbc\x3e\xa2\x31\x90\x05\x17\x05\x76\x68\x7c\x69\x99\xac\xc2\x7c\xab\xce\x39\x8b\xce\x45\x04\x3b\x54\x37\x84\x44\x5c\x96\x25\xf2\x10\x77\x30\x35\x09\x4c\xa4\x6e\x9c\x29\x52\x71\xec\xb8\x2a\x64\x2e\x3c\xf8\x88\xda\x6a\xec\x08\x04\x98\x1e\xe2\x77\x81\xbf\x81\x0e\x49\xc9\xf1\x38\x90\x20\x56\x6f\x2c\xdf\x4a\xc6\x14\x16\x22\xa0\x6b\xf7\x88\x04\x30\xd0\x5f\xe9\x27\x6b\x43\x9d\x64\x8f\x75\x71\x12\x03\x63\xe5\x9a\x8f\xac\x3b\x4c\x9d\xe2\x45\x84\xfc\x35\x91\x94\xc8\x72\x75\xe3\x65\xd9\xa5\x4b\xe6\xab\x13\x4d\xb1\x2d\x5d\xdd\x78\x95\xfd\xfc\xc5\x49\x6a\xbe\x2b\x0a\xaa\xa9\x2b\x84\xfd\x60\x59\x07\x65\xd8\x8d\x32\x4c\x39\x2a\x54\x83\x36\x11\x7a\xda\x59\x84\x5a\x8c\x4a\x4c\x81\xca\x96\x61\xda\xa6\x74\x72\x70\xb9\x05\x6e\x63\x19\x74\xce\x1c\x90\x78\x7a\x92\x23\x2a\x08\x92\x68\x4c\x60\xa0\xcf\x40\xe8\xc6\x87\xdb\xbf\x7f\xd3\x8e\xb6\x2a\xaf\xd2\x8a\xd1\x8e\xbc\xac\x9f\x3d\x12\xd7\xf0\xcb\xb6\xa5\x55\xda\x80\xb7\x23\x2d\xc4\x39\xe9\x91\xbc\x2e\x6f\x6e\x3e\x6e\x5b\x62\xe7\x1d\x94\xd8\xc8\xe2\x8c\x10\xb0\x97\xf7\x5f\x22\xf0\x81\x5b\x2e\x58\x77\x43\x46\x25\xc2\x14\xf8\x96\x85\xa8\x42\x56\x29\x1e\xb9\xaf\x42\x24\x5c\x64\xb3\xa9\x19\x6e\x21\x75\x03\xd3\x5c\xb2\x14\x9b\xb3\x59\xfd\x15\xc3\xd4\x67\x5c\xea\xeb\x8f\x56\xe4\xe7\x06\x9e\x16\x2a\x46\x26\x63\xcb\x84\xa2\x99\xb3\xad\x4a\x58\x4a\x94\x95\xc5\x99\x2f\x9b\x6c\xf9\x2c\x19\xaf\x85\x06\x64\x99\xb0\xda\x52\xab\x2b\xb9\x5a\xd2\xab\x25\xc1\x5a\x52\xcc\x7c\x73\x1d\xe2\xb2\x5b\xee\x3c\xfa\x4d\xbb\x94\x47\xba\x0c\xfb\x3f\xbf\x93\xad\xfc\x99\x04\x19\x0f\xb7\x19\x69\x97\x76\x47\x75\xf7\x41\xab\x8b\x5c\xba\xb9\x7c\x23\xad\x8f\x97\xf6\x8f\x40\x48\x0f\xa8\x4c\x94\xd2\x07\xb0\x97\x2e\x66\xe7\x05\x09\x9b\x86\xee\xea\x75\x2a\x1f\xb8\x8e\x1d\xdf\x0f\x9f\xfb\x35\xc5\xba\x0c\xdd\x08\x40\x37\xce\x52\xcb\x4f\xb9\x0b\x09\xbe\x89\xa9\xc5\x21\x9e\x5e\x2a\x9c\x5e\x27\xf0\x91\x03\x2b\x04\x6b\x73\xd9\xc0\x1e\xdf\x27\xd8\x42\x12\x33\xba\xec\xbc\x3d\x84\x69\xbd\xc4\xa9\x8a\x7a\xa7\xf0\x85\x25\x81\xcc\x00\xeb\x4f\x20\x84\x69\x61\x40\x01\x22\x65\x62\xb6\x9b\xac\x7d\xcb\x1e\x62\xde\x70\xc6\x64\xf8\xcf\x12\x52\x55\x4d\x78\xa5\xc4\xed\x1a\x0d\xe3\x18\xa8\x8c\x24\xa7\x1b\xf7\xc0\x25\xb6\x10\xa9\x9a\xf1\xbd\x06\x1a\xbc\x45\x7c\x21\xfc\xf0\x42\xab\x31\x77\xc9\x70\x28\x9c\xe7\x07\x09\x5e\x32\x73\xa0\xc1\x15\x0e\xe7\xd4\xcd\xe0\x28\x7f\xe7\x60\x86\xd3\x56\x19\x2a\xf4\x5a\x01\xb5\x81\x13\x4c\xcb\xac\x62\x59\x37\x44\x30\xf6\xd2\xf2\x2d\x62\xf1\x3c\xa0\x19\x17\x70\xb8\x16\x97\xeb\x72\x5a\x2b\x0c\xd3\xf2\x17\x96\xc6\xce\x27\x98\xe6\x2c\xae\xf6\x02\x9b\x58\x64\xd6\x18\x31\xac\x8c\x4f\x30\x3d\x3e\x3e\xae\x32\x80\x22\x98\x92\x41\x72\xe3\x19\x2d\x3f\xa6\x49\x6e\x36\x22\xa9\xcf\x3e\xd0\x9e\x8a\x2a\x9c\xfa\x93\x92\xd5\x08\xdd\xc3\xa5\xe8\xa9\xb4\xc2\xc9\x6b\x48\xec\xa9\xc0\x46\xe0\x23\x8e\x24\xe3\xab\x92\x13\xf3\xcb\xa1\xf8\x4e\xbb\x2d\xb9\xd6\xe1\xfd\xee\xc1\x67\x5c\x0e\xd1\x98\x63\x42\x58\xb7\x99\xa5\x12\x96\xc4\xeb\xd2\xe6\x0b\xdb\x53\x0d\x28\x92\xe9\xe5\x1f\x1f\xae\xf6\x4e\x9e\xe1\xa2\x9e\xa0\x2c\x87\xa3\xaf\x7b\x27\xca\xe1\xe8\xeb\x9e\x4a\xb2\x8c\x5f\x3a\xeb\xb6\x3c\x5b\xc7\xfd\x97\x00\x67\x55\x0a\x3a\xc4\x22\x15\xc8\x87\xab\xe9\x3e\xd2\xb7\x97\xe7\xad\x93\x16\x59\xc9\xe6\x15\x31\xab\x6b\x89\x91\x78\xe2\x3d\x49\x8d\xe4\x72\xb9\x16\xa7\xeb\x72\x5b\x6b\xc4\x9e\xc4\x6b\x1b\x26\x6d\xb5\xfb\x63\x55\xe6\x2b\xda\x99\x65\xd1\xb4\x0b\x64\x59\x40\x20\x72\x63\xda\x1d\xcc\x06\x3a\xd6\x35\x81\x1d\x8a\xc8\x40\x47\x96\xc4\xf7\x48\x82\xae\x79\xcc\xc6\x13\x0c\x3c\x94\xc8\x1f\x7f\x99\xc3\xcf\x9f\x6e\x6f\x3e\x7f\x34\xaf\x2f\x47\x7f\xad\x37\x71\x2e\x8d\xbd\x5f\x76\xeb\x4f\x20\x7e\x0f\xad\x56\x38\xed\x9e\xd8\xac\x1c\x0e\xd7\xe2\x72\x5d\x4e\x6b\x8d\x58\xac\x70\x65\x97\x63\x16\xf4\x34\x04\x32\xa2\xb9\x3f\xe5\x80\xa7\x7a\x61\x7b\x5e\x6e\x54\x6a\xec\x9a\x60\x42\xd4\xca\x59\x3e\x13\x38\xae\xc0\xe5\x14\xcf\xb7\xd9\x61\x45\x98\xf3\x15\xc3\xb4\x6c\x7b\x55\x54\x80\x37\x39\xfc\x0c\x40\x48\xdd\x78\xfd\x3a\x55\xdd\xce\xa3\xdc\x65\x63\x56\xc3\xed\x52\xb7\x1c\x20\x64\xd2\x0a\xc7\x4a\xf8\x13\x17\xb0\xe3\xca\x05\xb7\x4e\x5f\xe6\x76\x47\x54\xe6\xd8\x06\xae\xa9\xb7\x5e\x6d\xbf\x11\x6a\xfd\x8d\x22\x82\xa5\xe9\x33\x82\xad\x99\x6e\x50\x24\x03\x9e\x5d\x85\xce\x7d\x77\xfd\x21\x5c\x40\x36\x70\x61\x5a\x04\x5b\x77\x28\x62\xbb\x32\xef\x80\x86\x84\xa6\x00\xc4\x2d\xb7\x02\xbd\x70\xd9\xd4\x8c\xd9\x08\xbc\x8a\xf0\x92\x09\x38\x1c\xdb\x66\x68\xb5\x45\x71\x51\x7f\xc3\x30\x92\x03\xcc\x87\x29\x19\x4b\x44\x47\xf0\x28\x22\x47\xd1\xbf\x03\x5d\x00\x01\x2b\xb6\x6d\xa5\xe2\x8a\x50\xd3\x46\x8f\x34\x73\x75\x5b\x5c\xc9\x08\x58\xdb\x77\x0f\x2a\x96\xa9\x8e\x77\xc8\x69\x8a\x6f\xcc\x3b\x48\x24\x03\x31\x9e\x37\x70\x88\xc7\x7f\xb7\x6b\xd7\x95\x9c\xeb\xca\x71\xa3\xf5\x26\xa5\x8d\x64\xc9\x79\x23\x65\xba\xa8\x17\xb1\x02\x1d\x84\xe8\x50\xa6\x92\xcc\xd7\x8d\x5f\x15\x89\xc6\x4c\x4a\xe6\x29\xd0\x95\xee\xfc\xc9\x22\x16\x3e\xb2\x30\x75\x0a\x5a\xc2\xbb\x1e\x72\x21\xeb\x2e\x09\x0f\x80\xda\xea\xaa\xb8\xe5\x56\xf8\xe8\x4c\x6f\xa4\x85\x40\x25\x9f\xad\x1d\xf1\xcd\x9a\x5a\x7b\x5a\x98\xd3\x8b\xb9\x49\x09\x55\xc9\x22\xad\x28\x1d\x6c\xae\x69\x45\x69\x3a\xce\xa6\xe6\x23\xb8\x4b\x53\x59\x8c\x04\x1e\x2d\x43\x58\x32\xe0\x5c\xea\xff\x8e\x76\x71\x59\x15\x8a\x4e\x44\x8b\xf9\xc9\x8b\x5b\x17\x30\xff\x4d\x65\xac\x78\x6b\x61\xb9\x28\x0c\x7d\x72\xed\x58\x16\xe5\x43\xd2\x33\x5e\x10\x5d\xe7\x6d\x2f\xb3\xad\x52\xe6\x52\x4b\x75\x39\x67\x51\x96\x3a\xf1\x99\x69\x3c\xb4\xba\xa9\xb0\x77\xa1\xf9\x58\x3d\x84\x1f\x5f\xda\x3c\xeb\xf0\xaf\x6e\xac\x50\xed\x7a\xf3\xa2\x4a\x2a\x19\x23\x12\xfb\xa6\x84\x07\x99\x0f\x4a\x6d\x98\xac\x49\x65\xe8\xa5\xbe\xdf\xfc\xe1\xc3\x81\x77\x06\xc1\x02\x24\x55\x86\x60\x8e\x52\x16\x9c\xf0\xdb\x3a\x6c\x65\x28\xb2\x1b\xf0\x19\x97\x6a\xc8\x5d\x27\xdc\x13\xf0\xc6\x2b\x52\x19\xd8\x43\x0f\x26\x01\xea\xc8\xa2\x83\x16\xb9\xb2\x9f\x1b\x64\x25\xca\xf0\x95\xd5\xa9\x4b\xe9\xda\xcd\xe8\x56\x65\x4c\x4c\xfd\x40\x9a\x7e\xc0\x7d\x26\x40\x37\x6c\xec\x60\x29\x76\xa6\xab\x4a\xcb\xef\x86\xbb\x88\xd4\xe7\x53\xe0\x8d\x81\x57\xd0\xbb\x25\xc2\x3d\xd1\xbb\x78\x45\x95\xd5\x27\x37\x24\xcc\xa2\x2c\xa5\x00\xff\xec\x0f\xfc\x73\x63\xfd\x6c\x79\x74\x01\xfe\xde\xac\x8a\xcf\x59\xa1\xea\x3d\xf0\xaf\x67\x89\xb7\xd1\x5e\x0c\x25\x27\x47\xfc\x5f\x07\xb7\xb3\x5d\xb7\x93\x55\xd4\xe7\x8b\xa2\xbe\xc3\xd1\xf8\x28\x96\xb6\x5a\x59\xbf\x2b\xee\xac\x70\x83\xb6\x65\x7d\xae\xe2\xcb\x56\xa8\x76\xa2\xcf\x02\xa8\xc0\x12\xdf\x57\x29\x3f\xd4\xd9\xc8\x97\x31\x06\x07\x17\xd8\x82\x0b\xdc\xb1\xca\xac\x67\x9e\xb2\xce\x6c\x74\x3c\xf3\x74\x3d\x53\x4a\x3b\x01\x21\xd8\x17\xf8\x7f\x50\xe1\xab\x11\x4f\x22\x65\xd5\x1e\x02\x3d\x10\x02\x39\x90\xf7\xe1\x8b\xae\xe3\x30\x9e\xfd\x9e\xa2\xa2\x20\x23\x94\x9b\x45\xfa\xf7\x6e\x91\x34\x64\xde\x98\xbd\x65\x0f\xb7\x91\xff\x08\x01\x35\x46\xd4\x8e\xae\x96\x8e\x00\x1e\x29\x3a\xdf\xb8\xb1\xd1\x83\xbf\x45\xd4\x8e\x23\xf9\x5f\xc6\xc5\x91\x7c\x2a\x06\x1d\x2f\x62\x50\x9f\xf9\x81\xdf\x6e\xf8\x59\x39\xf3\xb9\x63\x4b\x96\xc6\x9f\xc7\x6c\x50\xc3\xdf\x23\x45\xff\xf1\x77\xcd\x6c\x48\x76\x92\x9e\x22\xfe\xbc\x4e\xe1\x4f\xc9\xf4\xb5\x88\xbf\xb7\x81\x94\xf3\x2e\x1a\x0e\x02\x64\x72\xa1\x8e\x53\xbb\x09\xc7\xe9\x3c\x16\x39\x58\x80\xef\x41\x98\x36\x4c\x50\x40\xe4\x16\x92\x23\x11\x23\xb4\x17\xcf\x89\x7c\xf3\x6e\x34\x7c\xee\xc8\x37\x05\x98\x6e\x18\x80\x4a\x91\x66\x47\x00\x48\x98\xd3\x00\xfc\x3e\x32\xe7\x00\xbe\x88\x0d\x9a\x74\x41\xfb\x32\xfa\x9c\x40\x90\x4a\xe0\x3d\x01\x61\x9b\x49\xdd\xef\x96\x8b\xa8\x03\xaa\x59\xa0\x65\xb2\x7d\x48\xeb\xbe\x7b\x88\x17\xb4\x9b\xbd\x6e\xa9\x5c\xce\xf7\xa1\x5b\xa0\xda\x0d\x63\x57\x29\x15\xd5\x8d\x04\x66\x54\x56\xab\x04\xdf\x14\x65\xef\x11\x1c\x57\xe4\x0e\x20\x6e\xd3\x00\x77\xbf\xc5\xf3\xb1\x59\x33\xa7\x5c\xd1\x7c\xb3\xe6\x94\xf1\xbb\x70\xc3\xd6\x7a\xbf\xa6\x7a\xaa\x6d\x3e\xf5\x9e\xe6\xda\xbe\x25\xd3\x2f\xc8\xfc\x76\x25\x71\xb6\x63\x17\x72\x83\x6c\xcc\x96\x03\xf1\xf8\x74\xca\x7f\x59\x40\x2d\x08\xb7\xe4\x0d\x44\xe5\xa3\x68\xc8\xe7\xc8\xf3\xdf\xc4\xe3\x76\xdd\xc3\xa4\x43\x74\x65\x2c\x46\x07\xac\x2b\xcc\xda\xe6\x68\x6a\x62\x6a\x63\x0b\x49\xc6\x37\xd1\x3f\xd1\xcc\x59\x0a\xb4\x3c\xa0\x0d\x61\xf5\x26\x50\xea\xfb\x3c\xa0\x53\x89\xde\xe1\x2c\xf0\x75\x23\xdb\xc6\xec\x0c\xe6\xed\x26\xe8\x7a\x14\x19\x6d\xf9\xf7\x84\x16\x91\xd1\x1d\xcc\x80\xb7\x1e\x16\xad\xd1\x3d\x91\x63\x2c\xa5\x7f\x9d\x65\xfd\x18\x4b\x69\xc2\xf0\x75\x2e\xf3\x98\x03\x14\xd8\xc6\xb3\xda\x15\x92\x87\x93\xd3\x06\x2c\xff\x95\x92\xf7\xdb\xd7\xd4\xe1\x08\xa8\xad\x5d\x23\x6e\x71\xa6\xbd\xb8\x3a\x55\x2c\xc4\x5c\x9d\x2e\x2a\x31\xd1\x49\x69\xb0\xb7\x5e\x6e\xe9\x4b\xa4\xbd\x02\xd8\xb3\x26\x00\xab\xe4\xc7\x9e\x06\x60\xcf\x54\x01\x7b\xd6\x23\xc0\xee\x38\x33\xbe\x02\xd8\xf3\x26\x00\xab\xd4\x18\xfa\x34\x00\x7b\xae\x0a\xd8\xf3\x1e\x01\x76\xc7\xc7\xc2\x56\x00\xfb\xaa\x09\xc0\x2a\xb5\x65\x3e\x0d\xc0\xbe\x56\x05\xec\xab\x1e\x01\xb6\xc0\x40\x6d\xb9\x7e\x33\x39\x2d\x5b\xb5\x69\x23\xe5\x50\xf2\xab\x3f\x3d\x48\x47\xe5\xd4\x7c\x0a\x3b\xb0\xb7\x2d\xfa\xb3\x83\xe8\x5b\x3d\xbd\xdc\xa2\xe8\xcf\x0f\xa2\x6f\x4c\xf4\x55\x5a\x8e\x5b\x14\xfd\xab\x83\xe8\x1b\x13\xbd\xfa\x01\xc2\x9d\x8b\x7e\xa5\xc6\x26\x99\xdf\x44\x78\xaa\x54\xe2\x8f\xbb\x3d\x16\xaf\xee\x5f\x99\xa3\xf9\xc8\x56\x32\x3f\x6a\x94\x1b\x7e\x8b\x6f\x7b\x58\x08\xcc\x68\x95\x30\xf7\x75\x8f\xc2\xdc\x1d\x43\xbf\xd3\x4d\x03\x95\x7f\x4b\xd8\x2d\x55\x8e\xc9\x14\x62\xae\x46\x4f\x7d\x6f\x67\xc6\xb6\xf2\x91\xc3\x03\x7a\xd2\xe8\x29\xf8\x4a\x5c\x26\x59\xd5\x8f\xa1\x16\x34\x59\xf8\x00\xb6\xd2\xc9\xc6\x1f\x81\x90\x78\x32\xd3\x8d\xa8\x56\xd5\xfd\xea\xeb\x8e\x71\x37\xf2\x31\x5d\x71\xda\x21\x83\xbb\x1c\xb3\x6d\x74\x77\xc3\x6f\x5a\x84\x92\xe4\x94\x8d\x50\xfa\x5e\xc3\x1c\xe9\x16\x50\xa9\x76\xca\xbb\xba\xa1\x5c\xfe\x46\x84\x7a\x74\x3f\xef\xe3\x54\xa2\x4c\x7d\x23\x42\x89\x5a\xfd\x7b\x0e\x6b\x03\xa0\xa5\x1f\x8d\x5e\xfb\x15\x69\xa5\x58\x2f\xf0\x80\x63\xab\x04\x86\x52\x81\x8c\xd8\xa3\xef\x49\x1c\x3c\x55\x03\x71\xce\x4a\x1b\x84\x92\x36\x6c\xc3\xcb\x85\x11\xfb\xed\xf7\xee\xef\x48\x1b\x81\x5e\x8f\x5a\x85\x72\xb6\xa2\x8d\xfc\xe4\xfe\xc5\x49\xf4\xdd\xf0\x09\xb2\xc0\x78\xf6\xff\x00\x00\x00\xff\xff\x2b\x30\x87\x57\x13\x94\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 37907, mode: os.FileMode(0664), modTime: time.Unix(1604754470, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0xb6, 0x8b, 0x39, 0xc2, 0x43, 0xd6, 0x21, 0x49, 0x47, 0x89, 0x31, 0x53, 0xc9, 0x7f, 0x76, 0x51, 0xd4, 0x1b, 0x73, 0xa0, 0x83, 0x8a, 0xdc, 0x63, 0x74, 0x98, 0x66, 0x9, 0xa7, 0x2d, 0xd0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
