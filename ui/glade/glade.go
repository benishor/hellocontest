// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (50.37kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x6f\xdb\x38\x12\x7f\xef\xa7\xe0\xe9\x80\x45\x0f\x8b\x24\x4d\xd2\xee\x1d\x6e\x13\x2f\x52\x37\x69\x17\x9b\x34\xdb\x38\xd7\xf6\x4d\xa0\xa9\xb1\xcc\x0d\x45\xaa\x24\x15\xc7\xfb\xe9\x0f\x92\xec\xc4\x7f\x24\x59\x94\x64\x59\xb2\xfd\xd0\x02\x91\x34\x14\x39\xf3\x9b\x3f\x1c\x0d\xc7\x67\xbf\x3d\x79\x0c\x3d\x82\x54\x54\xf0\x73\xeb\xf8\xf0\x8d\x85\x80\x13\xe1\x50\xee\x9e\x5b\xff\xbb\xbf\x3a\xf8\x8f\xf5\x5b\xe7\xd5\xd9\x3f\x0e\x0e\xd0\x47\xe0\x20\xb1\x06\x07\x8d\xa8\x1e\x22\x97\x61\x07\xd0\xe9\xe1\xc9\xc9\xe1\x09\x3a\x38\xe8\xbc\x3a\xa3\x5c\x83\x1c\x60\x02\x9d\x57\x08\x9d\x49\xf8\x11\x50\x09\x0a\x31\xda\x3f\xb7\x5c\xfd\xf0\xb3\xf5\xf2\xa2\xd3\xc3\x93\x37\xd6\x51\xf4\x9c\xe8\xff\x05\x44\x23\xc2\xb0\x52\xe7\xd6\x47\xfd\xf0\x8d\x72\x47\x8c\x2c\x44\x9d\x73\x8b\x60\xc6\x28\x1f\x88\xc9\xb5\x90\x00\xa1\x33\x5f\x0a\x1f\xa4\x1e\x23\x8e\x3d\x08\x1f\xe2\xf6\x40\x90\x40\x59\x9d\x2b\xcc\x14\x9c\x1d\x4d\x1f\x48\x7e\x1e\x13\x02\xbe\xce\x26\x21\x43\xca\x1c\xa4\xc7\x3e\x9c\x5b\x9a\x6a\x06\x7d\x2c\x27\xaf\x0f\x07\x64\x98\xc0\x50\x30\x07\xe4\xd1\x84\xe0\x28\xa2\x98\xa5\x7e\x7e\x7a\x69\x85\x1f\x25\x75\x9e\x07\x5b\x9e\xdf\x23\x55\xb4\xcf\xc0\xea\xdc\xcb\x60\x69\x66\x45\x18\xb0\x3c\xa7\xe4\x79\x5d\xe3\x3e\xb0\x17\xc6\x2b\xea\xf2\xf8\xd2\x2c\x59\x81\xf9\x16\x9d\x73\x12\xdd\x10\x33\xea\x72\xab\xa3\x34\x96\x3a\x2f\x91\x87\xa5\x4b\xb9\xcd\x60\xa0\xad\xce\x89\x21\x95\xa4\xee\xd0\x84\x6c\x08\x4f\x3e\xe6\x8e\x19\x3b\x02\x05\xb6\x87\xe5\x43\xe0\x9b\xd1\x8d\x24\x5e\x45\x81\xb5\x96\xb4\x1f\x68\x50\xf3\x37\x66\x6f\x4d\x46\x53\x04\x33\xb0\xd0\x23\x66\x01\x9c\x5b\x6f\xad\xa3\x85\xa1\x8e\x92\xc7\x3a\x3b\x8a\xa1\x34\x77\xcd\xc7\xe4\x81\x72\x37\x7b\xfa\xa1\x44\x6c\xac\x35\x26\x43\xab\xf3\x26\xef\xa2\xb5\xf0\x57\x11\x9d\x1d\x2d\xbd\x7f\x4e\x45\x91\xb9\x4a\x38\x4f\x84\xec\xd5\xa1\xdd\xea\xb0\x49\xa4\x1e\xd7\x86\xd4\x48\x7f\xf7\x50\xdd\x43\xb5\x28\x54\x53\x38\x56\x15\x54\x7b\x44\x0a\xc6\xc0\x99\x8d\xf4\x54\xe0\x83\x24\x43\x20\x0f\x5d\xc1\x35\xa6\x1c\xe4\x9a\xc1\x6b\x42\x56\x08\x19\x8f\x45\x88\xd4\x10\x3b\x62\x64\x87\x91\xa7\xd5\xa1\x3c\x95\x6c\x89\xcd\xc9\xac\xfe\x4a\x61\xe4\x0b\xa9\xad\xc5\x47\x0b\xf2\x73\x05\x4f\x33\x0d\x42\x22\x63\xf3\x18\x85\xc4\xd9\x16\x25\xcc\x25\xca\xc2\xe2\x4c\x97\x4d\xb2\x7c\x66\xac\xf6\x8b\x06\x24\x99\xee\xd2\x52\x2b\x2b\xb9\x52\xd2\x2b\x25\xc1\x52\x52\x4c\x7c\x73\x19\xe2\xbc\xf6\x3e\x8d\x7e\x75\xc4\x3e\xa1\x4b\xb0\xff\xd3\x3b\xc9\xca\x9f\x48\x90\xf0\xf0\x26\x3d\xcb\x69\x51\xcf\x32\x3f\xe9\x99\x9b\xb3\x37\xb2\x93\x09\x12\x6b\xd8\xae\x44\x42\x92\x23\x0d\x57\x79\x8f\xfb\x0c\x92\xfc\x68\x95\xa9\x86\xbc\x24\x2b\x55\xd5\x58\x3d\x0b\xf8\xcc\x3c\x61\x49\x8a\xaf\xac\x37\x68\xce\xe9\xd7\x67\xfc\xc6\xb3\xc0\xd3\xdc\xc6\xde\xd1\xaf\xcb\xd1\x97\x70\x0d\x4b\x18\x06\x06\x44\xe3\x42\x72\xd1\x12\x93\x07\x3b\x14\xab\x06\xc7\x66\x94\x3f\xac\x96\x50\x09\x6f\x51\xbd\x65\x56\x44\xc8\x1d\x30\xcd\x7a\x6f\x96\x77\xc7\x2c\xeb\xbd\x49\xde\x9b\xe4\x76\x99\xe4\x0b\xe7\xaf\x40\x69\x0f\xb8\x9e\x98\x65\x1f\xc0\x99\xb9\x98\x6c\x6a\x99\x18\x85\xc6\xec\xdd\x2a\x93\x1c\xf8\x7e\xf8\xdc\x2f\x4b\xfb\x86\x04\x78\x05\x60\x75\x4e\xde\xae\x7a\x50\x69\xf0\x6d\xca\x89\x84\x78\x7a\x4b\x19\xd6\x45\x02\x1f\xbb\x30\x47\xb0\x30\x97\x15\xec\xf1\x7d\x46\x09\xd6\x54\xf0\x59\xab\xee\x61\xca\x2b\xf5\x5d\x99\x5a\xb2\x04\xb4\xd0\x71\x59\x48\x4b\xcc\x15\xc3\x11\x5a\xcf\xad\x31\x28\xab\xf3\x09\x18\x13\x28\x74\x37\xa0\x96\xb4\x74\xbd\xce\xef\xbd\x78\x9a\xc4\xa6\x42\xe8\xf0\x8f\xf5\xb8\xba\xf4\x8f\x9d\x0b\x34\x42\x52\xe0\x3a\x92\x9c\xd5\x79\x04\xa9\x29\xc1\xac\xa8\x3f\xba\x01\x1e\xbc\xc7\xf2\x45\xf8\xe1\x85\x36\x38\xa7\x70\x9e\xbf\x6b\xf0\x26\x33\x07\x1e\x5c\xd1\x70\x4e\xcd\xf4\x4e\x2c\x76\xa5\x09\xc0\xb6\xc3\x69\x9b\x3a\x81\x80\x3b\x20\x19\xe5\x79\x56\x31\xab\x1b\x2a\xe8\x7b\xcb\xf2\xcd\x62\xf1\x34\x9b\xd7\xcf\xe0\x70\x29\x2e\x97\xe5\x34\xca\xcc\x51\xa6\x2f\x6c\x19\x3b\x9f\x61\x94\xb2\xb8\xd2\x0b\xac\x62\x91\x49\x63\xc4\xb0\xea\xd8\x9f\x61\x74\x78\x78\x58\x64\x04\x43\x34\x4d\x06\x49\xcd\xe6\xa1\xf4\x8c\xde\xe4\x66\x25\xa2\xba\xf5\x81\xb7\x55\x56\xe1\xdc\x77\x4a\x58\x3d\xfc\x08\x17\xaa\xad\xe2\x0a\x67\x8f\x2e\xd4\x96\x4a\xac\x07\x3e\x96\x58\x0b\x39\x2f\x3a\x35\xbd\x1c\xca\xef\xb8\xd9\xa2\xdb\x38\xbe\x2f\x9f\xc2\x0d\x7d\x17\xf7\x25\x65\x4c\x34\x9b\x59\x26\x91\x49\xbc\x2e\x64\x4f\x57\xb6\xa5\x2a\x90\x25\xd4\x8b\x0f\xbf\x5f\x6d\x9f\x40\xc3\x55\xed\xa0\x30\xbb\xbd\xaf\x5b\x27\xcb\x6e\xcf\xfe\xba\xa5\xa2\xcc\xe3\x9a\x4e\x9a\x2d\xd0\x8d\x03\xbf\x07\x5a\x53\xee\xb6\x34\xf8\x4a\xdc\x2e\x4f\x97\xb4\xc3\xa8\x3f\x6d\xb6\x38\x37\x8e\xfa\x2f\x01\x4d\x2a\x11\x6b\x10\x8b\x8c\x10\x1f\x2e\xa7\x36\xa8\x23\x74\x86\x09\x01\x06\x11\xda\xd0\x03\x8c\xcf\xad\x1f\x16\x52\xd4\xe5\x98\x9d\x5b\x98\x68\xfa\x88\x35\x58\xc8\x13\x0e\x1d\x50\x90\xa1\x20\x3e\xfc\x61\x77\x6f\x3f\xdf\xdf\xdd\x5e\xdb\x37\x17\xbd\x3f\x16\x2b\xed\x67\xc6\x2e\x0a\x8d\xf5\xd5\x0f\x95\xc9\x38\x5e\x3a\x89\x40\x6b\x7a\xc6\x31\x9c\x76\x83\x33\x8e\x5b\x99\x60\x0c\x79\xde\x65\x80\xe5\x25\xd7\x72\x7c\x45\x81\x39\xad\xf3\xca\x5a\x08\xa6\xa9\x6f\x6b\x78\xd2\x89\xc8\x8a\x16\x88\xf4\x10\x10\x84\xab\x44\x83\x68\x99\x15\x9b\xc3\xf8\x25\x11\x1b\xd1\x55\xe1\x17\x54\x66\x1c\xc9\xe6\x8d\x63\x55\xf8\xfc\x28\xb4\x68\x31\x3c\xd3\x31\x13\x2e\x0c\xd9\x8d\x81\x0c\x6c\x0f\x64\xc2\x7f\xd7\x58\xe9\x2f\xbd\xdb\xb6\xc1\x65\xa5\x35\x0b\xd7\x16\x19\x33\x86\x95\x46\x5f\x7a\xb7\x15\xef\xe0\xc3\xe1\xed\xeb\x12\x63\x57\x06\x48\xb6\x3d\x80\xbc\x16\x6e\x0b\xb1\x98\xe1\xee\xae\x85\x5b\x2b\x3e\x36\xba\xd7\x6d\xb4\xd8\x6a\xe4\xcc\x1d\x76\xa8\x48\x06\x78\xef\xcf\x66\x73\xc9\x30\x99\x83\x25\x19\xa2\x9f\xb0\xe7\xff\x8a\xfe\x14\x01\x27\x85\xde\x50\xd4\x10\x2e\x0c\x13\xd9\xbe\x12\xf4\x8e\xc4\x23\x1b\x2b\x5b\x86\xd2\x2b\x63\x8f\x55\x1b\xed\x71\x06\x66\xef\x82\x96\x7e\xad\x4f\x04\xed\x5d\x90\x7a\x90\x31\x6b\xc4\x8a\x40\x5a\x14\x64\x0b\xc3\xb8\x52\x04\xbe\xd5\x79\xb1\x2a\xc5\x90\x2a\x37\x8f\xd4\x66\xa6\x86\xe6\x6a\x28\xe7\x88\x1b\x9e\x1c\x8a\x27\xde\xe0\xf4\xd0\x6c\x41\x5a\x2a\x97\x4b\x71\xba\x2c\xb7\x51\x25\xd1\x6c\xbc\xb6\xee\xa4\x67\xd0\xf6\xd8\xcf\x70\x45\x76\xb8\xa4\x6d\x0c\x69\xd3\xc4\xd8\x23\x42\xa6\x95\x4e\x26\xad\xb3\xe1\x32\xb4\xa3\xf5\xec\x92\x00\xef\x42\xcf\xb6\x35\xf2\xfb\xd2\xbb\x45\x76\xb8\xa4\xe6\x8b\xb0\x99\xee\xfd\x13\x30\xbf\x85\xce\x3d\x9c\x76\x4b\x5c\x7b\x0a\x87\x4b\x71\xb9\x2c\xa7\x51\x25\x06\x25\x5c\xd9\x45\x5f\x04\x2d\xfd\x46\xdd\xb1\xa3\xc9\xef\xb2\xe5\x28\xde\x73\x62\x7a\x18\xca\xa8\xd7\xd4\x80\x32\x66\x76\xd8\xc6\x17\x8a\xc6\xe7\x83\xd6\xdc\x51\x2e\xe9\x60\x30\x13\xee\x57\x0a\xa3\xbc\x9d\x8f\x46\xd4\xd1\x43\x5b\xc2\x8f\x00\x94\xb6\x3a\xef\xde\x2d\x9d\xbd\x4b\xa3\xac\xb3\x67\x52\xc5\x9d\x8c\xee\x25\x40\xc8\xa4\x39\x8e\xe5\x70\x28\x43\xa0\xee\x50\xbf\x70\xeb\xf8\x4d\x6a\xe3\x92\xc2\x1c\x5b\xc1\x35\xf3\x93\xb9\xb5\x9f\x93\x1d\xaa\x08\x96\xb6\x2f\x18\x25\x63\xab\xc3\xb1\x0e\x64\xf2\x19\xb9\xd4\x77\x97\x1f\x62\x08\xd8\x01\xa9\x6c\xc2\x28\x79\x88\x0f\xde\x1a\xf3\x0e\x78\x48\x68\xab\x28\x4f\x5a\x80\x5e\x0d\xc5\xc8\x8e\xd9\x08\xb2\x88\xf0\x26\x13\x70\x25\x8d\x0e\xfe\x86\x51\x44\xd6\x91\xc3\x15\xc3\x68\x09\x30\x1d\x26\x67\x30\x11\xf5\xe1\xe5\x98\x1d\x44\x7f\x4e\xcf\x31\x47\xb6\x2d\x57\x60\x11\x6a\x5a\xef\x99\x66\xaa\x6e\x2f\x57\x12\x12\x52\x9b\x77\x0f\x26\x96\xa9\x8c\x77\x58\x73\x17\xc7\xa8\x35\x70\xc4\xf2\xa8\x1e\x64\xa1\x53\x70\xd2\xd4\x6a\xed\xe1\x38\xd7\x8e\x71\xe9\x7c\xf6\x0a\xaa\x49\x3b\x46\x53\x32\x2d\xfc\x84\xd3\xe5\x2b\x88\xfa\x42\x6b\xe1\x19\xd0\x49\x31\xb2\x95\x8f\x09\xe5\xae\x01\x15\x11\x2c\xf0\x78\x1e\x42\xf3\x06\x12\x51\xec\x98\x54\xae\xdd\x08\x17\x95\xbe\x65\xba\x1f\x02\x95\xff\x35\x19\x2b\x8e\x67\xc8\x10\x87\xf6\xf6\x17\x13\xca\xa7\x49\x27\x8a\x0c\x97\x9e\x16\xd3\x26\x9b\x97\xc4\xa5\xe6\xea\x7a\x96\x44\x99\xa3\xa7\x26\x4a\x36\x1e\xa8\xec\x06\x3c\x2a\xdd\x99\xef\xe5\x1d\x5f\x5a\x3d\xeb\xf0\x7f\xab\x33\x47\x55\x77\xc4\x64\xdc\x6e\x63\x55\x65\x4a\x04\x4a\xd4\x9d\xac\xc9\x64\xe8\x99\x56\x08\x19\x65\x7c\x98\x65\x38\xf7\x8a\x21\x98\xe2\x82\xd2\x38\xd3\x04\x08\xea\x90\xfd\x77\xe0\x0b\xa9\xcd\x50\xb8\x48\xb8\x25\x40\x8c\x57\x64\x32\xb0\x87\x9f\x6c\x06\xdc\xd5\xe9\x4d\x14\x93\x09\xe7\x8c\xab\x11\x65\xf8\xca\xe2\xd4\xb9\xf4\xe6\xae\x77\x6f\x32\x26\xe5\x7e\xa0\x6d\x3f\x90\xbe\x50\x60\x75\x1c\xea\x52\x9d\x51\x98\x58\xb1\xde\x65\xa8\x4f\xa3\xf5\xee\x73\xe0\xf5\x41\x16\xd0\xbb\x19\xc2\x2d\xd1\xbb\x78\x45\x85\xd5\x27\x35\xbc\x4b\xa2\xcc\xa5\x00\xff\x6c\x0f\xfc\x8d\xb4\xbf\x19\xf0\xf7\xc6\x45\x7c\xce\x1c\x55\xeb\x81\x7f\x33\x9e\x78\x1b\xf4\xba\xab\x25\x3b\x90\xff\xda\xbb\x9d\xf5\xba\x9d\x15\x55\x3f\xae\xc4\xfd\x83\x58\xda\x66\x75\x3f\x4d\x71\x67\x19\xf1\xe7\xda\xf5\xb9\x88\x2f\x9b\xa3\xaa\x45\x9f\x15\x70\x45\xe3\xca\x48\xe3\x8d\x75\x99\x4d\x79\x1e\x63\xb0\x77\x81\x1b\x70\x81\x35\xab\xcc\x62\x16\x29\xa9\x1f\x4d\xc3\xb3\x48\x37\x63\xa3\x14\x12\x30\x46\x7d\x45\xff\x86\x02\x5d\x49\x77\x22\xfd\xb4\x39\x04\x7a\xa0\x14\x76\x9b\xdd\x0a\x37\x03\x87\xf1\xec\xb7\x14\x15\xe6\x21\x9d\xd5\xf9\x77\xbd\x48\xea\x0a\xaf\x2f\xde\x8b\xa7\xfb\xc8\x7f\x84\x80\xea\x63\xee\x44\x57\x73\x47\x00\xcf\x14\x8d\xff\xf2\xbb\xd2\x83\xbf\xc7\xdc\x89\x23\xf9\x9f\xfb\xd9\x91\xfc\x52\x0c\xda\x7f\x89\x41\x7d\xe1\x07\x7e\x4b\xc3\xcf\x4c\xb5\xaa\x03\x7f\x9e\x70\xc0\x0c\x7f\xcf\x14\xed\xc7\xdf\x8d\x70\x60\xb2\x93\xf4\x0c\xf1\xe7\x35\x0a\x7f\x85\x63\xb9\x9a\xf1\x37\xb7\xfd\xf9\x4e\x86\x98\xbb\x60\xba\xff\x99\x25\xdb\x86\x84\xc6\xe5\x53\xbc\xa0\x7a\xa2\xbc\x5c\xbb\x98\xef\xdd\xa1\x5b\x9b\xbf\x4f\xfd\x84\x9e\xcc\xd0\x26\x6c\xdd\xa3\x84\x72\x21\xf8\x2e\x51\xb6\x1e\xc1\x71\x2e\x7a\x0f\xe2\x76\xe4\x93\xdf\x07\x5a\x4f\xeb\xa0\x08\x03\x2c\x27\x17\xca\xec\x2a\xa2\x8e\x2c\x8d\x0f\x06\x24\x10\xa0\x8f\xa0\x6c\x07\x06\x38\x60\x7a\x0d\xaa\x60\xda\xff\xa6\x62\x0c\x1a\x65\xb3\x36\x68\x48\x67\x31\xc8\x84\x5b\x01\x02\xaf\x45\x86\xa6\xef\x0e\xfe\xae\x85\x1b\xa1\xef\x4b\xef\x16\xbd\xfe\x89\xe9\x5f\x2f\xb9\x06\xf9\x93\xab\x7f\xcd\x08\x6e\x9b\x02\xc2\x9a\x0d\x61\x4b\x33\x38\xd1\x29\xfb\xcd\x24\x13\x8d\x5c\x5c\x8b\xd2\x46\x35\x6f\x81\x66\x93\x89\xe3\x2e\x66\xac\xa5\x48\xfc\x70\xfd\xe6\xe2\x7d\xb7\x2e\x24\xd6\x8f\xa7\xc2\x85\x69\x9b\x4b\x4e\x0f\xa2\x73\x21\x9c\x8c\x1b\x0d\xa9\xe9\x2f\xb5\x01\x77\xaa\x41\xe2\x01\x7a\xf8\xf4\xb7\xc9\x50\x7f\x05\x4a\xd3\xc1\xd8\xea\x44\x45\xdc\x05\x21\x9c\x39\xfd\xa6\x60\x71\xbd\xb6\x6d\xf9\x87\xb5\xf6\xa3\x18\x8f\xd2\xa2\xc3\x84\x29\x21\x5a\xf5\xc7\x45\x46\x42\x3e\x78\xc2\x81\xfd\x89\x91\xba\x4e\x8c\xac\xf3\xec\xc7\x54\x9a\x8d\xf6\x4a\xe9\xee\xe5\xdb\x64\xfa\x46\x51\xf7\x3e\xfe\x9d\x5c\x4d\xee\x13\x36\x9b\x02\x88\x0f\x37\xc6\xdd\xdf\x6e\x84\x03\x15\xe4\x03\x0c\xfb\xca\x35\x21\xcf\xba\x9c\x1e\x30\x86\x70\xde\xfe\x75\x8b\x74\x51\x4b\x31\xca\x1d\x4a\xb0\x16\x72\x15\xfd\x6e\x84\x36\xab\x61\x2b\x03\x5e\x11\x5a\x57\x34\x94\xdb\xa3\xd3\x00\x9d\xcb\xf4\x93\x4e\x77\xc9\x56\xa6\x36\x98\x6f\xb6\x40\xa0\x45\x31\x66\xca\x97\xec\xea\x63\xcc\x07\x18\x83\xdc\x07\x98\x1b\x39\x92\x9c\xaa\x0d\xc5\xc3\xd2\x84\xd7\x0d\x85\x27\x5c\xe0\x20\x56\x36\xfb\x28\xf0\xe1\x62\x70\x5c\x81\xe5\xbf\x32\xf2\x7e\xdb\xfa\xd9\xa2\x07\xdc\x41\x37\x58\x12\x29\xd0\xeb\xab\x63\xc3\x42\x9c\xab\xe3\x97\x4a\x9c\xa8\xd5\x06\x38\x6b\x2f\xb7\x69\x4b\xac\x3d\x07\xd8\x93\x2a\x00\x6b\xe4\xc7\x76\x03\xb0\x27\xa6\x80\x3d\x69\x11\x60\x37\xf8\x69\x78\x70\x5a\x05\x60\x8d\x2a\xe3\x76\x03\xb0\xa7\xa6\x80\x3d\x6d\x11\x60\x37\x58\x4f\x33\x78\x5b\x05\x60\x8d\x3e\xb3\xee\x06\x60\xdf\x99\x02\xf6\x6d\x8b\x00\x9b\x61\xa0\xd6\x5c\xc5\x38\x38\xce\x5b\xbb\xb8\x89\x94\x43\xce\xb6\x71\x2d\x48\x47\xa5\xd4\x55\x64\x56\x54\xac\x5b\xf4\x27\x7b\xd1\xd7\xf1\xc1\xbf\x89\xa2\x3f\xdd\x8b\xbe\x8e\x26\x44\x4d\x14\xfd\xdb\xbd\xe8\x2b\x13\x7d\x91\xd3\x86\x35\x8b\x7e\xee\x2b\x9b\x16\x7e\x05\xe1\xe9\x65\xcf\xa8\xe4\x8b\x47\x87\x1e\x5e\xde\xdd\xbe\xef\x1c\xd5\x87\xb6\x5a\xf8\x51\x95\x6e\xf7\x5b\x7c\xdb\xa3\x4a\x51\xc1\xd1\xeb\xcb\x5e\xd7\x30\xd0\xbd\x54\x04\xfb\xd0\xa2\x60\xb7\x66\x05\x68\x74\xc5\xc1\xb4\x0e\xce\xb8\x16\x72\x98\xeb\xa3\x4c\xa2\x10\x53\xf5\x7a\xe4\x7b\xb5\x99\xdc\xc2\x67\x65\xf6\xe8\x29\x5d\x45\x59\xb8\x19\x77\x46\xb1\x85\x0f\xe0\x18\x15\xc7\xe4\xad\xbf\x6c\xca\x37\xd8\x9a\x71\xd7\xf3\x29\x9f\x73\xdd\x21\x83\x9b\x1c\xb9\xad\x3e\x18\xf5\x0d\x45\x28\x99\x9c\xb5\x56\x46\x5d\xbb\xa6\x48\x27\xc0\xb5\x59\xaf\x9f\xe2\x86\x72\xb6\x53\x98\x79\x8c\x3f\x3d\x31\x61\x44\xb9\xd4\x29\xcc\x88\xda\xbc\xab\xd7\xc2\x00\xd8\x09\xb5\xd2\x03\xae\xad\x4e\x04\xb8\x8b\xe7\x0b\x46\x01\x5f\xe0\x81\xa4\x24\x07\x86\xb2\x7e\xf5\xb2\x29\x5d\xc5\x0a\x1f\xab\xdf\x7b\xaa\x0a\xe2\x9c\xb9\x62\x08\x23\x6d\x58\x87\x97\x0b\xc3\xf6\xfb\xef\xcd\xae\x01\x2d\xbc\x99\xad\x04\xaf\x2d\xaa\x32\x4a\x59\x6f\xf5\x55\x46\x4a\x63\x1d\xa8\x7d\x99\xd1\xa6\xea\xd8\x8f\xab\x2c\x64\x1f\x62\x8f\xd1\x7e\x2f\x12\x69\xa3\x4d\x6e\xba\x19\xfb\x14\x2d\xa1\x36\x83\xd4\x96\x42\x99\x19\x21\x93\x51\xab\x05\xdc\xfd\xd6\x7c\x6f\xb3\x39\xe1\x3a\x4f\x84\xb4\x5a\xbc\x1f\xbe\x77\x33\x12\xb0\x4d\xd9\x30\x6f\x4e\xc0\x8a\xf8\xad\x96\x6f\xaf\x9b\xf1\x4b\xec\x4d\xd9\xdd\xec\x5a\x4d\x7a\x4a\x0c\xb1\x3a\x5a\x9c\x5f\xe3\xcc\xcd\x97\x1b\x67\x47\xd1\x2f\x9c\x0d\x30\x81\xce\xab\xff\x07\x00\x00\xff\xff\xe8\xab\xf3\x73\xc2\xc4\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 50370, mode: os.FileMode(0664), modTime: time.Unix(1609150912, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0xbc, 0x65, 0xe9, 0x1b, 0x71, 0xbb, 0x10, 0xa8, 0x95, 0x3c, 0x4c, 0x16, 0x7c, 0xe9, 0xfe, 0x3, 0x26, 0x3a, 0x54, 0x7c, 0xe, 0x11, 0x8d, 0x38, 0x1b, 0x5b, 0xc7, 0xe9, 0x9b, 0xe7, 0x4c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
