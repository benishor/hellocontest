// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (40.358kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x6f\xdb\x38\x12\x7f\xef\x5f\xa1\xd3\x01\x45\x0f\x8b\x24\x4d\xd2\xee\x1d\xb6\xb1\x16\xa9\xb7\xe9\x16\xdb\xb4\xd7\x38\xdb\xf6\xcd\xa0\xa9\xb1\xc4\x86\x22\x55\x92\x8a\xe3\xfb\xeb\x0f\x92\xec\xf8\x43\x1f\x16\x25\xd9\x92\x1c\xbf\x14\xa8\xa4\xa1\x87\x33\xbf\xf9\xe0\x70\xc8\x5c\xfc\xfe\xe0\x51\xe3\x1e\x84\x24\x9c\xf5\xcc\xd3\xe3\x97\xa6\x01\x0c\x73\x9b\x30\xa7\x67\xfe\x7d\x7b\x75\xf4\x1f\xf3\x77\xeb\xd9\xc5\x3f\x8e\x8e\x8c\xf7\xc0\x40\x20\x05\xb6\x31\x21\xca\x35\x1c\x8a\x6c\x30\xce\x8f\xcf\xce\x8e\xcf\x8c\xa3\x23\xeb\xd9\x05\x61\x0a\xc4\x18\x61\xb0\x9e\x19\xc6\x85\x80\x9f\x01\x11\x20\x0d\x4a\x46\x3d\xd3\x51\x77\xbf\x98\x8b\x1f\x3a\x3f\x3e\x7b\x69\x9e\x44\xdf\xf1\xd1\x0f\xc0\xca\xc0\x14\x49\xd9\x33\xdf\xab\xbb\x6f\x84\xd9\x7c\x62\x1a\xc4\xee\x99\x18\x51\x4a\xd8\x98\xcf\x9e\x85\x04\x86\x71\xe1\x0b\xee\x83\x50\x53\x83\x21\x0f\xc2\x8f\xd8\x70\xcc\x71\x20\x4d\xeb\x0a\x51\x09\x17\x27\xf3\x0f\x66\xdf\x63\x97\x50\xdb\x50\x53\x1f\x7a\xa6\x22\x8a\xc2\x08\x89\xd9\x58\xe1\x68\x14\x61\x70\x39\xb5\x41\x9c\xcc\x08\x4e\x22\x8a\x65\xea\xc7\xaf\x13\xec\xbe\x17\xc4\x7e\x1c\x2c\xc9\xdc\x3d\x91\x64\x44\xc1\xb4\x6e\x45\x90\xe0\xac\xcc\x6c\x92\x3c\xa5\xf3\xf5\x11\x8d\x80\x2e\xa4\x28\x89\xc3\xe2\x47\xcb\x64\x25\xf8\x2d\xcb\x73\x1a\x9d\x8b\x28\x71\x98\x69\x49\x85\x84\x2a\x4a\xe4\x21\xe1\x10\x36\xa4\x30\x56\xa6\x75\xa6\x49\x25\x88\xe3\xea\x90\xb9\xf0\xe0\x23\x66\xeb\x89\x23\x90\x30\xf4\x90\xb8\x0b\xfc\x0d\x74\x48\x29\x41\x46\x81\x02\xb9\xfa\x62\xf9\xd5\x6c\x4c\x89\x11\x05\xd3\xb8\x47\x34\x80\x9e\xf9\xca\x3c\x59\x1b\xea\x24\x7d\xac\x8b\x93\x18\x18\x2b\xcf\x7c\x84\xef\x08\x73\xf2\x27\x11\xca\x77\x88\x94\x42\xd8\x35\xad\x97\x45\xa7\xae\xb8\xaf\x4f\x34\x21\xb6\x72\x4d\xeb\x55\xfa\xf7\x17\x27\x09\x7e\x57\x0c\xd4\xd0\x37\x08\xfb\x01\xe3\x83\x31\xec\xc6\x18\x26\x02\xe5\x9a\x41\x93\x08\x3d\x6d\x2d\x42\x31\x67\x8a\x30\x60\xaa\x61\x98\x36\xa9\x9d\x0c\x5c\x6e\x41\xda\x44\x05\xad\x73\x07\x34\x66\x4f\x09\xc4\x24\x45\x0a\x8d\x28\xf4\xcc\x29\x48\xd3\xfa\x70\xfb\xf7\x6f\xc6\xd1\x56\xf5\x55\xd8\x30\x9a\xd1\x17\xfe\xd9\x21\x75\xf5\xbf\x6c\x5b\x5b\x85\x1d\x78\x33\xda\x42\x42\xd0\x0e\xe9\xeb\xf2\xe6\xe6\xe3\xb6\x35\x76\xde\x42\x8d\x0d\xb0\xe0\x94\x82\xbd\xbc\xfe\x92\x81\x0f\x02\xbb\x80\xef\xfa\x9c\x29\x44\x18\x88\x2d\x2b\x51\x87\xac\x54\x3e\x72\x5f\x86\x48\xba\xc8\xe6\x93\x61\xb8\x84\x34\x2d\xc2\x32\xc9\x12\x62\x4e\x17\xf5\x57\x02\x13\x9f\x0b\x65\xae\x7f\x5a\x52\x9e\x1b\x64\x9a\x6b\x18\xa9\x82\x2d\x92\x8a\xa6\x72\x5b\x96\xb0\x90\x2a\x4b\xab\x33\x5b\x37\xe9\xfa\x59\x72\x5e\x0b\x0b\x48\x73\x61\x95\xb5\x56\x55\x73\x95\xb4\x57\x49\x83\x95\xb4\x98\xfa\xcb\x55\x88\x8b\x2e\xb9\xb3\xe8\x37\xad\x52\x1e\xe9\x52\xfc\xff\xfc\x4d\xba\xf1\xa7\x12\xa4\x7c\xdc\x64\xa6\x5d\x38\x1c\x55\x5d\x07\xad\x4e\x72\xe9\xe5\xf2\x8b\xfc\x92\xa0\xc4\x5c\x40\x8b\xeb\x81\x69\x61\x34\x4a\x2f\xd2\x22\x68\x9d\xd5\xc2\xa2\x24\x1b\x8d\x54\xdb\x30\x4b\x44\xcb\x22\x09\x49\x46\x94\xdc\x6d\xda\x58\x30\xa2\x2f\x45\x8c\x48\xd9\x59\xc1\xe2\x10\xde\xb7\x15\xde\x4b\x07\x84\x0a\x1e\xba\x1e\xef\x76\x69\xff\x08\xa4\xf2\x80\xa9\x99\x87\xf3\x01\xec\xa5\x87\xe9\x5e\x8e\xf2\x49\xe8\x4a\x5e\x27\xbc\xdb\xba\x20\x7c\x3f\xfc\xee\xd7\x44\x60\x48\x51\x6e\x00\xa6\x75\x96\x70\xee\x09\xf3\x56\xe0\x0f\x09\xc3\x02\x62\xf6\x12\xc5\x82\x75\x02\x1f\x39\xb0\x42\xb0\xc6\xcb\x06\xf1\xf8\x3e\x25\x18\x29\xc2\xd9\xb2\x4f\xf5\x10\x61\xd5\xc2\x80\x0e\x46\x13\xd1\x33\x0c\x1b\xa9\xcb\xc7\x3f\x81\x52\x6e\x84\xce\x1e\x64\xc2\x46\xb6\x1b\x7a\xde\xf2\x87\x58\x36\x82\x73\x15\xfe\x67\x3b\x81\x26\x7b\x5b\x6a\x8d\x86\x0b\x02\x4c\x45\x9a\x33\xad\x7b\x10\x8a\x60\x44\xcb\x46\x83\x6b\x60\xc1\x5b\x24\x16\xca\x0f\x1f\x74\x21\x34\x84\x7c\x7e\x50\xe0\xcd\x38\x07\x16\x5c\x91\x90\xa7\x76\xc6\x86\xec\xba\xc8\x30\x64\x5b\xd7\x05\x07\xcc\x06\x41\x09\x2b\x32\x8b\x65\xdb\x90\xc1\xc8\x4b\xea\x37\x4f\xc4\xf3\xe5\xda\x28\x47\xc2\x95\xa4\x5c\x55\xd2\x46\xee\x22\x34\x7b\x62\x49\xec\x7c\x82\x49\xc6\xe4\x2a\x4f\xb0\x8e\x49\xa6\x8d\x11\xc3\xca\xfa\x04\x93\xe3\xe3\xe3\x32\x03\x68\x82\x69\x36\x48\xe6\x6a\xcd\xc8\x5e\xb1\xcd\x5e\xd6\xa2\xa9\xcf\x3e\xb0\x8e\xaa\x2a\x64\xfd\x49\xe9\x6a\x80\xee\xe1\x52\x76\x54\x5b\x21\xf3\x06\x92\x7b\xaa\xb0\x01\xf8\x48\x20\xc5\xc5\xaa\xe6\xe4\xfc\x71\xa8\xbe\xd3\x76\x6b\xae\x71\x78\xbf\x7b\x08\xd7\xd2\x7d\x34\x12\x84\x52\xde\x6e\x61\xe9\xa4\x25\xf1\xbc\x8c\xf9\xc4\xf6\xd4\x02\xf2\x74\x7a\xf9\xc7\x87\xab\xbd\xd3\x67\x38\xa9\x27\xa8\xcb\xfe\xe0\xeb\xde\xa9\xb2\x3f\xf8\xba\xa7\x9a\x2c\x12\x97\xce\xda\xad\xcf\xc6\x71\x3f\x00\xa5\x08\x73\x3a\x9a\x78\xa5\xc1\x7e\x3e\xa3\x27\x0c\xfa\xf3\x76\x6b\xb3\x71\xd0\x7f\x09\x48\xda\xe6\x7f\x8b\x44\xa4\x03\xf8\x70\x36\xed\x47\xfa\xf6\xb6\x6e\xab\xd4\x02\x57\x4a\xd8\x79\xc2\x6a\x5b\x35\x30\x66\xbc\x23\xf5\xc0\x4c\x29\x57\x92\x74\x55\x69\x1b\xb5\xf8\x93\x78\x6e\xfd\xd9\x49\x99\xfd\xf1\x2a\xf3\x19\xed\xcc\xb3\x18\xc6\x05\xc2\x18\x28\x44\x61\xcc\xb8\x83\x69\xcf\x24\xa6\x21\x89\xc3\x10\xed\x99\x08\x2b\x72\x8f\x14\x98\x86\xc7\x6d\x32\x26\x20\x42\x8d\xfc\xf1\xd7\xb0\xff\xf9\xd3\xed\xcd\xe7\x8f\xc3\xeb\xcb\xc1\x5f\xeb\xe7\x32\x96\xc6\x6e\x32\xe6\xc4\x18\x19\x60\x2e\xb2\xca\xe2\x69\x52\x6c\x39\x40\xa2\xe9\x1c\xe2\x4e\xb9\xb8\xf3\x27\x50\xbf\x83\x51\x27\x64\xbb\x23\x31\x27\x43\xc2\x95\xa4\x5c\x55\xd2\x46\x2d\xde\x24\x9c\xd9\xe5\x88\x07\x1d\x4d\x61\xad\x88\xf7\xa7\xec\x38\xca\xf7\x1a\xce\x7b\x24\xb4\x7a\xed\xc7\x84\x52\xbd\x3d\x78\x9f\x4b\x12\xb7\x0d\x64\xf4\x33\x6e\xb3\xe9\x9d\x72\xe7\x2b\x81\x49\xd1\x8e\xf7\xa8\x27\x72\x28\xe0\x67\x00\x52\x99\xd6\xeb\xd7\x89\x96\x9c\x2c\xca\x5d\xf6\xca\xd7\xdc\xc1\x7e\x2b\x00\x42\x21\xad\x48\xac\x40\x3c\x71\x81\x38\xae\x5a\x48\xeb\xf4\x65\x66\xc3\x6a\x69\x89\x6d\x90\x9a\x7e\xbb\xdc\xce\x9b\xd7\x5c\x19\xc1\x72\xe8\x73\x4a\xf0\xd4\xb4\x18\x52\x81\x48\x6f\x9d\xc9\xfc\xed\xea\x43\xb8\x80\x6c\x10\x72\x88\x29\xc1\x77\x28\x12\xbb\xb6\xec\x80\x85\x84\x43\x09\x48\x60\xb7\x04\xbd\x74\xf9\x64\x18\x8b\x11\x44\x19\xe5\xcd\x18\x70\x04\xb1\x87\xa1\xd7\x96\xf9\x9d\x48\x1b\x86\x51\x02\x60\x3e\x4c\xc1\x5c\x22\xba\x15\x81\x21\x7a\x14\xfd\xb7\x67\x4a\xa0\x80\x63\xdf\x56\x28\xaf\x08\x2d\x6d\xf0\x48\x33\x37\xb7\xc5\x93\x94\x05\x47\xf3\xe1\x41\xc7\x33\x55\x89\x0e\x19\xe7\x14\x6b\x8b\x0e\x0a\xa9\x40\x8e\xe6\x5d\x67\xf2\xf1\xbf\xdb\xf5\xeb\x5a\xc1\x75\xe5\x04\xf8\x7a\x67\xe5\x46\xb2\xd9\x11\x70\x6d\xba\xa8\x03\xb8\x04\x1d\x84\xe8\xd0\xa6\x52\xdc\x37\xad\x5f\x35\x89\x46\x5c\x29\xee\x69\xd0\x15\x6e\x57\x4c\x23\x96\x3e\xc2\x84\x39\x39\xa7\xf4\xda\x9e\x72\x21\x7c\x37\x4b\x0f\x80\xd9\xfa\xa6\xb8\xe5\xd3\x89\xd1\x35\x2b\x91\x15\x02\x53\x62\xba\x76\xeb\x4a\x1a\x6b\xcd\x59\x61\xc6\xf1\x98\x4d\x46\xa8\x4b\x16\x59\x45\xe1\x64\x73\xcd\x2a\x0a\xd3\x09\x3e\x19\x3e\x82\xbb\x30\x15\xe6\x34\xf0\x58\x11\x42\xfd\x03\x16\xd1\x2a\x2e\x6d\x5b\xb5\x15\xd9\x62\x76\xf1\xe2\xd6\x05\x22\x7e\xd3\x19\x2b\x5e\x5a\x60\x17\x85\xa9\x4f\xa6\x1f\x4b\xa3\x7c\x98\x9d\xd4\xc8\xc9\xae\xb3\x96\x97\xe9\x5e\x29\x75\xaa\x85\x0e\x9e\xa5\x51\x16\xba\x84\x23\xd5\x79\x18\x55\x4b\x61\xef\x42\xf7\xb1\x7a\x2f\x52\xfc\x68\x33\xd7\xe1\xbf\xa6\xb5\x42\xb5\xeb\xc5\x8b\x2e\xa9\xe2\x9c\x2a\xe2\x0f\x15\x3c\xa8\x6c\x50\x1a\xfd\xd9\x9c\x74\x86\x5e\x3a\xac\x90\x3d\x7c\x38\xf0\xce\x20\x98\x83\xa4\xd2\x10\xcc\x30\xca\x9c\x4b\x17\xb6\x0e\x5b\x15\xaa\xec\x06\x7c\x2e\x94\x1e\x72\xd7\x09\xf7\x04\xbc\xf1\x8c\x74\x06\xf6\xd0\xc3\x90\x02\x73\x54\xde\xd9\xd7\x4c\xdd\xcf\x1d\xb2\x16\x65\xf8\x93\xe5\xa9\x0b\xd9\xda\xcd\xe0\x56\x67\x4c\xc2\xfc\x40\x0d\xfd\x40\xf8\x5c\x82\x69\xd9\xc4\x21\x4a\xee\xcc\x56\xb5\xa6\xdf\x8e\x70\x11\x99\xcf\xa7\xc0\x1b\x81\x28\x61\x77\x4b\x84\x7b\x62\x77\xf1\x8c\x4a\x9b\x4f\x66\x4a\x98\x46\x59\xc8\x00\xfe\xd9\x1d\xf8\x67\xe6\xfa\xe9\xfa\x68\x03\xfc\xbd\x69\x99\x98\xb3\x42\xd5\x79\xe0\x5f\x4f\x67\xd1\xc6\x78\xd1\x57\x82\x1e\x89\x7f\x1d\xc2\xce\x76\xc3\x4e\x5a\x53\x86\x58\x34\x65\x38\x02\x8d\x8e\x62\x6d\xeb\xb5\x65\xb4\x25\x9c\xe5\x2e\xd0\xb6\x6c\xcf\x65\x62\xd9\x0a\xd5\x4e\xec\x59\x02\x93\x44\x91\xfb\x32\xdb\x0f\x55\x16\xf2\x45\x9c\xc1\x21\x04\x36\x10\x02\x77\x6c\x32\xeb\x95\xa7\xb4\x83\x66\x2d\xaf\x3c\x5d\x4f\xb5\xca\x4e\x40\x29\xf1\x25\xf9\x1f\x94\xb8\xe9\xe3\x49\x94\xac\x9a\x43\xa0\x07\x52\x22\xa7\xdd\xd7\xcb\xe4\xe0\x30\xe6\x7e\x4f\x51\x91\x53\x11\xca\xac\x22\xfd\x7b\xb7\x48\xea\x73\x6f\xc4\xdf\xf2\x87\xdb\x28\x7e\x84\x80\x1a\x21\x66\x47\x4f\x0b\x67\x00\x8f\x14\xad\x6f\xdc\xd8\x18\xc1\xdf\x22\x66\xc7\x99\xfc\x2f\xa3\xfc\x4c\x3e\x91\x83\x8e\x16\x39\xa8\xcf\xfd\xc0\x6f\x36\xfd\x2c\x5d\xf9\xdc\xb1\x27\x4b\xe2\xcf\xe3\x36\xe8\xe1\xef\x91\xa2\xfb\xf8\xbb\xe6\x36\xcc\x56\x92\x9e\x26\xfe\xbc\x56\xe1\x4f\xcb\xf5\x35\x88\xbf\xb7\x81\x52\xf3\x2e\x1a\x01\x12\xd4\xec\x41\x95\xa0\x76\x13\x8e\xd3\x7a\x2c\x0a\xc0\x40\xee\x41\x0e\x6d\x18\xa3\x80\xaa\x2d\x14\x47\x22\x41\x18\x2f\x9e\x53\xf5\xe6\xdd\xa0\xff\xdc\x51\x6f\x72\x30\x5d\x33\x00\xb5\x32\xcd\x96\x00\x90\x72\xa7\x06\xf8\x7d\xe4\xce\x01\x7c\x91\x18\x0c\xe5\x82\xf1\x65\xf0\x79\x06\x41\xa6\x40\x74\x04\x84\x4d\x16\x75\xbf\x63\x17\x31\x07\x74\xab\x40\xcb\x64\xfb\x50\xd6\x7d\xf7\x10\x4f\x68\x37\x6b\xdd\x42\xb5\x9c\xef\x7d\x37\xc7\xb4\x6b\xc6\xae\x56\x29\xaa\x1d\x05\xcc\x68\x5b\xad\x14\x7c\x13\x94\x9d\x47\x70\xbc\x23\x77\x00\x71\x93\x0e\xb8\xfd\x2d\x9e\x8f\xcd\x9a\x19\xdb\x15\xf5\x37\x6b\x4e\xb8\xb8\x0b\x17\x6c\x8d\xf7\x6b\xea\x97\xda\xe6\xac\x77\xb4\xd6\xf6\x6d\xc6\x7e\x4e\xe5\xb7\x2d\x85\xb3\x1d\x87\x90\x1b\x64\x13\xbe\x9c\x88\xc7\xa7\x53\xfe\xcb\x03\x86\x21\x5c\x92\xd7\x90\x95\x0f\xa2\x21\x9f\x23\xcf\x7f\x13\x8f\xdb\xf6\x08\x93\x4c\xd1\xb5\xb1\x18\x1d\x90\x2f\xc1\xb5\x2d\xd0\x64\x48\x98\x4d\x30\x52\x5c\x94\xbb\xae\x7b\xef\x2b\x67\x09\xd0\x8a\x80\xd5\x84\xd5\x9b\x40\xab\xef\xf3\x80\x4e\x2d\x7a\x47\xf0\xc0\x37\xad\x74\x1f\xb3\x33\x98\x37\x5b\xa0\xeb\x50\x66\xb4\xe5\x3f\xf1\xb8\xc8\x8c\xee\x60\x0a\xa2\xf1\xb4\x68\x8d\xee\x89\x1c\x63\x29\xfc\x07\xf3\xd6\x8f\xb1\x14\x26\x0c\x7f\xce\xe5\x1e\x77\x80\x01\xdf\x78\x56\xbb\x44\xf1\x70\x7c\x5a\x83\xe7\xbf\xd2\x8a\x7e\xfb\x5a\x3a\x1c\x00\xb3\x8d\x6b\x24\xb0\xe0\xc6\x8b\xab\x53\xcd\x8d\x98\xab\xd3\xc5\x4e\x4c\x74\x52\x1a\xec\xad\x6f\xb7\x74\x25\xd3\x5e\x01\xec\x59\x1d\x80\xd5\x8a\x63\x4f\x03\xb0\x67\xba\x80\x3d\xeb\x10\x60\x77\x5c\x19\x5f\x01\xec\x79\x1d\x80\xd5\x6a\x0c\x7d\x1a\x80\x3d\xd7\x05\xec\x79\x87\x00\xbb\xe3\x63\x61\x2b\x80\x7d\x55\x07\x60\xb5\xda\x32\x9f\x06\x60\x5f\xeb\x02\xf6\x55\x87\x00\x9b\xe3\xa0\xb6\xbc\x7f\x33\x3e\x2d\xba\x6b\xd3\x44\xc9\xa1\xe0\xad\x3f\x1d\x28\x47\x65\xec\xf9\xe4\x76\x60\x6f\x5b\xf5\x67\x07\xd5\x37\x7a\x7a\xb9\x41\xd5\x9f\x1f\x54\x5f\x9b\xea\xcb\xb4\x1c\x37\xa8\xfa\x57\x07\xd5\xd7\xa6\x7a\xfd\x03\x84\x3b\x57\xfd\xca\x1e\x9b\xe2\x7e\x1d\xe9\xa9\xd6\x16\x7f\xdc\xed\xb1\xf8\xe9\xee\x6d\x73\xd4\x9f\xd9\x2a\xee\x47\x8d\x72\xfd\x6f\xf1\x6b\x8f\x48\x49\x38\x2b\x93\xe6\xbe\xee\x50\x9a\xbb\x63\xe8\xb7\xba\x69\xa0\xf4\xdf\x7f\x76\x0b\x6d\xc7\xa4\x2a\x31\xd3\xa2\x27\xbe\xb7\x33\x67\x5b\xfa\xc8\xe1\x01\x3d\x49\xf4\xe4\xdc\x12\x97\x4a\x56\xf6\x32\xd4\x9c\x26\x0b\x1f\xc0\xd6\x3a\xd9\xf8\x23\x90\x8a\x8c\xa7\xa6\x15\xed\x55\xb5\x7f\xf7\x75\xc7\xb8\x1b\xf8\x84\xad\x04\xed\x50\xc0\x6d\xce\xd9\x36\x86\xbb\xfe\x37\x23\x42\xc9\xec\x94\x8d\xd4\xba\xaf\x61\x8e\x74\x0c\x4c\xe9\x9d\xf2\x2e\xef\x28\x97\xef\x88\xd0\xcf\xee\xe7\x7d\x9c\x5a\x94\x89\x3b\x22\xb4\xa8\xf5\xef\x73\x58\x1b\x00\x2d\xfd\xa5\xfb\xb5\x3f\x7d\xaf\x95\xeb\x05\x1e\x08\x82\x0b\x60\x28\x91\xc8\xc8\x3d\xba\x4f\xe2\x10\xa9\x6a\xc8\x73\x56\xda\x20\xb4\xac\x61\x1b\x51\x2e\xcc\xd8\x6f\xbf\xb7\x7f\x45\x5a\x0b\xf4\x3a\xd4\x2a\x94\xb1\x14\xdd\xdc\x2a\xb4\x3a\xc7\xa5\x97\x8b\x17\x17\x27\xd1\xbd\xe1\x63\x84\xc1\x7a\xf6\xff\x00\x00\x00\xff\xff\x06\x98\x7e\x02\xa6\x9d\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 40358, mode: os.FileMode(0664), modTime: time.Unix(1605427125, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x9f, 0x5, 0xc6, 0x5c, 0xdb, 0x4c, 0xc, 0xba, 0xa9, 0x48, 0x10, 0x67, 0x98, 0x65, 0x19, 0x5b, 0x18, 0xf5, 0x2b, 0x1, 0x7e, 0x82, 0xb1, 0xfa, 0x96, 0x47, 0xdc, 0x9c, 0x95, 0x95, 0xdb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
