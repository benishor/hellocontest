// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (42.474kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x73\xdb\x36\x12\x7f\xcf\x5f\xc1\xe3\xcd\x74\x7a\xd3\xb1\x1d\xdb\x49\xef\xa6\xb5\xd9\x71\xd4\xb8\xcd\x34\x4e\x2e\x96\x9b\xe4\x4d\x03\x81\x6b\x12\x11\x08\x30\x00\x68\xd9\xf7\xd7\xdf\x80\x94\xac\x0f\x7e\x88\xa0\x28\x91\x94\xf4\x92\x99\x90\x5c\x08\xd8\xfd\xed\x07\x16\xbb\xf0\xc5\x6f\x8f\x01\xb5\x1e\x40\x48\xc2\xd9\xa5\x7d\x7a\xfc\xd2\xb6\x80\x61\xee\x12\xe6\x5d\xda\x7f\xdf\x5d\x1f\xfd\xc7\xfe\xcd\x79\x71\xf1\x8f\xa3\x23\xeb\x0f\x60\x20\x90\x02\xd7\x1a\x13\xe5\x5b\x1e\x45\x2e\x58\xe7\xc7\x67\x67\xc7\x67\xd6\xd1\x91\xf3\xe2\x82\x30\x05\xe2\x1e\x61\x70\x5e\x58\xd6\x85\x80\xef\x11\x11\x20\x2d\x4a\x86\x97\xb6\xa7\x46\x3f\xd9\xb3\x1f\x3a\x3f\x3e\x7b\x69\x9f\xc4\xdf\xf1\xe1\x37\xc0\xca\xc2\x14\x49\x79\x69\xff\xa1\x46\x5f\x08\x73\xf9\xd8\xb6\x88\x7b\x69\x63\x44\x29\x61\xf7\x7c\xf2\x4c\x13\x58\xd6\x45\x28\x78\x08\x42\x3d\x59\x0c\x05\xa0\x3f\x62\x83\x7b\x8e\x23\x69\x3b\xd7\x88\x4a\xb8\x38\x99\x7e\x90\xfd\x3d\xc2\x18\x42\x55\x4c\x82\x7d\x42\x5d\x4b\x3d\x85\x70\x69\x2b\xa2\x28\x0c\x91\x98\xfc\xbc\x1e\x90\x22\x0c\x3e\xa7\x2e\x88\x93\x09\xc1\x49\x4c\x31\x4f\xfd\xfc\x75\x6a\x85\x7f\x08\xe2\x3e\x0f\x96\x9e\xdf\x03\x91\x64\x48\xc1\x76\xee\x44\x94\x9a\x59\x15\x06\xa4\xe7\x94\x3d\xaf\xf7\x68\x08\x74\xc6\x78\x49\x3c\x96\x3c\x9a\x27\xab\x30\xdf\xaa\x73\xce\xa2\xf3\x11\x25\x1e\xb3\x1d\xa9\x90\x50\x65\x89\x02\x24\x3c\xc2\x06\x14\xee\x95\xed\x9c\x19\x52\x09\xe2\xf9\x26\x64\x3e\x3c\x86\x88\xb9\x66\xec\x88\x24\x0c\x02\x24\x46\x51\xb8\x82\x0e\x29\x25\xc8\x30\x52\x20\x17\x5f\xcc\xbf\x9a\x8c\x29\x31\xa2\x60\x5b\x0f\x88\x46\x70\x69\xbf\xb2\x4f\x96\x86\x3a\xc9\x1e\xeb\xe2\x24\x01\xc6\xc2\xb3\x10\xe1\x11\x61\x5e\xf1\x22\x34\x7f\x07\x48\x29\x84\x7d\xdb\x79\x59\x76\xe9\x8a\x87\xe6\x44\x63\xe2\x2a\xdf\x76\x5e\x65\x7f\x7f\x71\x92\x9a\xef\x82\x82\x5a\xe6\x0a\xe1\x3e\x62\x7c\x50\x86\xed\x28\xc3\x58\xa0\x42\x35\x68\x12\xa1\xa7\xad\x45\x28\xe6\x4c\x11\x06\x4c\x35\x0c\xd3\x26\xa5\x93\x83\xcb\x0d\x70\x9b\xa8\xa8\x75\xe6\x80\x26\xd3\x53\x02\x31\x49\x91\x42\x43\x0a\x97\xf6\x13\x48\xdb\x79\x77\xf7\xf7\x2f\xd6\xd1\x46\xe5\x55\x5a\x31\x9a\x91\x17\xfe\xde\x21\x71\xf5\x3e\x6d\x5a\x5a\xa5\x0d\x78\x33\xd2\x42\x42\xd0\x0e\xc9\xeb\xea\xf6\xf6\xfd\xa6\x25\x76\xde\x42\x89\xf5\xb1\xe0\x94\x82\x3b\xbf\x65\x93\x51\x08\x02\xfb\x80\x47\x3d\xce\x14\x22\x0c\xc4\x86\x85\x68\x42\x56\x29\x1e\x79\xa8\x42\x24\x7d\xe4\xf2\xf1\x40\x6f\x21\x6d\x87\xb0\x5c\xb2\x14\x9b\xb3\x59\xfd\x99\xc0\x38\xe4\x42\xd9\xcb\x9f\x56\xe4\xe7\x0a\x9e\x16\x2a\x46\x26\x63\xcb\x84\xa2\x99\xb3\xad\x4a\x58\x4a\x94\x95\xc5\x99\x2f\x9b\x6c\xf9\xcc\x19\xaf\x99\x06\x64\x99\xb0\xb5\xa5\xb6\xae\xe4\xd6\x92\xde\x5a\x12\x5c\x4b\x8a\x99\xbf\xbc\x0e\x71\xd9\x2d\x77\x1e\xfd\xaa\x5d\xca\x33\x5d\x86\xfd\x9f\xbe\xc9\x56\xfe\x4c\x82\x8c\x8f\x9b\x8c\xb4\x4b\xbb\xa3\x75\xf7\x41\x8b\x8b\x9c\x7b\x39\xff\xa2\x38\x8b\x28\x31\x17\xb0\x5b\x29\xc4\x2c\xcf\x1b\x47\x24\x59\x4e\xb7\xce\x04\x63\x59\x92\x95\x7a\x6d\xac\xcb\x15\x1c\x6c\x99\x18\x26\xc7\xb1\x6e\x37\xd2\x2c\x19\x04\xcc\x39\x99\x58\xd8\x79\xfe\xe5\x10\x11\x6c\x2a\x22\x58\xc3\x87\xa4\xf0\x0b\x14\x70\x2c\x46\x73\x5a\x25\x10\x1e\x0d\xb4\x58\x15\xb8\x03\x4a\xd8\x68\xb5\x84\xd6\x70\x2b\xf5\x9b\x64\x81\xd4\x1e\x58\x64\xbd\xca\xbb\x83\x55\xde\x1f\xab\xfc\x2c\xf0\x83\x65\x3e\x58\xe6\xee\x58\xe6\x2b\xf7\x5b\x24\x55\x00\x4c\x4d\x02\xe6\x10\xc0\x9d\x7b\x98\x6d\x72\x29\x1f\x6b\x83\xf6\x7a\x95\x69\x8e\xc2\x50\x7f\xf7\x73\x6a\x9f\x91\x01\xaf\x08\x6c\xe7\x2c\xb5\x57\x48\x09\x48\x41\x38\x20\x0c\x0b\x48\xa6\x97\xca\x3d\x2f\x13\x84\xc8\x83\x05\x82\xa5\xb9\xac\x60\x4f\x18\x52\x82\x91\x22\x9c\xcd\x5b\xf7\x00\x11\x56\xab\x0f\x2b\xd4\x92\x14\xd0\xb4\x03\xcb\xcc\x46\xfe\x09\x94\x72\x4b\xbb\x1c\x90\x29\x2d\xdd\xac\x13\x7c\xc3\x1f\x27\x86\x90\x73\xa5\xff\xb3\x19\x77\x97\x5f\xe5\xb0\x44\xc3\x05\x01\xa6\x62\xc9\xd9\xce\x03\x08\x45\x30\xa2\x55\x7d\xd2\x0d\xb0\xe8\x0d\x12\x33\xe1\xeb\x07\x5d\x70\x50\x7a\x9e\xef\x14\x04\x93\x99\x03\x8b\xae\x89\x9e\x53\x3b\xbd\x53\x7e\x9a\x7d\xa0\xa7\x6d\xea\x04\x22\xe6\x82\xa0\x84\x95\x59\xc5\xbc\x6e\xc8\x68\x18\xa4\xe5\x5b\xc4\xe2\x69\xf6\x6f\x58\xc0\xe1\xb5\xb8\xbc\x2e\xa7\xad\xc2\x9c\x66\xfe\xc2\xd2\xd8\xf9\x00\xe3\x9c\xc5\xad\xbd\xc0\x3a\x16\x99\x35\x46\x02\x2b\xe7\x03\x8c\x8f\x8f\x8f\xab\x0c\x60\x08\xa6\xc9\x20\xb9\xc9\x3f\x2b\x3f\x01\x38\x79\x59\x8b\xa4\x3e\x86\xc0\x3a\x2a\x2a\x3d\xf5\xbd\x92\x55\x1f\x3d\xc0\x95\xec\xa8\xb4\xf4\xe4\x2d\x24\x77\x54\x60\x7d\x08\x91\x40\x8a\x8b\x45\xc9\xc9\xe9\x63\x2d\xbe\xd3\x76\x4b\xae\x71\x78\xbf\x7d\xd4\x3b\xfa\x1e\x1a\x0a\x42\x29\x6f\x37\xb3\x4c\xc2\x92\x64\x5d\xd6\x74\x61\x3b\xaa\x01\x45\x32\xbd\xfa\xfd\xdd\xf5\xce\xc9\x53\x2f\x6a\x0f\x65\xd9\xeb\x7f\xde\x39\x51\xf6\xfa\x9f\x77\x54\x92\x65\xfc\xd2\x59\xbb\xe5\xd9\x38\xee\xfb\xa0\x14\x61\x5e\x47\x03\xaf\x2c\xd8\x4f\x57\xb4\xc7\xa0\x3f\x6f\xb7\x34\x1b\x07\xfd\xa7\x88\x64\xd5\x92\xb5\x88\x45\x26\x80\xd7\xab\x69\x3f\xd2\x37\x57\x09\xb4\x4e\x2e\x70\x21\x85\x5d\xc4\xac\xb6\x65\x03\x93\x89\x77\x24\x1f\x98\xcb\xe5\xb5\x38\xbd\x2e\xb7\xad\x5a\xec\x49\xb2\xb6\xde\xa4\x57\x73\x77\xac\xca\x74\x45\x5b\xb3\x2c\x96\x75\x81\x30\x06\x0a\xb1\x1b\xb3\x46\xf0\x74\x69\x13\xdb\x92\xc4\x63\x88\x5e\xda\x08\x2b\xf2\x80\x14\xd8\x56\xc0\x5d\x72\x4f\x40\x68\x89\xfc\xfe\xd7\xa0\xf7\xf1\xc3\xdd\xed\xc7\xf7\x83\x9b\xab\xfe\x5f\xcb\x6d\x7e\x73\x63\x37\xe9\x73\x12\x8c\xf4\x31\x17\x79\x69\xf1\x2c\x2e\xb6\x1c\x20\xf1\x72\xda\xef\x77\xea\x93\xdf\xad\x46\xdf\xce\x88\xef\x53\xff\xa3\xa5\x57\xd4\x7e\x09\xb6\x33\x72\xf8\x13\x68\xd8\xc1\xb8\x41\x4f\xbb\x23\x51\x43\x0e\x87\xd7\xe2\xf2\xba\x9c\xb6\x6a\xb1\x27\x7a\x65\x57\x43\x1e\x75\x74\x13\xe2\xc4\x73\xdf\x67\xc3\x51\xbd\xf9\x60\x5a\xe5\x62\xd4\x7c\x77\x4f\x28\x35\xab\xa2\x08\xb9\x24\x49\xe1\x47\x4e\x83\xc3\x26\xbb\xe0\x28\xf7\x3e\x13\x18\x97\x6d\x81\x8b\x9b\x24\x06\x02\xbe\x47\x20\x95\xed\xbc\x7e\x9d\x2a\xaa\xca\xa3\xdc\x66\xf3\x5c\xcd\x2d\x6d\x77\x02\x40\x33\x69\x81\x63\x25\xfc\x89\x0f\xc4\xf3\xd5\x8c\x5b\xa7\x2f\x73\x3b\x58\x2a\x73\x6c\x05\xd7\xcc\x4b\x2e\xb7\x5e\x00\xe9\xcb\x18\x96\x83\x90\x53\x82\x9f\x6c\x87\x21\x15\x89\xec\xe2\xa7\xdc\xdf\x5e\x7f\x08\x1f\x90\x0b\x42\x0e\x30\x25\x78\x94\x54\x54\x1a\xf3\x0e\x98\x26\x1c\x48\x40\x02\xfb\x15\xe8\xa5\xcf\xc7\x83\x84\x8d\x20\xaa\x08\x6f\x32\x01\x4f\x90\xb8\xa2\x53\x07\x11\x45\xb5\x64\x2b\x86\x51\x02\x60\x3a\x4c\xc9\x58\x22\xbe\x59\x89\x21\x7a\x14\xff\x77\x5a\xa0\x1a\xdb\xb6\x52\x71\x85\xd6\xb4\xfe\x33\xcd\x54\xdd\x66\x4f\x32\xb6\x8c\xcd\xbb\x07\x13\xcb\xb4\x8e\x77\xc8\xb9\xb8\xa0\x36\xef\xa0\x90\x8a\xe4\x70\x5a\x37\x28\x9f\xff\xbb\x59\xbb\x6e\xe4\x5c\x17\xae\x84\x59\xae\x8d\x5d\x49\x36\xb9\x13\xc6\x98\x2e\xae\x22\xaf\x40\x07\x1a\x1d\xc6\x54\x8a\x87\xb6\xf3\xb3\x21\xd1\x90\x2b\xc5\x03\x03\xba\xd2\x05\xa7\x59\xc4\x32\x44\x98\x30\xaf\xa0\x6d\xbf\xed\x21\x17\xc2\xa3\x49\x78\x00\xcc\x35\x57\xc5\x0d\x5f\x57\x10\xdf\xbb\x16\x6b\x21\x30\x25\x9e\x96\xae\x61\xcb\x9a\x5a\x73\x5a\x98\xd3\x2f\xbb\x4a\x09\x4d\xc9\x62\xad\x28\x1d\x6c\x2e\x69\x45\x69\x3a\xc1\xc7\x83\x67\x70\x97\xa6\xc2\x9c\x46\x01\x2b\x43\x68\xde\xa8\x13\xef\xe2\xb2\x0e\xc6\x5b\x11\x2d\xe6\x27\x2f\xee\x7c\x20\xe2\x17\x93\xb1\x92\xad\x05\xf6\x91\x0e\x7d\x72\xed\x58\x16\xe5\xe3\xa4\xdb\xa7\x20\xba\xce\xdb\x5e\x66\x5b\xa5\xcc\xa5\x96\xea\x44\xcf\xa2\x2c\x75\x2b\x57\xa6\xf1\xb0\xd6\x4d\x85\xbd\xd5\xe6\x63\xf1\xa2\xc4\xe4\xd1\xea\x59\xeb\x7f\x6d\x67\x81\x6a\xdb\x9b\x17\xe3\x96\x26\xce\xa9\x22\xe1\x40\xc1\xa3\xca\x07\xa5\xd5\x9b\xac\xc9\x64\xe8\xb9\x76\x93\xfc\xe1\xf5\xc0\x5b\x83\x60\x01\x92\x2a\x43\x30\x47\x29\x0b\x6e\x61\xda\x38\x6c\x95\x16\xd9\x2d\x84\x5c\x28\x33\xe4\x2e\x13\xee\x08\x78\x93\x15\x99\x0c\x1c\xa0\xc7\x01\x05\xe6\xa9\xa2\xcb\x30\x72\x65\x3f\x35\xc8\x46\x94\xfa\x27\xab\x53\x97\xd2\xb5\xdb\xfe\x9d\xc9\x98\x84\x85\x91\x1a\x84\x91\x08\xb9\x04\xdb\x71\x89\x47\x94\xdc\x9a\xae\x1a\x2d\xbf\x1d\xee\x22\x56\x9f\x0f\x51\x30\x04\x51\x41\xef\xe6\x08\x77\x44\xef\x92\x15\x55\x56\x9f\xdc\x90\x30\x8b\xb2\x94\x02\xfc\xb3\x3b\xf0\xcf\x8d\xf5\xb3\xe5\xd1\x06\xf8\x07\x4f\x55\x7c\xce\x02\x55\xe7\x81\x7f\xf3\x34\xf1\x36\xd6\x8f\x3d\x25\xe8\x91\xf8\xd7\xc1\xed\x6c\xd6\xed\x64\x95\xd5\x88\x59\x59\x8d\x27\xd0\xf0\x28\x91\xb6\x59\x61\x4d\x5b\xdc\x59\xe1\x06\x6d\xc3\xfa\x5c\xc5\x97\x2d\x50\x6d\x45\x9f\x25\x30\x49\x14\x79\xa8\x72\xfc\xb0\xce\x46\xbe\x8c\x31\x38\xb8\xc0\x06\x5c\xe0\x96\x55\x66\x39\xf3\x94\xd5\x2a\xd8\xf2\xcc\xd3\xcd\x93\x51\xda\x09\x28\x25\xa1\x24\xff\x83\x0a\xb7\xc5\xec\x45\xca\xaa\x39\x04\x06\x20\x25\xf2\xda\x7d\x45\x51\x01\x0e\x93\xd9\xef\x28\x2a\x0a\x32\x42\xb9\x59\xa4\x7f\x6f\x17\x49\x3d\x1e\x0c\xf9\x1b\xfe\x78\x17\xfb\x0f\x0d\xa8\x21\x62\x6e\xfc\xb4\x74\x04\xf0\x4c\xd1\xfa\xc2\x8d\x95\x1e\xfc\x0d\x62\x6e\x12\xc9\xff\x34\x2c\x8e\xe4\x53\x31\xe8\x70\x16\x83\x86\x3c\x8c\xc2\x66\xc3\xcf\xca\x99\xcf\x2d\x5b\xb2\x34\xfe\x02\xee\x82\x19\xfe\x9e\x29\xba\x8f\xbf\x1b\xee\xc2\x64\x27\x19\x18\xe2\x2f\x68\x15\xfe\x8c\x4c\x5f\x83\xf8\x7b\x13\x29\x35\xad\xa2\x11\x20\x41\x4d\x1e\xac\xe3\xd4\x6e\xf5\x38\xad\xc7\xa2\x00\x0c\xe4\x01\xe4\xc0\x85\x7b\x14\x51\xb5\x81\xe4\x48\xcc\x08\xeb\xc7\x1f\xa8\xfa\xf5\x6d\xbf\xf7\x83\xa7\x7e\x2d\xc0\x74\xcd\x00\x34\x8a\x34\x5b\x02\x40\xca\xbd\x1a\xe0\xf7\x9e\x7b\x07\xf0\xc5\x6c\xb0\x94\x0f\xd6\xa7\xfe\xc7\x09\x04\x99\x02\xd1\x11\x10\x36\x99\xd4\xfd\x8a\x7d\xc4\x3c\x30\xcd\x02\xcd\x93\xed\x42\x5a\xf7\xed\x63\xb2\xa0\xed\xec\x75\x4b\xe5\x72\xbe\xf6\xfc\x02\xd5\xae\x19\xbb\x46\xa9\xa8\x76\x24\x30\xe3\x63\xb5\x4a\xf0\x4d\x51\x76\x1e\xc1\xc9\x89\xdc\x01\xc4\x4d\x1a\xe0\xf6\x97\x78\x3e\x17\x6b\xe6\x1c\x57\xd4\x5f\xac\x39\xe6\x62\xa4\x37\x6c\x8d\xd7\x6b\x9a\xa7\xda\xa6\x53\xef\x68\xae\xed\xcb\x64\xfa\x05\x99\xdf\xb6\x24\xce\xb6\xec\x42\x6e\x91\x4b\xf8\x7c\x20\x9e\x74\xa7\xfc\x97\x47\x0c\x83\xde\x92\xd7\x10\x95\xf7\xe3\x21\x7f\x40\x41\xf8\x6b\x32\x6e\xdb\x3d\x4c\x3a\x44\x37\xc6\x62\x7c\xc5\x41\x85\x59\xbb\x02\x8d\x07\x84\xb9\x04\x23\xc5\xc5\x2a\xfa\x3d\xcd\x9c\xa5\x40\x2b\x22\x56\x13\x56\x6f\x23\xa3\xba\xcf\x03\x3a\x8d\xe8\x3d\xc1\xa3\xd0\x76\xb2\x6d\xcc\xd6\x60\xde\x6c\x82\xae\x43\x91\xd1\x86\xff\xe6\xf3\x2c\x32\x1a\xc1\x13\x88\xc6\xc3\xa2\x25\xba\x3d\x69\x63\x29\xfd\x17\x74\x97\xdb\x58\x4a\x13\xea\x9f\xf3\x79\xc0\x3d\x60\xc0\x57\xf6\x6a\x57\x48\x1e\xde\x9f\xd6\x60\xf9\xaf\x8d\xbc\xdf\xae\xa6\x0e\xfb\xc0\x5c\xeb\x06\x09\x2c\xb8\xf5\xe3\xf5\xa9\xe1\x41\xcc\xf5\xe9\xec\x24\x26\xee\x94\x06\x77\xe3\xc7\x2d\x5d\x89\xb4\x17\x00\x7b\x56\x07\x60\x8d\xfc\xd8\x7e\x00\xf6\xcc\x14\xb0\x67\x1d\x02\xec\x96\x33\xe3\x0b\x80\x3d\xaf\x03\xb0\x46\x85\xa1\xfb\x01\xd8\x73\x53\xc0\x9e\x77\x08\xb0\x5b\x6e\x0b\x5b\x00\xec\xab\x3a\x00\x6b\x54\x96\xb9\x1f\x80\x7d\x6d\x0a\xd8\x57\x1d\x02\x6c\x81\x81\xda\xf0\xf9\xcd\xfd\x69\xd9\x53\x9b\x26\x52\x0e\x25\x6f\xfd\xe9\x40\x3a\x2a\xe7\xcc\xa7\xb0\x02\x7b\xd3\xa2\x3f\x3b\x88\xbe\xd1\xee\xe5\x06\x45\x7f\x7e\x10\x7d\x6d\xa2\xaf\x52\x72\xdc\xa0\xe8\x5f\x1d\x44\x5f\x9b\xe8\xcd\x1b\x08\xb7\x2e\xfa\x85\x33\x36\xc5\xc3\x3a\xc2\x53\xa3\x23\xfe\xa4\xda\x63\xf6\xd3\xdd\x3b\xe6\xa8\x3f\xb2\x55\x3c\x8c\x0b\xe5\x7a\x5f\x92\xd7\x01\x91\x92\x70\x56\x25\xcc\x7d\xdd\xa1\x30\x77\xcb\xd0\x6f\x75\xd1\x40\xe5\xbf\x21\xee\x97\x3a\x8e\xc9\x14\x62\xae\x46\x8f\xc3\x60\x6b\xc6\xb6\x72\xcb\xe1\x01\x3d\x69\xf4\x14\xdc\x12\x97\x49\x56\xf5\x32\xd4\x82\x22\x8b\x10\xc0\x35\xea\x6c\xfc\x16\x49\x45\xee\x9f\x6c\x27\x3e\xab\x6a\xff\xe9\xeb\x96\x71\xd7\x0f\x09\x5b\x70\xda\x9a\xc1\x6d\x8e\xd9\x56\xba\xbb\xde\x17\x2b\x46\xc9\xa4\xcb\x46\x1a\xdd\xd7\x30\x45\x3a\x06\xa6\xcc\xba\xbc\xab\x1b\xca\xf9\x3b\x22\xcc\xa3\xfb\x69\x1d\xa7\x11\x65\xea\x8e\x08\x23\x6a\xf3\xfb\x1c\x96\x06\x40\xae\xd6\xca\xe4\x6f\xfb\xc7\x80\xbb\x7a\x7e\x60\x14\xeb\x45\x01\x08\x82\x4b\x60\x28\x15\xc8\xc8\x1d\xba\x4f\xe2\xe0\xa9\x6a\x88\x73\x16\xca\x20\x8c\xb4\x61\x13\x5e\x4e\x47\xec\x77\x5f\xdb\xbf\x23\xad\x05\x7a\x1d\x2a\x15\xca\xd9\x8a\xae\x2e\x15\x5a\x5c\xe3\xdc\xcb\xd9\x8b\x8b\x93\xf8\xde\xf0\x7b\x84\xc1\x79\xf1\xff\x00\x00\x00\xff\xff\x1d\x60\x3c\x4b\xea\xa5\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 42474, mode: os.FileMode(0664), modTime: time.Unix(1606515003, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xdc, 0xce, 0x72, 0x91, 0x90, 0x8d, 0x3d, 0xca, 0x9, 0x69, 0xd8, 0x1, 0xd3, 0x9e, 0x53, 0x51, 0x80, 0x76, 0xa2, 0x17, 0xc0, 0x2b, 0x1e, 0x6, 0x4, 0xb8, 0xd6, 0xad, 0x7c, 0xed, 0x37}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
