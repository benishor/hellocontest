// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (41.457kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x6f\xdb\x38\x12\x7f\xef\x5f\xa1\xd3\x01\x8b\x1e\x16\x49\x9a\xa4\xdd\x3b\x5c\x13\x2f\x52\x6f\xd3\x5d\x6c\xd3\x5e\xe3\x5c\xdb\x37\x81\xa6\x26\x12\x6b\x8a\xd4\x92\x54\x9c\xdc\x5f\x7f\xa0\x24\xc7\x1f\xfa\xb0\x28\xcb\xb6\x64\xfb\xa5\x40\x25\x0d\x4d\xce\xfc\xe6\x83\xc3\x19\xe6\xe2\xd7\xc7\x80\x5a\x0f\x20\x24\xe1\xec\xd2\x3e\x3d\x7e\x65\x5b\xc0\x30\x77\x09\xf3\x2e\xed\xff\xde\x5d\x1f\xfd\xcb\xfe\xb5\xf7\xe2\xe2\x6f\x47\x47\xd6\x07\x60\x20\x90\x02\xd7\x1a\x13\xe5\x5b\x1e\x45\x2e\x58\xe7\xc7\x67\x67\xc7\x67\xd6\xd1\x51\xef\xc5\x05\x61\x0a\xc4\x3d\xc2\xd0\x7b\x61\x59\x17\x02\xfe\x8a\x88\x00\x69\x51\x32\xbc\xb4\x3d\x35\xfa\xd9\x9e\xfe\xd0\xf9\xf1\xd9\x2b\xfb\x24\xfe\x8e\x0f\x7f\x00\x56\x16\xa6\x48\xca\x4b\xfb\x83\x1a\x7d\x23\xcc\xe5\x63\xdb\x22\xee\xa5\x8d\x11\xa5\x84\xdd\xf3\xf4\x99\x26\xb0\xac\x8b\x50\xf0\x10\x84\x7a\xb2\x18\x0a\x40\x7f\xc4\x9c\x7b\x8e\x23\x69\xf7\xae\x11\x95\x70\x71\x32\xf9\x20\xff\x7b\x84\x31\x84\xaa\x9c\x04\xfb\x84\xba\x96\x7a\x0a\xe1\xd2\x56\x44\x51\x18\x22\x91\xfe\xbc\x1e\x90\x22\x0c\x3e\xa7\x2e\x88\x93\x94\xe0\x24\xa6\x98\xa5\x7e\xfe\x3a\xb3\xc2\x0f\x82\xb8\xcf\x83\x65\xe7\xf7\x40\x24\x19\x52\xb0\x7b\x77\x22\xca\xcc\xac\x0e\x03\xb2\x73\xca\x9f\xd7\x47\x34\x04\x3a\x65\xbc\x24\x1e\x4b\x1e\xcd\x92\xd5\x98\x6f\xdd\x39\xe7\xd1\xf9\x88\x12\x8f\xd9\x3d\xa9\x90\x50\x55\x89\x02\x24\x3c\xc2\x1c\x0a\xf7\xca\xee\x9d\x19\x52\x09\xe2\xf9\x26\x64\x3e\x3c\x86\x88\xb9\x66\xec\x88\x24\x38\x01\x12\xa3\x28\x34\xa3\x1b\x0b\xb4\x8c\x02\x29\x25\xc8\x30\x52\x20\xe7\x5f\xcc\xbe\x4a\x47\x93\x18\x51\xb0\xad\x07\x44\x23\xb8\xb4\x5f\xdb\x27\x0b\x43\x9d\xe4\x8f\x75\x71\x92\x40\x69\xee\x59\x88\xf0\x88\x30\xaf\x7c\xfa\x5a\x22\x0e\x52\x0a\x61\xdf\xee\xbd\xaa\xba\x68\xc5\xc3\x65\x44\x17\x27\x99\xdf\x9f\x53\x51\xcb\x5c\x25\xdc\x47\x8c\x0f\xea\xd0\x6d\x75\xd8\x26\x52\x4f\x37\x86\xd4\x58\x7f\x0f\x50\x3d\x40\xb5\x2e\x54\x0b\x38\xd6\x14\x54\x07\x58\x70\x4a\xc1\x9d\x8d\xf4\x64\x14\x82\xc0\x3e\xe0\x51\x9f\x33\x85\x08\x03\xb1\x66\xf0\x9a\x90\xd5\x42\xc6\x43\x1d\x22\xe9\x23\x97\x8f\x1d\x1d\x79\xda\x3d\xc2\x0a\xc9\x32\x6c\xce\x67\xf5\x57\x02\xe3\x90\x0b\x65\x2f\x7e\x5a\x93\x9f\x4b\x78\x5a\x6a\x10\x72\x19\x5b\xc5\x28\xe4\xce\xb6\x2e\x61\x25\x51\xd6\x16\x67\xb1\x6c\xf2\xe5\x33\x63\xb5\xa7\x1a\x90\x67\xba\x57\x96\xda\xaa\x92\x5b\x49\x7a\x2b\x49\x70\x25\x29\xe6\xfe\xf2\x2a\xc4\x55\xed\x7d\x11\xfd\xf2\x88\x3d\xa5\xcb\xb1\xff\x93\x37\xf9\xca\x9f\x4b\x90\xf3\xf1\x36\x3d\xcb\x79\x5d\xcf\x32\x3f\xe9\x99\x97\xb3\x2f\xca\x93\x09\x02\x29\xd8\xad\x44\x42\x9e\x23\xd5\xab\xbc\x43\x43\x0a\x79\x7e\xb4\xc9\x54\x43\x55\x92\xa5\xaa\x6a\xac\x9e\x35\x7c\x66\x95\xb0\xa4\xc0\x57\x6e\x36\x68\xae\xe8\xd7\x67\xfc\xc6\xb3\xc0\x8b\xdc\xc6\xc1\xd1\xaf\xcb\xd1\xaf\xe0\x1a\x32\x18\x06\x0a\x58\xa1\x5a\x72\x51\x02\xe1\x91\xa3\xc5\xaa\xc0\x75\x28\x61\xa3\xe5\x12\x5a\xc1\x5b\x34\x6f\x99\x25\xe6\x62\x0f\x4c\xb3\x3a\x98\xe5\xfd\x31\xcb\xea\x60\x92\x0f\x26\xb9\x5b\x26\xf9\xca\xfd\x11\x49\x15\x00\x53\xa9\x59\x0e\x01\xdc\x99\x87\xf9\xa6\x96\xf2\xb1\x36\x66\x6f\x96\x99\xe4\x28\x0c\xf5\x77\xbf\x64\xf6\x0d\x39\xf0\x8a\xc0\xee\x9d\xbd\x5e\xf6\xa1\x54\x10\x3a\x84\x61\x01\xc9\xf4\x32\x19\xd6\x45\x82\x10\x79\x30\x47\xb0\x30\x97\x25\xec\x09\x43\x4a\x30\x52\x84\xb3\x59\xab\x1e\x20\xc2\x1a\xf5\x5d\xa5\x5a\x92\x01\x9a\x76\x5c\xb6\xa5\x04\x62\x92\xa2\x18\xad\x97\xf6\x13\x48\xbb\xf7\x3b\x50\xca\x2d\xed\x6e\x40\x66\xb4\x74\xbd\xce\xef\x1d\x7f\x4c\x63\x53\xce\x95\xfe\xcf\x7a\x5c\x5d\xf1\x61\xe7\x02\x0d\x17\x04\x98\x8a\x25\x67\xf7\x1e\x40\x28\x82\x11\xad\xeb\x8f\x6e\x80\x45\xef\x90\x98\x0a\x5f\x3f\xe8\x82\x73\xd2\xf3\xfc\x43\x41\x90\xce\x1c\x58\x74\x4d\xf4\x9c\xda\xe9\x9d\x68\xe2\x4a\x73\x80\xed\xe8\x69\x9b\x3a\x81\x88\xb9\x20\x28\x61\x55\x56\x31\xab\x1b\x32\x1a\x06\x59\xf9\x96\xb1\x78\x92\xcd\x1b\x96\x70\x78\x25\x2e\xaf\xca\x69\xab\x34\x47\x59\xbc\xb0\x2c\x76\x3e\xc1\xb8\x60\x71\x2b\x2f\xb0\x89\x45\xe6\x8d\x91\xc0\xaa\xf7\x09\xc6\xc7\xc7\xc7\x75\x06\x30\x04\x53\x3a\x48\x61\x32\xcf\x2a\x4e\xe8\xa5\x2f\x1b\x91\xd4\xe7\x10\x58\x47\x45\xa5\xa7\xbe\x57\xb2\x1a\xa0\x07\xb8\x92\x1d\x95\x96\x9e\xbc\x85\xe4\x8e\x0a\x6c\x00\x21\x12\x48\x71\x31\x2f\x39\x39\x79\xac\xc5\x77\xda\x6e\xc9\x6d\x1d\xde\xef\x1f\xf5\x6e\xbe\x8f\x86\x82\x50\xca\xdb\xcd\x2c\x93\xb0\x24\x59\x97\x35\x59\xd8\x8e\x6a\x40\x99\x4c\xaf\x7e\xfb\xe3\x7a\xe7\xe4\xa9\x17\xb5\x87\xb2\xec\x0f\xbe\xee\x9c\x28\xfb\x83\xaf\x3b\x2a\xc9\x2a\x7e\xe9\xac\xdd\xf2\xdc\x3a\xee\x07\xa0\x14\x61\x5e\x47\x03\xaf\x3c\xd8\x4f\x56\xb4\xc7\xa0\x3f\x6f\xb7\x34\xb7\x0e\xfa\x2f\x11\xc9\xab\x0d\x6b\x11\x8b\x4c\x00\xaf\x57\xd3\x7e\xa4\xaf\xaf\xb2\x67\x95\x5c\xe0\x5c\x0a\xbb\x8c\x59\x6d\xcb\x06\x26\x13\xef\x48\x3e\xb0\x90\xcb\x2b\x71\x7a\x55\x6e\x5b\x8d\xd8\x93\x64\x6d\xfd\xb4\x65\x6b\x77\xac\xca\x64\x45\x1b\xb3\x2c\x96\x75\x81\x30\x06\x0a\xb1\x1b\xb3\x46\xf0\x74\x69\x13\xdb\x92\xc4\x63\x88\x5e\xda\x08\x2b\xf2\x80\x14\xd8\x56\xc0\x5d\x72\x4f\x40\x68\x89\xfc\xf6\xa7\xd3\xff\xfc\xe9\xee\xf6\xf3\x47\xe7\xe6\x6a\xf0\xe7\x62\xef\xce\xcc\xd8\xdb\xf4\x39\x09\x46\x06\x98\x8b\xa2\xb4\x78\x1e\x17\x5b\x0e\x90\x78\x39\xed\xf7\x3b\xcd\xc9\xef\x56\xa3\x6f\x67\xc4\xf7\x65\xf0\xd9\xd2\x2b\x6a\xbf\x04\xdb\x19\x39\xfc\x0e\x34\xec\x60\xdc\xa0\xa7\xdd\x91\xa8\xa1\x80\xc3\x2b\x71\x79\x55\x4e\x5b\x8d\xd8\x13\xbd\xb2\xab\x21\x8f\x3a\xba\x09\xe9\xc5\x73\xdf\x67\xc3\x51\xbf\x99\x60\x52\xe5\x62\xd4\x44\x78\x4f\x28\x35\xab\xa2\x08\xb9\x24\x49\xe1\xc7\x9a\x5b\x85\xf3\x2a\x3e\x29\xf7\xbe\x12\x18\x57\x6d\x69\x1b\x13\x57\xf9\x8e\x80\xbf\x22\x90\xca\xee\xbd\x79\x93\x29\xaa\x2a\xa2\xdc\x64\x33\x5c\xc3\x2d\x6a\x77\x02\x40\x33\x69\x8e\x63\x15\xfc\x89\x0f\xc4\xf3\xd5\x94\x5b\xa7\xaf\x0a\x3b\x52\x6a\x73\x6c\x09\xd7\xcc\x4b\x2e\x37\x5e\x00\xe9\xcb\x18\x96\x4e\xc8\x29\xc1\x4f\x76\x8f\x21\x15\x89\xfc\xe2\xa7\xc2\xdf\x5e\x7d\x08\x1f\x90\x0b\x42\x3a\x98\x12\x3c\x4a\x2a\x2a\x8d\x79\x07\x4c\x13\x3a\x12\x90\xc0\x7e\x0d\x7a\xe9\xf3\xb1\x93\xb0\x11\x44\x1d\xe1\xa5\x13\xf0\x04\x89\x2b\x3a\x75\x10\x51\x56\x4b\xb6\x64\x18\x25\x00\x26\xc3\x54\x8c\x25\xe2\x0b\x56\x18\xa2\x47\xf1\x7f\x27\x05\xaa\xb1\x6d\xab\x14\x57\x68\x4d\x1b\x3c\xd3\x4c\xd4\x6d\xfa\x24\x67\xcb\xb8\x7d\xf7\x60\x62\x99\x56\xf1\x0e\x6b\x6e\xcf\x1f\x28\xa4\x22\x39\x9c\xd4\x0d\xca\xe7\xff\xae\xd7\xae\x1b\x39\xd7\xb9\x66\xfb\xc5\xda\xd8\xa5\x64\x69\xb7\xbd\x31\x5d\x5c\x45\x5e\x83\x0e\x34\x3a\x8c\xa9\x14\x0f\xed\xde\x2f\x86\x44\x43\xae\x14\x0f\x0c\xe8\x2a\x17\x9c\xe6\x11\xcb\x10\x61\xc2\xbc\x92\x36\xfc\xb6\x87\x5c\x08\x8f\xd2\xf0\x00\x98\x6b\xae\x8a\x6b\xbe\x7e\x20\xbe\x7e\x29\xd6\x42\x60\x4a\x3c\x2d\xdc\xc6\x94\x37\xb5\xed\x69\x61\xa6\x06\x7e\x09\x55\xaa\x84\xa6\x64\xb1\x56\x54\x0e\x36\x17\xb4\xa2\x32\x9d\xe0\x63\xe7\x19\xdc\x95\xa9\x30\xa7\x51\xc0\xaa\x10\x9a\x37\xe9\xc4\xbb\xb8\xbc\x83\xf1\x56\x44\x8b\xc5\xc9\x8b\x3b\x1f\x88\xf8\xb7\xc9\x58\xc9\xd6\x02\xfb\x48\x87\x3e\x85\x76\x2c\x8f\xf2\x31\xed\xf6\x29\x89\xae\x8b\xb6\x97\xf9\x56\x29\x77\xa9\x95\x3a\xcb\xf3\x28\x2b\x5c\xb1\x63\xe5\x1b\x0f\x6b\xd5\x54\xd8\x7b\x6d\x3e\xe6\xef\x4b\x4b\x1e\x2d\x9f\xb5\xfe\xd7\xee\xcd\x51\x6d\x7a\xf3\x62\xdc\xd2\xc4\x39\x55\x24\x74\x14\x3c\xaa\x62\x50\x5a\xfd\x74\x4d\x26\x43\xcf\xb4\x9b\x14\x0f\xaf\x07\xde\x18\x04\x4b\x90\x54\x1b\x82\x05\x4a\x59\x72\x41\xd1\xda\x61\xab\xb4\xc8\x6e\x21\xe4\x42\x99\x21\x77\x91\x70\x47\xc0\x9b\xac\xc8\x64\xe0\x00\x3d\x3a\x14\x98\xa7\x8a\x2f\xb7\x28\x91\xfd\xc4\x20\x1b\x51\xea\x9f\xac\x4f\x5d\x49\xd7\x6e\x07\x77\x26\x63\x12\x16\x46\xca\x09\x23\x11\x72\x09\x76\xcf\x25\x1e\x51\x72\x63\xba\x6a\xb4\xfc\x76\xb8\x8b\x58\x7d\x3e\x45\xc1\x10\x44\x0d\xbd\x9b\x21\xdc\x11\xbd\x4b\x56\x54\x5b\x7d\x0a\x43\xc2\x3c\xca\x4a\x0a\xf0\xf7\xee\xc0\xbf\x30\xd6\xcf\x97\x47\x1b\xe0\x1f\x3c\xd5\xf1\x39\x73\x54\x9d\x07\xfe\xcd\x53\xea\x6d\xac\x97\x7d\x25\xe8\x91\xf8\xc7\xc1\xed\xac\xd7\xed\xe4\x95\xd5\x88\x69\x59\x8d\x27\xd0\xf0\x28\x91\xb6\x59\x61\x4d\x5b\xdc\x59\xe9\x06\x6d\xcd\xfa\x5c\xc7\x97\xcd\x51\x6d\x44\x9f\x25\x30\x49\x14\x79\xa8\x73\xfc\xb0\xca\x46\xbe\x8a\x31\x38\xb8\xc0\x2d\xb8\xc0\x0d\xab\xcc\x62\xe6\x29\xaf\x55\xb0\xe5\x99\xa7\x9b\x27\xa3\xb4\x13\x50\x4a\x42\x49\xfe\x07\x35\x6e\x8b\xd9\x8b\x94\xd5\xf6\x10\x18\x80\x94\xc8\x6b\xf7\x15\x45\x25\x38\x4c\x66\xbf\xa3\xa8\x28\xc9\x08\x15\x66\x91\xfe\xb9\x59\x24\xf5\x79\x30\xe4\xef\xf8\xe3\x5d\xec\x3f\x34\xa0\x86\x88\xb9\xf1\xd3\xca\x11\xc0\x33\x45\xeb\x0b\x37\x96\x7a\xf0\x77\x88\xb9\x49\x24\xff\xf3\xb0\x3c\x92\xcf\xc4\xa0\xc3\x69\x0c\x1a\xf2\x30\x0a\xb7\x1b\x7e\xd6\xce\x7c\x6e\xd8\x92\x65\xf1\x17\x70\x17\xcc\xf0\xf7\x4c\xd1\x7d\xfc\xdd\x70\x17\xd2\x9d\x64\x60\x88\xbf\xa0\x55\xf8\x33\x32\x7d\x5b\xc4\xdf\xbb\x48\xa9\x49\x15\x8d\x00\x09\x2a\x7d\xb0\x8a\x53\xbb\xd5\xe3\xb4\x1e\x8b\x02\x30\x90\x07\x90\x8e\x0b\xf7\x28\xa2\x6a\x0d\xc9\x91\x98\x11\xd6\xcb\x9f\xa8\x7a\xfb\x7e\xd0\xff\xc9\x53\x6f\x4b\x30\xdd\x30\x00\x8d\x22\xcd\x96\x00\x90\x72\xaf\x01\xf8\x7d\xe4\xde\x01\x7c\x31\x1b\x2c\xe5\x83\xf5\x65\xf0\x39\x85\x20\x53\x20\x3a\x02\xc2\x6d\x26\x75\xbf\x63\x1f\x31\x0f\x4c\xb3\x40\xb3\x64\xbb\x90\xd6\x7d\xff\x98\x2c\x68\x33\x7b\xdd\x4a\xb9\x9c\xef\x7d\xbf\x44\xb5\x1b\xc6\xae\x51\x2a\xaa\x1d\x09\xcc\xf8\x58\xad\x16\x7c\x33\x94\x9d\x47\x70\x72\x22\x77\x00\xf1\x36\x0d\x70\xfb\x4b\x3c\x9f\x8b\x35\x6b\xff\x45\x0f\xd3\x62\xcd\x31\x17\x23\xbd\x61\xdb\x7a\xbd\xa6\x79\xaa\x6d\x32\xf5\x8e\xe6\xda\xbe\xa5\xd3\x2f\xc9\xfc\xb6\x25\x71\xb6\x61\x17\x72\x8b\x5c\xc2\x67\x03\xf1\xa4\x3b\xe5\x3f\x3c\x62\x18\xf4\x96\xbc\x81\xa8\x7c\x10\x0f\xf9\x13\x0a\xc2\xb7\xc9\xb8\x6d\xf7\x30\xd9\x10\xdd\x18\x8b\xf1\x15\x07\x35\x66\xed\x0a\x34\x76\x08\x73\x09\x46\x8a\x8b\x65\xf4\x7b\x9a\x39\xcb\x80\x56\x44\xac\x21\xac\xde\x46\x46\x75\x9f\x07\x74\x1a\xd1\x7b\x82\x47\xa1\xdd\xcb\xb7\x31\x1b\x83\xf9\x76\x13\x74\x1d\x8a\x8c\x0a\x4e\xa5\x9b\x8f\x8c\x46\xf0\x04\x62\xeb\x61\xd1\x02\xdd\x9e\xb4\xb1\x54\xfe\xe3\xb2\x8b\x6d\x2c\x95\x09\xf5\xcf\xf9\x3c\xe0\x1e\x30\xe0\x4b\x7b\xb5\x6b\x24\x0f\xef\x4f\x1b\xb0\xfc\xd7\x46\xde\x6f\x57\x53\x87\x03\x60\xae\x75\x83\x04\x16\xdc\x7a\x79\x7d\x6a\x78\x10\x73\x7d\x3a\x3d\x89\x89\x3b\xa5\xc1\x5d\xfb\x71\x4b\x57\x22\xed\x39\xc0\x9e\x35\x01\x58\x23\x3f\xb6\x1f\x80\x3d\x33\x05\xec\x59\x87\x00\xbb\xe1\xcc\xf8\x1c\x60\xcf\x9b\x00\xac\x51\x61\xe8\x7e\x00\xf6\xdc\x14\xb0\xe7\x1d\x02\xec\x86\xdb\xc2\xe6\x00\xfb\xba\x09\xc0\x1a\x95\x65\xee\x07\x60\xdf\x98\x02\xf6\x75\x87\x00\x5b\x62\xa0\xd6\x7c\x7e\x73\x7f\x5a\xf5\xd4\x66\x1b\x29\x87\x8a\xb7\xfe\x74\x20\x1d\x55\x70\xe6\x53\x5a\x81\xbd\x6e\xd1\x9f\x1d\x44\xbf\xd5\xee\xe5\x2d\x8a\xfe\xfc\x20\xfa\xc6\x44\x5f\xa7\xe4\x78\x8b\xa2\x7f\x7d\x10\x7d\x63\xa2\x37\x6f\x20\xdc\xb8\xe8\xe7\xce\xd8\x14\x0f\x9b\x08\x4f\x8d\x8e\xf8\x93\x6a\x8f\xe9\x4f\x77\xef\x98\xa3\xf9\xc8\x56\xf1\x30\x2e\x94\xeb\x7f\x4b\x5e\x07\x44\x4a\xc2\x59\x9d\x30\xf7\x4d\x87\xc2\xdc\x0d\x43\xbf\xd5\x45\x03\xb5\xff\x86\xb8\x5f\xe9\x38\x26\x57\x88\x85\x1a\x3d\x0e\x83\x8d\x19\xdb\xda\x2d\x87\x07\xf4\x64\xd1\x53\x72\x4b\x5c\x2e\x59\xdd\xcb\x50\x4b\x8a\x2c\x42\x00\xd7\xa8\xb3\xf1\x47\x24\x15\xb9\x7f\xb2\x7b\xf1\x59\x55\xfb\x4f\x5f\x37\x8c\xbb\x41\x48\xd8\x9c\xd3\xd6\x0c\x6e\x73\xcc\xb6\xd4\xdd\xf5\xbf\x59\x31\x4a\xd2\x2e\x1b\x69\x74\x5f\xc3\x04\xe9\x18\x98\x32\xeb\xf2\xae\x6f\x28\x67\xef\x88\x30\x8f\xee\x27\x75\x9c\x46\x94\x99\x3b\x22\x8c\xa8\xcd\xef\x73\x58\x18\x00\xb9\x5a\x2b\x93\xbf\xed\x1f\x03\xee\xea\xf9\x81\x51\xac\x17\x05\x20\x08\xae\x80\xa1\x4c\x20\x23\x77\xe8\x3e\x89\x83\xa7\x6a\x20\xce\x99\x2b\x83\x30\xd2\x86\x75\x78\x39\x1d\xb1\xdf\x7d\x6f\xff\x8e\xb4\x11\xe8\x75\xa8\x54\xa8\x60\x2b\xba\xbc\x54\x68\x7e\x8d\x33\x2f\xa7\x2f\x2e\x4e\xe2\x7b\xc3\xef\x11\x86\xde\x8b\xff\x07\x00\x00\xff\xff\xe6\x82\x98\x31\xf1\xa1\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 41457, mode: os.FileMode(0664), modTime: time.Unix(1607799624, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x99, 0xdd, 0x9c, 0x5e, 0x80, 0xae, 0xe3, 0xb, 0x62, 0x66, 0xdf, 0x29, 0x99, 0x84, 0x98, 0x10, 0xa8, 0x76, 0x6b, 0x36, 0x8f, 0x18, 0x2, 0x28, 0x43, 0x74, 0xd3, 0xc5, 0xb0, 0x97, 0x7f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
