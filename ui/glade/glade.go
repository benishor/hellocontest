// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (26.439kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x73\xdb\xb8\x11\x7f\xcf\xa7\x60\xd1\xc7\x8e\xed\x48\x4e\xae\x9d\x8e\xc4\x1b\xc7\x17\xe7\x6e\x2e\x7f\xa6\xb6\xdb\xde\x1b\x07\x22\x57\x24\x62\x10\x40\x00\xd0\xb2\xfa\xe9\x3b\x20\x25\x5b\x12\xff\x88\xa0\x28\x89\xf4\xe9\x25\x13\x51\xfc\x81\xc0\xee\x6f\x17\xbb\x8b\xa5\x35\xfa\xf9\x29\xa6\xce\x23\x48\x45\x38\x1b\xa3\xc1\xf9\x5b\xe4\x00\xf3\x79\x40\x58\x38\x46\xff\xbe\xbf\x39\xfb\x07\xfa\xd9\x7d\x33\xfa\xcb\xd9\x99\xf3\x09\x18\x48\xac\x21\x70\x66\x44\x47\x4e\x48\x71\x00\xce\xe5\xf9\x70\x78\x3e\x70\xce\xce\xdc\x37\x23\xc2\x34\xc8\x29\xf6\xc1\x7d\xe3\x38\x23\x09\x3f\x12\x22\x41\x39\x94\x4c\xc6\x28\xd4\x0f\x7f\x43\x2f\x0f\xba\x3c\x1f\x0c\xd1\x45\x7a\x1f\x9f\x7c\x07\x5f\x3b\x3e\xc5\x4a\x8d\xd1\x27\xfd\x70\x15\x7c\x4f\x94\x8e\x81\x69\xe4\x90\x60\x8c\x94\x00\x08\x56\x2e\x1a\x94\xe3\x8c\x84\xe4\x02\xa4\x9e\x3b\x0c\xc7\x30\x46\x94\xcf\x40\x22\xf7\xfd\xe8\x62\xf9\x45\xf1\x7d\x89\x10\xe6\xbe\x9f\xde\x6e\xbb\xf1\x11\xd3\x04\x90\x3b\x7c\xb7\xed\x46\xa5\x41\x78\x84\xf9\x12\xb2\xe9\x0d\xb6\x01\x04\x0e\x61\x0d\xb0\x31\x97\xd1\x45\x26\x93\x12\xf1\x08\x41\x89\x8f\x35\xe1\xec\xbf\x84\x05\x7c\x96\x49\x29\xc6\x64\xf9\xb9\xf8\xa9\x3e\x66\xde\x94\xfb\x89\x42\xee\x0d\xa6\x0a\xb6\xcd\x32\x82\x27\x81\x59\x80\xdc\x7b\x99\x6c\xbd\x59\x13\x4d\x01\x39\x5a\x62\xa6\x28\xd6\x78\x42\x61\x8c\xe6\xa0\x90\xfb\x2b\x50\xca\x9d\x6b\xce\x34\x28\x9d\x1b\xc6\x8f\x08\x0d\xb2\xff\x9b\x41\x29\xf6\x21\xe2\x34\x00\x79\xb1\xb8\xe1\x62\xe5\x8e\x8d\xbb\x73\x92\xf9\xc0\x9f\x32\x59\x48\xce\xb5\xf9\xb0\xbc\xb5\x40\xb9\x44\x91\x09\x85\xe2\xc5\x35\x91\x5e\x11\x86\x4b\x02\x4c\xa7\x9a\x42\xee\x23\x48\x4d\x7c\x4c\x0b\x81\x6b\x0b\x2b\x5e\xdc\x17\x60\xc9\x07\x2c\x5f\x94\x6d\x2e\xa0\x55\x4c\x83\x55\x36\x5d\x69\xf1\xa4\xcb\x27\xfe\x9b\x86\x78\x31\x73\x60\xc9\x0d\x31\x73\xda\x00\x36\x9c\xfd\x2e\x2b\x28\x74\x23\x78\x02\xb4\x90\xc8\x9e\x99\xb6\xcd\x50\x89\x02\x2f\x61\x01\x48\x4a\x58\x9d\x55\xa4\xf2\x74\xf4\x5c\x18\x9f\x92\x4c\xe2\xbc\x7e\xab\x44\xbc\xf0\x95\x19\xae\x44\xc2\x3b\x49\x79\x57\x49\x3b\xa5\x9c\xa9\x5e\x58\x9e\x3b\x5f\x61\x56\xb2\xb8\x9d\x17\xd8\xc6\x22\x8b\xc6\xc8\x68\xe5\x7e\x85\xd9\xf9\xf9\x79\x93\x01\x2c\xc9\xb4\x18\x64\x65\x23\x29\xfa\xb6\x42\x1b\xed\x68\xea\x9b\x00\xd6\x53\x55\x99\xa9\xff\xa9\x74\x75\x87\x1f\xe1\x4a\xf5\x54\x5b\x66\xf2\x0e\x56\xaf\x54\x61\x77\x20\xb0\xc4\x9a\xcb\x75\xcd\xa9\xe5\x65\xa3\xbe\x41\xb7\x35\x77\x74\x7a\x7f\x7c\x12\x5c\xea\x6b\x3c\x91\x84\x52\xde\x6d\x61\xd9\x84\x25\xd9\xba\x9c\xe5\xc2\x5e\xa9\x05\x54\xe9\xf4\xea\x97\xdf\x6e\x5e\x9d\x3e\xcd\xa2\x5e\xa9\x2e\xeb\x78\xb3\x61\xb7\x15\x7a\x74\xe6\xff\x2b\x21\xba\xdb\x22\xb2\xe1\xbc\x59\x4d\xf7\x99\x5e\x0e\x2c\x01\x15\x03\x0a\x6f\x6e\x9e\x4c\xff\x0a\x54\xf4\x30\x99\x36\xd3\xee\x49\x32\x5d\x22\xe1\x9d\xa4\xbc\xab\xa4\x9d\x56\x3c\x89\x59\xd9\xd5\x84\x27\x3d\x75\x25\x6e\x3a\xf7\x3f\xb3\xe3\x28\xba\x71\x24\xb0\xff\x40\x58\x58\x5d\xe5\x5b\x16\x77\xab\x4b\x7c\x1b\xa0\x29\xa1\xd4\xae\x98\x28\xb8\x22\x59\xfd\x33\x57\x6f\x5f\xae\x20\x37\xdd\xdc\x3a\xeb\x94\x47\xef\x7c\xc9\x29\x85\x60\xb5\x24\xfe\x43\xf1\xff\x10\x98\x5d\x73\xa6\x31\x61\x20\xb7\x54\x4b\x67\x24\xd0\x91\x27\xe1\x47\x02\x4a\x23\xf7\xfd\xfb\xdc\x59\x42\x19\x72\xd7\x3a\xab\x0d\x4c\x45\x38\xe0\x33\xcf\x78\x36\xe4\x12\xb6\x6b\x75\xf6\x5e\x02\x18\x21\xad\x49\xac\xc6\x7e\x12\x01\x09\x23\xfd\x22\xad\xc1\xdb\x12\x05\xef\x20\xb1\x2d\x52\xb3\xde\x8e\x2a\x4f\x34\x2a\x67\xdb\x14\x18\xa9\x94\x96\x9e\xe0\x94\xf8\x73\xe4\x32\xac\x13\x59\x7c\x06\x50\xfa\xec\xdd\x87\x88\x00\x07\x20\x95\xe7\x53\xe2\x3f\xe0\x54\xec\xd6\xb2\x03\x66\x80\x9e\x02\x2c\xfd\xa8\x01\x5e\x45\x7c\xe6\x65\x62\x04\xd9\x44\x79\x8b\x09\x84\x92\x04\x9e\xf1\xda\xaa\xfa\x48\x65\xcb\x30\x5a\x02\x2c\x87\xa9\x19\x4b\xa4\xa7\x9b\x0c\xd3\xb3\xf4\xa3\xc9\x57\x28\xf8\x99\x6f\xab\x15\x57\x18\x4b\xbb\x7b\xc6\x2c\xcd\xed\xe5\xca\x45\x17\xb7\x07\x1b\xcf\xb4\xcb\xee\x90\x3b\x33\x5d\x2e\xa0\xa5\xdd\x41\x63\x9d\xa8\xc9\xf2\xf8\x4c\x3d\x7f\xdc\xaf\x5f\xb7\xda\x5c\x63\x2c\x43\xc2\x3c\x0a\xd3\x82\x23\xe1\xad\x30\x69\xdc\x71\x03\x9c\xd2\x58\x36\xc1\x81\x61\x87\x35\x4a\x73\x81\xdc\x9f\x2c\x41\x13\xae\x35\x8f\x2d\x70\xb5\xcf\x5d\x8b\xc0\x4a\x60\x9f\xb0\x10\xb9\xc3\x32\x4a\x76\x3d\xe4\xc2\xfe\xc3\x22\x3c\x00\x16\xd8\x9b\x62\xe9\xba\xdb\x31\xc5\x4f\x92\x04\x99\x15\x02\xd3\x72\x9e\x7e\xec\xaa\x15\xe6\x5a\x3f\xb6\xa0\x16\x46\x68\x0b\x4b\xad\xa2\x76\xb0\xb9\x61\x15\xb5\x71\x92\xcf\xbc\x67\x72\xd7\x46\xf9\x9c\x26\x31\xab\x03\xac\x19\x70\x7e\xce\x6a\x02\x86\x00\x69\x16\x57\x54\xe9\xeb\x44\xb4\x58\x5e\xbc\xb8\x8f\x80\xc8\x7f\xda\x8c\x95\xa5\x16\x7e\x84\x4d\xe8\x53\xea\xc7\x8a\x90\x4f\x98\x92\xb0\x3c\x7d\x72\x2a\xd2\xcb\x62\xaf\x54\xb8\x54\x98\x6a\x0f\x6b\x8d\x4d\x68\x67\x15\xc7\x6b\x2e\x9e\x81\x25\x7b\xb8\x53\xec\x3c\x9c\x5d\x4b\x61\x1f\x8d\xfb\xc8\x88\xe4\x63\x4a\x15\x09\x59\x76\x69\xfb\xac\xcd\xbf\xc8\x5d\x43\x1d\x3a\x79\xb1\x85\xae\xb4\x46\x79\x1a\x9e\x74\x21\x31\xaf\x31\xad\x08\x86\x5b\xe6\x49\x85\xba\x1b\xf3\xa4\xc4\x72\x4a\x37\x25\x67\xff\xdc\xd2\xc6\xd8\x6f\x41\x70\xa9\xed\xe8\xb5\x09\xec\x3a\xc3\x62\xfc\xe4\x51\x60\xa1\x11\xf7\x65\x63\xe7\x66\x85\x34\x8f\x6c\x8e\xae\x65\x12\xb7\x77\xf7\x36\x63\x12\x26\x12\xed\x89\x44\x0a\xae\x00\xb9\x01\x09\x89\x56\x07\x33\x29\xab\xe5\x77\xc3\xf5\xa6\x2c\xff\x9a\xc4\x13\x90\x0d\xcc\x63\x05\xd8\x75\xf3\x58\xe3\x69\x69\x14\x54\x84\xac\xc5\xd3\xbf\xf6\x87\xa5\xa5\xe1\x6d\x11\xb2\x1b\x2c\x8d\xe7\x4d\x3c\xf8\x1a\xaa\xeb\xfc\x3c\xb9\x6f\x7b\xc3\x70\x9c\x11\xf6\x7d\xa0\x90\xf6\x1d\x38\x0f\x30\x1f\x23\x89\x1c\x13\x14\x62\x3a\x46\xa1\xc4\x93\xb3\x4c\x1d\x4e\xcc\x03\x32\x25\x20\x0d\xb5\x7e\xf9\xdd\xbb\xfe\xf6\xf5\xfe\xf6\xdb\x67\xef\xcb\xd5\xdd\xef\xf9\xca\x5d\x57\xb6\x85\xca\xa4\x61\xcf\x06\xd7\x64\x4f\x58\x43\x1d\xc4\xe0\x14\x30\x45\x34\x79\x6c\x52\x12\xdf\x25\xb9\x3c\xed\x26\x3b\xef\x26\x07\x26\xf7\x66\xdd\xa2\xa8\xdf\xb2\xe3\x75\x8b\x2f\x73\xab\xa2\x05\x50\x4a\x84\x22\xff\x03\xe4\xa6\x55\xe2\x53\xc1\xa3\x33\x0c\x8c\x41\x29\x1c\x42\x76\xa5\x7f\x3c\xcc\x66\xff\x4a\x59\x51\x51\xaa\x28\x2d\x6f\xfc\xfd\xb0\x4c\xba\xe6\xf1\x84\x7f\xe0\x4f\xf7\xe9\xfe\x61\x08\x35\xc1\x2c\x48\xaf\x76\x86\x4d\xb9\xc0\x6c\xf2\x12\x98\x09\x2e\x12\x71\xdc\x98\xac\x71\xf5\xeb\xc0\x4e\x23\xaf\xea\x98\x07\xd0\x71\x55\xc7\x9d\x52\xb5\x95\x41\x1f\x51\xd5\x1f\x12\xad\x97\x9d\x05\x12\x14\xe8\xc5\x85\x5d\x5c\xf5\xad\x19\xa7\xf3\x8d\x3d\x12\x7c\x20\x8f\xa0\xbc\x00\xa6\x38\xa1\x7a\xdb\xd3\x5b\x26\x88\x55\x7c\xd3\x11\x82\x50\x1e\xb6\x40\x8f\xcf\x3c\x3c\x91\x63\x4f\xe4\x38\x66\xb5\xec\x0f\x3f\xc2\x2c\x04\xdb\xec\x7d\x15\xd6\xf5\x7a\x59\xf3\x0c\xa5\x56\x06\xfe\xc7\x75\x54\x61\x1a\x2d\x73\xcc\xaa\x80\xd0\x8d\x02\x51\x5a\xfe\x6f\x44\xb3\x1c\xf2\xc4\xb4\x1e\x30\xad\x15\x6f\xd6\xfd\xde\xab\xe7\x2e\xaa\x92\x9a\x6d\xfb\x5d\x54\x0f\x30\x07\x79\xea\xa2\x3a\x4a\x17\x55\x69\x66\xb0\xad\x8b\xaa\x36\xd0\x3c\x2e\xe2\x31\x0f\x81\x01\xdf\xfa\xaa\x40\x83\x38\x70\x3a\x68\x21\x0c\xbc\xb1\xca\x86\x7b\x11\x05\x16\xa5\xa5\x37\x83\x97\xbc\x34\xed\xa5\x87\x60\xef\xc9\x67\x5f\x8a\x93\x6b\x9c\x1a\xb6\xc1\x29\xab\xb4\xbb\xbf\x9c\x1a\xf6\x88\x53\x07\x4e\x49\xd6\x38\x75\xd9\x06\xa7\xac\x4e\x52\xfb\xcb\xa9\xcb\x1e\x71\xea\xc0\x9d\x7d\x6b\x9c\x7a\xd7\x06\xa7\xac\x0e\x30\xfb\xcb\xa9\x77\x3d\xe2\x54\x85\x99\xef\x39\xad\x9d\x0e\xea\x26\xb3\xc7\xc8\x44\x6b\xbe\x00\xd9\x83\xa3\x92\xd2\x93\xb4\x0a\x6b\xdc\xb7\xea\x87\x27\xd5\x1f\xb5\x47\xfc\x88\xaa\xbf\x3c\xa9\xbe\x35\xd5\x37\x39\x3f\x3f\xa2\xea\xdf\x9d\x54\xdf\x9a\xea\xed\xfb\x56\x0f\xae\xfa\xd5\xf8\x51\x69\x2e\x5a\x88\x20\xef\x34\xb7\xfa\x53\x38\x59\x19\xfc\xe5\xe1\x5d\xaf\x7f\xb7\x11\x7e\x7e\x54\x3e\x16\x90\x0f\x41\x8f\xda\x18\xd0\x38\x3e\x3d\x30\x67\x3b\xdd\x26\x16\x2d\x3a\xbb\xac\x5b\x0c\xa3\x5a\x35\xfd\x42\x25\x96\x9a\xe2\x4c\xc4\xdd\x6f\x7c\x3d\xb1\x27\xcf\x9e\x8a\x37\xdd\x0b\x61\x4d\xff\xa0\x4b\x85\x17\x17\x00\x81\x55\x7f\xed\xf7\x44\x69\x32\x9d\x23\x37\x3d\xf0\x38\x18\xef\x1a\xb7\x33\x1d\x98\x77\x77\x82\xb0\xb5\xdd\xd6\x08\xb8\xd3\xc1\xd6\x82\x8b\x3e\x30\x0d\xf2\x30\xae\x6c\xf5\xad\x1f\xfb\xc0\x79\x79\x28\x6d\x85\xcc\xbd\xf5\x63\x85\xb6\x7f\x43\x67\x63\x00\xbc\xf2\x43\x20\x1b\xbf\x0c\x62\x15\x44\x25\x31\x48\xe2\x1f\x38\x32\x6e\xfc\x26\xcf\x7e\x6d\x2f\xff\xbb\x1b\x15\xa3\xf4\xe8\x10\xbe\x44\x6a\xdb\x0f\xe1\xd7\xd7\xb8\xf2\xe5\xcb\x17\xa3\x8b\x95\x9f\xbb\xf9\x7f\x00\x00\x00\xff\xff\xf1\x7e\x6c\xd8\x47\x67\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 26439, mode: os.FileMode(0664), modTime: time.Unix(1545922654, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0x7f, 0xb, 0x2f, 0xdf, 0xd9, 0xbd, 0xc, 0x8a, 0x5f, 0x7a, 0xd8, 0x4d, 0x7f, 0xf7, 0xea, 0x2e, 0x30, 0xef, 0x18, 0xc9, 0x42, 0x7a, 0x17, 0x2, 0xe4, 0x59, 0xd6, 0x11, 0xb2, 0xbf, 0xe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
