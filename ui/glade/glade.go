// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (83.791kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x6b\x73\xdb\x38\xb2\xf6\xf7\xf9\x15\x78\xf9\x56\xcd\xe6\xd4\x8e\x93\xd8\x99\xd9\xb3\x67\x27\xd6\x96\xa3\xd8\xc9\xd4\xf8\x16\xcb\x93\xe4\x1b\x0b\x22\x5b\x12\xc6\x20\xc0\x01\x40\x4b\xda\x3a\x3f\xfe\x14\x2f\xb2\x6e\xbc\x81\xa2\x78\x91\xf8\x61\xa6\x62\x49\x0d\x02\xe8\xe7\xe9\x6e\x34\x1b\xc0\xfb\x7f\xcf\x1c\x8a\x9e\x41\x48\xc2\xd9\xb9\x71\xfa\xfa\xad\x81\x80\x59\xdc\x26\x6c\x7c\x6e\xfc\xf1\x78\x75\xf2\x4f\xe3\xdf\xbd\x1f\xde\xff\xbf\x93\x13\xf4\x09\x18\x08\xac\xc0\x46\x53\xa2\x26\x68\x4c\xb1\x0d\xe8\xdd\xeb\xb3\xb3\xd7\x67\xe8\xe4\xa4\xf7\xc3\x7b\xc2\x14\x88\x11\xb6\xa0\xf7\x03\x42\xef\x05\xfc\xe5\x11\x01\x12\x51\x32\x3c\x37\xc6\xea\xe9\xef\xc6\xf2\x41\xef\x5e\x9f\xbd\x35\xde\x04\xbf\xe3\xc3\x3f\xc1\x52\xc8\xa2\x58\xca\x73\xe3\x93\x7a\xfa\x46\x98\xcd\xa7\x06\x22\xf6\xb9\x61\x61\x4a\x09\x1b\xf1\xe8\x33\x5f\x00\xa1\xf7\xae\xe0\x2e\x08\x35\x47\x0c\x3b\xe0\xff\x88\x99\x23\x6e\x79\xd2\xe8\x5d\x61\x2a\xe1\xfd\x9b\xc5\x0f\xe2\x7f\x8f\x2d\x0b\x5c\x95\x2e\x62\x4d\x08\xb5\x91\x9a\xbb\x70\x6e\x28\xa2\x28\x0c\xb1\x88\x1e\xef\x37\x48\xb1\x05\x13\x4e\x6d\x10\x6f\x22\x81\x37\x81\xc4\xaa\xf4\xcb\xaf\xb7\x46\xf8\x49\x10\xfb\xa5\xb1\xed\xfe\x3d\x13\x49\x86\x14\x8c\xde\xa3\xf0\xb6\x7a\x56\x64\x02\xb6\xfb\x14\xdf\xaf\x6b\x3c\x04\xba\x9c\x78\x49\xc6\x2c\xfc\x68\x55\xac\x40\x7f\x8b\xf6\x39\x4e\x6e\x82\x29\x19\x33\xa3\x27\x15\x16\x2a\xaf\x90\x83\xc5\x98\x30\x93\xc2\x48\x19\xbd\x33\x4d\x29\x41\xc6\x13\x1d\xb1\x09\xcc\x5c\xcc\x6c\xbd\xe9\xf0\x24\x98\x0e\x16\x4f\x9e\xab\x27\x37\x15\x38\x4b\x02\x2b\x25\xc8\xd0\x53\x20\xd7\xbf\x58\xfd\x2a\x6a\x4d\x5a\x98\x82\x81\x9e\x31\xf5\xe0\xdc\xf8\xd9\x78\xb3\xd1\xd4\x9b\xf8\xb6\xde\xbf\x09\xa1\xb4\xf6\x99\x8b\xad\x27\xc2\xc6\xe9\xdd\xf7\x35\x62\x62\xa5\xb0\x35\x31\x7a\x6f\xf3\x0e\x5a\x71\x37\x4b\xe8\xfd\x9b\xad\xe7\xaf\x51\x14\xe9\x53\xc2\x9e\x59\x56\x47\x87\x76\xd3\xa1\x4e\xa4\x9e\x56\x86\xd4\x80\xbf\x1d\x54\x3b\xa8\x16\x85\x6a\xc2\x8c\x95\x05\xd5\x81\x25\x38\xa5\x60\xaf\x46\x7a\xd2\x73\x41\x58\x13\xb0\x9e\xfa\x9c\x29\x4c\x18\x88\x3d\x83\x57\x47\xac\x10\x32\x9e\x8b\x08\xc9\x09\xb6\xf9\xd4\xf4\x23\x4f\xa3\x47\x58\xa2\xd8\xd6\x34\xc7\x4f\xf5\x57\x02\x53\x97\x0b\x65\x6c\xfe\xb4\xe0\x7c\x66\xcc\x69\xaa\x41\x88\x9d\xd8\x3c\x46\x21\xb6\xb7\x45\x05\x73\xa9\xb2\xb0\x3a\x93\x75\x13\xaf\x9f\x15\xab\xbd\x64\x40\x9c\xe9\xde\x59\x6b\xbb\x6a\x6e\x27\xed\xed\xa4\xc1\x9d\xb4\x18\xfb\xe4\x5d\x84\xf3\xda\xfb\x24\xf9\xec\x88\x3d\x92\x8b\xb1\xff\x8b\x6f\xe2\xc9\x1f\x2b\x10\xf3\xe3\x3a\x3d\xcb\xbb\xa2\x9e\x65\xbd\xd3\x2b\x5f\xae\x7e\x91\x9e\x4c\x10\x58\xc1\x61\x25\x12\xe2\x1c\xa9\x3f\xca\x47\x3c\xa4\x10\xe7\x47\xcb\x4c\x35\xe4\x15\xc9\xa4\xaa\x36\x3d\x0b\xf8\xcc\x3c\x61\x49\x82\xaf\xac\x36\x68\xce\xe9\xd7\x57\xfc\xc6\x8b\xc2\x93\xdc\x46\xe7\xe8\xf7\xe5\xe8\x77\x70\x0d\x5b\x18\x06\x0a\x96\xc2\x85\xf4\xa2\x04\xb6\x9e\x4c\x5f\xad\x0a\x6c\x93\x12\xf6\x94\xad\xa1\x1d\xbc\x45\xf9\x96\x59\x5a\x5c\x1c\x81\x69\x56\x9d\x59\x3e\x1e\xb3\xac\x3a\x93\xdc\x99\xe4\x76\x99\xe4\x8f\x04\x53\x3e\x8e\x4c\x32\x28\x45\xd8\x58\x46\x9f\x95\x63\x95\x7d\x53\x60\x4e\x08\x53\x46\xcf\x0e\xda\xdd\x87\x4d\x46\xc1\x7b\x48\x86\xe9\x49\xf0\xe7\xb9\xf1\x3c\xe4\x33\x23\xd9\x52\x7f\xe0\xb3\x70\xc8\x43\x3e\x3b\x4d\x31\xca\xb9\xde\xb2\x25\x01\x3e\xb7\x04\x17\x04\x98\xc2\x8a\x70\x66\xf4\x9e\x41\x28\x62\x61\x9a\xcb\xda\xba\xd8\x22\x6c\x6c\xf4\xfe\x27\xd9\xd0\x6e\x4d\x0d\xb6\xfc\x07\x99\x58\x00\x36\xd2\xad\xf0\x07\x4f\x29\xce\x3e\xac\xcc\x64\xf1\x59\x8a\x93\xa3\x78\xce\x3d\x65\x4a\x35\xf7\xe9\x06\xcc\xde\xd5\x14\x87\x1d\x0e\x35\xcb\x5d\x60\x1f\x61\x84\x3d\xaa\x64\xf4\x79\x36\x85\x69\x68\xcb\x95\xc0\x4c\x52\x1c\xd8\x81\x73\x63\x0e\xd2\xe8\xdd\xb9\xc0\x90\xb9\x68\x50\xcb\x8e\x95\x60\xe7\x75\x45\x05\x58\x40\x9e\x41\x9a\x76\xd8\xe1\x62\x46\xd4\x63\x36\x08\x4a\x58\x66\xdf\x93\xf2\x16\xf1\x19\x86\xb8\xc7\x15\xb5\xf5\x23\x42\xa9\xbe\x94\xcb\x25\x09\xd9\x96\xf0\x82\x06\xc5\xe7\x27\x50\x52\x26\xa6\x08\x40\x05\x48\x50\x9a\xc8\xec\x99\x0f\xbe\x54\x07\xbf\x0d\x4d\xb5\x15\x7e\x89\xaf\xa9\xf6\x0f\x3f\x8b\x72\x09\xda\xf0\xeb\xfb\x52\x1d\xfc\x36\x34\xd5\x56\xf8\x25\x64\x66\x91\x16\xfc\x8a\xa7\x96\x33\x03\xa5\xe4\x31\x6b\x89\x2c\x07\x5c\x5d\xe5\xc8\x22\x96\xbe\x01\x29\xf1\xf8\x40\xde\xcc\x67\x87\xb6\x71\x52\xf9\xd6\x63\xb5\xc0\x48\x67\xa6\x2b\x43\x51\x50\x2a\x18\x82\x28\x5c\x14\x6c\xd4\x0e\xd6\x8e\x1d\xc1\xa7\xe6\xcb\xd2\x23\x77\xa5\x85\xc5\xa9\xe7\xb0\xa5\xe0\x2f\xe5\x24\x5e\x0e\x2d\xd1\x92\xbc\x04\x19\x84\x68\x48\x6d\x2c\xb9\xf0\x6f\xfd\xeb\xc5\x8b\x49\x08\xca\x65\x16\xd5\x7f\x43\x4e\xed\xcd\x02\xc0\x40\x2e\xa1\x08\x10\x95\xe2\xfd\xf2\xbd\x61\x8c\x93\xcc\x51\x14\x18\x2f\x38\x25\xb6\x4a\xae\x79\x41\x7b\x0a\xbf\x0e\x13\xb0\x6b\xe5\x5a\xa7\x5a\x6a\x48\xc6\x7a\x3f\xaa\x45\xd6\x69\x6d\x16\x8d\x20\xa5\x0b\x4d\x01\x6b\xc5\xcb\xce\x0e\x78\x3a\x79\x1e\x81\x15\x17\x07\x0a\xbc\xce\xe2\x35\x15\x78\xd7\xdc\x3a\x60\xdc\x95\xb2\xd2\xcc\x8f\xbb\x4b\xa6\xc4\x7c\x2d\x86\x5e\x38\x94\xf0\x9b\xec\xce\xfb\xff\x0f\xa0\xb1\x2a\xdc\xf4\xc4\x87\xe2\x9c\x2a\xe2\x9a\x0a\x66\x2a\x16\x64\x8f\x13\x40\xd1\x98\xfe\x26\x91\x55\x60\x58\x2b\xaf\x63\x92\x1f\x53\x64\xbe\x08\x73\x3d\x15\xbc\x28\x92\x46\xef\xd3\xe3\xef\xe6\x6f\xb7\xf7\x7f\x3c\x9a\x9f\x7f\xbb\x7d\x34\xff\xb8\xbf\xbf\x7c\xe8\x5f\x0c\x2e\xcd\xfe\xe7\x8b\x87\x01\xfa\x5f\xb4\xf1\x83\xdb\xbb\xdb\xcb\xca\x48\x90\xe2\xbc\x1b\xe5\xf5\xb7\x49\xb0\x70\x6e\x85\x48\x50\xc4\x33\x36\x96\x04\x3c\x1a\xcc\x3e\x59\xb0\x98\x30\xd4\xd1\xa1\x09\xb1\xc8\x36\x1d\x22\x97\x5b\x88\x0d\x05\xdc\x75\x63\xc9\xb0\xf4\x08\x0e\x26\x36\xb0\x09\x60\x1b\x51\xfd\x01\xe6\x62\x45\xe6\xc4\x35\x05\x9e\x15\x87\x2c\x87\x19\x2a\xa7\xac\xf0\x39\x53\x20\xd3\x1b\x3b\xde\x6c\xd6\xcf\x5d\x36\xeb\x80\xd6\x76\xb7\xd8\xd1\xea\x7d\x8b\x16\x76\x89\x59\xfc\xbd\x3b\x71\x2b\x34\x20\xfe\xdc\xea\x79\xf0\x15\xc1\x83\x70\xdf\xd1\x78\xfe\x26\x03\x21\xbd\x6a\x47\x8b\x33\x1b\x8b\xb9\x49\x2c\xce\xcc\x3d\x3f\x2d\xdf\xd2\x31\xcb\x2d\x34\x25\x3c\xa8\x18\xf8\xfd\x09\x58\xeb\xf5\x1b\xe1\x44\x5d\x32\x05\xe2\x71\x02\x44\xdc\x7a\xce\x10\x44\x09\xa5\x6e\x41\x93\x28\x68\x13\x85\x8d\xea\xcc\xd1\x1a\xc7\x36\x7b\xd7\x74\xbe\x6d\x57\x8e\x68\x7b\x9e\x4c\x12\x05\x9a\x44\x6a\x42\x24\x22\x23\x34\xe7\x1e\x9a\x12\x4a\x51\xf4\x68\x84\x91\x04\x41\x30\x45\x2c\x98\x31\x34\x12\xdc\x41\x2a\x58\xb2\x06\x6f\xa0\x5f\xc2\xf5\x4a\xdc\xa1\x2d\xf0\xd4\x24\xcc\x26\x41\xd0\xbe\xff\x4a\x98\x72\xb8\xf9\x8f\xa6\x71\xf3\xbb\x35\xc1\x6c\xac\x5b\x6e\x95\x45\xce\xa8\xd5\x12\xd8\x59\xa0\xa5\x63\xa5\x27\x43\x30\x0b\x67\xab\xa3\x66\x01\x6a\xfe\x77\x33\xa8\xf9\x10\x9e\x54\x56\x32\x39\xd7\x68\x89\x88\x44\xd1\x63\x12\x0b\xdb\xe3\x9a\x5f\xa3\x68\x4c\x3f\x3b\x92\x6e\x92\xd4\xa7\x60\x36\x29\x7d\x7d\x38\x98\xd9\x3e\x5b\xe6\x1d\x43\x13\x19\xfa\xcf\x66\x30\xf4\x82\x52\x3e\xbd\xf1\xa8\x22\x1f\x30\xb3\x4b\x20\x67\xd0\x96\x4b\x01\xf9\xed\x49\x14\xb4\xbf\x03\x33\xd7\xfb\xd7\x91\x32\xce\x73\x3a\x78\x8e\xa6\x5c\x3c\x05\x7c\x94\xd8\x59\x72\x91\x33\xe4\x2c\xf4\x31\xf4\xf5\xd1\x11\x32\x91\x90\xb1\x9b\xbb\x16\x5d\xac\x83\x90\x37\xdc\x2e\xc3\x5b\xbe\x10\xd2\x6f\xaf\x4c\x42\xfa\xed\x75\x84\xd4\x23\x24\x59\x21\xa4\xe3\xeb\xa3\x23\x64\x22\x21\xd3\xd2\xc2\x5d\xa6\x3d\xaf\x60\xb2\x61\xb8\xe7\x84\x29\x89\x46\x5c\xa0\x81\x8f\xd1\x3e\xf7\x98\xd2\x8b\xd9\x5a\x94\x41\x3f\xed\x8a\x41\x2b\x46\x13\x53\x84\x01\xd3\x6a\xbe\x4d\x78\xea\xde\x03\x56\x86\x27\x17\x2c\x32\x22\x56\x64\xa1\x88\x9e\xd7\x6c\x13\xa6\xba\x62\x88\xbd\x62\x6a\x1b\x48\xe8\x5e\xc0\x88\xcc\x0e\x17\x51\x29\x15\x0e\x1d\xa2\x4a\xb5\x52\x77\x6a\x02\x22\x70\x7b\xd8\xd2\x3b\xba\xa2\x4d\x78\xaa\xf8\x7d\xec\x61\xe2\xa9\xf0\x29\x4f\x99\xab\x7c\x02\xe2\x60\xa1\x57\xf1\xeb\xc6\xed\x1a\x18\x3f\xae\x8d\x16\x49\x21\xef\x0b\x15\xc4\x6c\xb5\xd2\xf4\x1c\x4a\xae\x7a\x15\x77\x69\x08\xad\xc8\x04\x86\x97\xd9\x44\x99\x0f\xb9\x7c\x63\x10\x24\x44\x3e\x7e\xef\xf7\x11\x30\x45\x94\xd6\x82\x33\xac\xd7\x76\x3d\xe1\x72\x09\x46\xcf\x26\x63\x92\x36\x81\x8d\x49\x65\xd4\xb7\x27\x61\x0d\x75\xd1\x92\x6c\x67\xf4\xae\xb5\x73\x94\xf8\xb5\x8a\x2c\x6f\xdb\x8a\xde\xfa\xb6\x10\x2c\x50\x17\x05\xee\x25\x58\xdf\xb8\x96\x8e\x09\xc1\x72\xb1\x06\xb2\x5e\xd6\x40\xaf\x24\x00\x62\x30\x53\x88\xbb\xfe\x2f\xff\xeb\x18\x30\x5d\xdf\x56\xc9\x04\x24\x46\x0b\xd1\x52\x50\x5d\x60\x51\xdb\x48\x5c\x5f\x20\x8b\x3b\x0e\x3e\x91\xe0\xe2\xf0\x82\x3c\x4a\xa4\x42\x7c\x84\x5c\x41\x1c\x2c\xe6\x61\x1c\xe1\x16\x18\x6f\xae\x32\xd9\x8f\xd7\x3f\x5d\xfd\xf4\x49\x9f\x0e\x07\xbd\xa1\xac\xea\x9c\xc2\x36\x75\x82\xa5\xf6\x0e\x4e\x60\x45\xbe\xf5\x14\xc9\x67\xfa\xd5\x04\x2b\x64\x73\xc4\xb8\x42\x0e\x56\xd6\x04\x61\x36\xf7\x79\x14\x94\xf0\x04\x99\x0b\x0b\x2b\x18\xf3\xc8\x21\x84\x21\x4e\x60\x4c\x7e\xda\x08\x78\x7e\xda\x74\x21\xf3\xa3\xf0\x17\x15\x27\x3e\xb6\x8f\x83\x8d\xeb\x61\x2d\x69\x8f\xdc\xe7\xe8\xa6\x8f\x39\x7e\xdc\x49\x65\x11\x41\x7e\xc3\x37\xf6\x89\x15\x11\x71\x5d\x4d\xce\x97\x04\x7e\xe3\x32\x73\xfd\x19\xd7\xe8\x9a\x29\x79\xe9\x97\x6e\x2b\x65\xdd\x2e\x54\x44\xbc\x40\x55\x44\x5c\x33\x05\xea\x07\x57\x96\xfd\x88\x48\x84\x17\xd5\x10\x24\x7d\xd3\x42\xdc\xd3\x77\xba\x21\x49\xaf\x22\x02\xa5\x18\x22\x94\x6a\x8c\xe2\x9e\x9d\xeb\x20\xbd\x24\xe1\x7c\x67\x51\xc6\x49\x66\x1e\xac\xb7\x1c\x69\xb2\x6d\x8d\xbf\x1f\xa9\x44\x8a\x7f\xbb\xff\x5e\x12\xc3\xbf\xdd\x7f\x8f\xde\xee\xec\x4e\xf0\x6f\xf7\xdf\x3b\x7e\xe7\xe1\x77\x18\x89\x23\x6c\x59\x5c\xd8\x84\x8d\x91\xe2\xc1\xe7\xfd\x2f\xc8\xd7\x87\xf0\x28\xc8\x8e\xf8\x75\x11\x3f\x35\xfa\xa9\x99\xf8\x59\xdb\x03\xe2\x46\x96\x73\x8b\xc0\xee\xfc\x2f\xd8\xd0\x71\xda\x80\x7c\x7b\x04\x3a\x0b\x50\x87\x05\x48\xc9\xe4\xa2\x42\x16\xa0\x31\xeb\xb3\x86\x6c\x46\x0c\x32\x70\xf7\x20\x4a\xda\x4d\x11\x34\x87\x02\x1b\x24\x91\x0b\x02\xe9\xee\x82\x58\xb3\x65\xab\x9d\x6b\x7a\xe2\xa3\x9e\xfd\x4d\x4b\x9b\x24\xc3\xec\x46\x90\x54\x01\x6c\x4d\x82\xfd\x13\x68\x91\x88\xa4\xdd\xd6\xa6\x14\x2e\x56\xbc\xfb\x70\x3b\x41\x18\xf9\xeb\x80\x37\xf7\x58\x29\x10\x9a\x27\x12\x26\xb7\xd3\x74\xde\xe4\xc8\xa9\x0b\x18\x7b\x14\x0b\x04\x33\x57\x80\x94\xbe\x43\x0e\xf2\x83\x51\x5e\x0f\x24\x1a\x79\x22\xc8\x09\x4e\x27\xc4\x9a\x2c\x1d\x7a\x70\xe2\xcf\x82\x18\x58\xae\xb2\x45\x8b\x0e\xf9\x2e\x62\x68\x0c\x9c\x2b\xde\xaa\x77\x98\x35\x4f\xc9\x3e\x2e\x22\xd9\x49\xc0\x32\x74\xf9\x02\xca\x43\xad\x63\xea\xe0\xb4\x57\x38\x3d\x82\x54\x81\x2f\x3f\x7c\x24\x55\xbc\x65\xb1\xc1\xef\x24\x5e\xae\xbb\xd0\x3b\x4b\x6c\xc2\x1d\x3e\x06\x06\x3c\x97\xa7\xd5\x48\x75\x6c\x87\x24\x8f\x7a\x61\x49\x5c\x6f\xd7\x42\x93\x84\xf6\xda\x94\xa2\xc8\x0c\x55\xc2\x53\x58\x70\x18\x77\x04\xa9\x44\x31\x47\xdc\x0b\xe9\x1d\x13\xc5\xf8\xb1\xfa\x22\x56\xc9\x19\x9b\x1c\xd4\xea\xbe\xe6\xc4\xfe\xca\xbd\x4c\xb3\x15\x64\x7e\xf5\xb5\x97\xe4\x85\xe2\x06\x54\x16\x26\xf7\x93\xf0\x7a\x5c\x5b\x26\x46\xd8\x84\x99\x12\xd8\x52\x60\x2f\x93\x5e\x63\xf2\x0c\x0c\xf9\x54\x0d\x7f\xf3\x13\xf2\x64\x90\x11\x8f\xc7\x2e\x1e\xf2\x67\xed\xce\xee\x94\x08\x4b\x76\xa1\xaf\x18\x0f\xab\x04\x52\xdf\xec\x1f\x14\x75\x4a\x4f\x8d\x37\x66\xf5\x52\x71\x90\x70\x6c\xe1\x66\x1f\x0f\x05\xa1\x94\xa3\x2f\x83\x3b\xf4\x08\x8e\x4b\xb1\x3a\xd4\x53\x48\xcf\x2a\xde\x91\xbf\x1d\x45\x2d\x66\xfb\xcb\xe0\x6e\x31\xd7\x85\x12\x3b\x31\xed\xb4\x3e\xb1\xe3\x3b\x26\x15\x0d\x26\x08\x85\x70\x80\x49\x4a\x18\x20\xc2\xc2\xd7\xb0\x0b\xb0\xc2\xcc\xe5\x22\x4c\x6e\x06\xe9\x4f\x2b\xc7\x31\xd1\xed\xce\xe2\xec\x19\xbb\xdb\xf7\xa7\x77\xad\xd4\xd4\xca\xee\x57\x5c\xea\xdc\xee\xb8\xd3\x45\xa9\x09\x68\xce\xbe\xe2\x72\x7d\x8c\x2b\x5f\xae\x7e\xb1\x6d\x50\x2f\xec\x3f\x3d\xa9\x1c\x60\x2a\xba\xa1\xc1\x05\xb0\x57\x3e\x8c\x9a\xdb\x24\x20\x9f\x82\x88\x39\x8a\x77\xf3\x77\x9e\xeb\xfa\xbf\xfb\xc7\x16\xd3\xb6\xcc\xa7\x1f\x0f\x1b\xbd\xb3\xad\x42\xe2\xad\x65\xbd\x02\xd7\x24\xcc\x12\x10\x76\x6f\x6b\xbe\xb6\xa6\x16\x8f\x61\x4d\x60\xa3\x2f\x19\xd3\xe3\xba\x94\x58\xc1\x2b\xea\x6f\x84\xd9\x7c\x1a\xce\x92\x83\xc9\xe2\xef\xf8\xa7\x66\x85\x24\x5a\xa6\x73\xcb\x88\x11\x45\x21\xd6\xe0\x7f\x06\xdf\x94\x27\x1c\xe5\x1c\x32\x09\xa9\xb9\xbb\x68\x63\x88\xc5\x8b\x9b\x8c\x61\xd4\x1a\xc2\xd6\x79\x18\x9f\x0a\x0a\xaf\x57\xe7\x5c\xad\xe7\x85\xb4\x7d\x65\x91\x00\xaf\x70\x4d\x6a\x9e\x9b\x61\x6f\x80\x79\x1f\xb0\x58\x2a\xdf\xff\xa0\xd6\x9b\x61\x73\xc6\x4b\x7e\x3f\x7f\x53\xe0\x44\x3d\x07\xe6\x5d\x11\xbf\x4f\xcd\x0c\xc6\x93\x63\x6a\xd3\xef\xb6\x4e\x53\x5a\x17\x89\x6f\x70\x43\x7a\x43\x67\x5b\xbf\x69\x53\x1c\xd9\xce\x50\x2e\x61\x86\x77\x9a\xe5\x5d\x67\x1a\xa5\x26\x6e\x92\x07\xb6\x8d\x9d\x5b\x98\x26\x0c\x6e\xe7\x01\x96\x31\xc8\xb8\x36\x16\x77\xe8\xdf\xc2\xf4\xf5\xeb\xd7\x45\x5a\xd0\x44\x53\xd4\x48\x4a\x2e\x24\x25\xbf\x86\x4a\x53\xd5\x9d\x0b\x49\x75\x73\x71\x83\x6c\x94\xae\xfc\xbe\x1f\x95\xb2\x06\xf8\x19\x2e\x64\x5b\xd5\xe5\xf7\x1e\x5d\xc8\x03\xd5\xd8\x20\xac\xf1\xe1\x62\x5d\x75\x72\xf1\xb1\xaf\xbf\xd3\x66\xab\xae\x76\x7c\x5f\x06\xf9\x85\x45\xba\xa1\xd9\x93\xa5\x13\x99\x84\xe3\x42\xe6\x62\x64\x07\x4a\x81\x34\xa5\x5e\x7c\xfc\xed\xea\xf0\x14\xea\x8f\xea\x08\x95\xd9\x1f\x7c\x3d\x38\x5d\xf6\x07\xe6\xd7\x03\x55\x65\x1e\xd7\x74\xd6\x6c\x85\xd6\x0e\xfc\x01\x28\x45\xd8\xb8\xa5\xc1\x57\xec\x72\x79\x31\xa4\x2a\x51\x8f\xd0\x7b\x6c\x59\x40\xa3\xcb\x77\x9f\x60\x7e\x6e\xb8\x20\x08\xb7\x0d\x24\xc9\x98\x61\x7a\x6e\x60\x4b\x91\x67\xac\xc0\x40\x0e\xb7\xc9\x88\x80\xf0\x15\xf3\xf1\x77\xb3\x7f\x77\xfb\xf8\x70\x77\x6d\xde\x5c\x0c\x7e\x8f\xbb\x3b\x32\x7a\x40\xb3\x88\xf5\xae\xd9\x88\xa9\x9d\x58\x5f\x3c\xa2\x9a\x3d\x45\x5a\xa4\xf2\x87\x53\x2b\x9b\xfe\xaa\x9f\x48\xc9\x82\x5a\x55\x0f\x3b\xbd\x04\xde\x06\xdb\xa5\x1d\x0b\xb4\xa6\x27\x35\xfd\x6e\x37\x38\xa9\x79\x90\x39\x4c\x7f\xce\xfb\x14\x70\x78\xfb\xf8\x15\x01\x6a\xb7\xce\xf1\x67\x6f\x63\xf2\x07\x18\x6e\xbd\xf4\x47\x89\x46\xc1\x30\x4b\x36\x87\xe1\x43\x82\x69\x44\x57\x85\x1f\x50\x9a\x71\xb4\xea\x37\x8e\x65\xe1\xf3\x13\x57\xbc\xc5\xf0\x4c\xc6\x8c\x3f\x30\x64\x36\x06\x32\x70\x38\x90\xf1\xff\xbb\xc6\x52\x7d\x19\xdc\xb5\x0d\x2e\xd9\x45\xdf\x36\x09\x0b\xbc\x29\x96\x0a\x7d\x19\xdc\x95\x9c\x24\xf0\x9b\x37\xaf\x77\x68\xbb\x34\x40\xd2\xc3\x01\xe4\x35\x1f\xb7\x10\x8b\x29\xee\xee\x9a\x8f\x2b\xc5\x47\xad\x6b\xdd\x46\xab\xad\xc2\x99\x79\xc0\x36\xe1\xf1\x00\x1f\xdc\x37\x7b\x96\x34\xf3\x45\x58\x58\x13\xf4\x23\x76\xdc\x5f\xd1\x3d\xf7\x98\x55\xe8\x09\x45\x0d\xe1\x46\x33\x81\xed\xdb\x41\x3e\xd8\x24\x8f\xa5\x29\x7c\xed\xed\x62\x8f\x65\x1b\xed\x71\x0a\x66\x1f\xbc\x96\x16\x04\xc4\x82\xf6\xc1\xcb\xdc\xdc\x16\xd7\x62\x49\x20\x2d\x0a\xb2\x8d\x66\xc6\x82\x7b\xae\xd1\x5b\x5a\x95\x62\x48\x15\xf5\x23\xb5\x99\xa9\xa1\xb5\x32\xcd\x35\xe1\x86\x27\x87\xc2\x8e\x37\x38\x3d\xb4\x5a\xf3\x96\x38\xcb\x3b\xcd\xf4\xae\xb3\x8d\x4a\x89\x66\xc3\xb1\xf5\x31\xa5\x84\x8d\x0e\xa8\x72\xc1\x1f\x91\xe9\x0f\xe9\x10\x43\xda\x24\x35\x0e\x2c\x2e\x92\xaa\x33\xe3\xc6\xd9\x70\x1d\x9a\xc1\x78\x8e\x49\x81\x0f\xbe\x67\x3b\x18\xfd\x7d\x19\xdc\x21\xf3\x21\x63\xaf\x59\x52\xb3\xd5\xaa\xb0\x99\xee\xfd\x33\x50\xb7\x85\xce\xdd\xef\x76\x4b\x5c\x7b\xc2\x0c\xef\x34\xcb\xbb\xce\x34\x2a\xc5\xa0\xf8\x23\xbb\x18\x72\xaf\xa5\xef\xa8\x7b\x66\xd0\xf9\x63\xb6\x1c\xbb\x6f\xec\xd3\xda\xa6\x97\x7d\xac\x40\xf2\xc6\xbe\x84\xcd\xa6\xd9\x1b\xfb\xf2\xed\x50\x1a\x58\x82\x53\x0a\xf6\xea\x2e\x35\xca\xc7\x5f\x09\x4c\x83\x0b\x28\x09\x03\x91\xb1\x61\x69\x4a\x6c\x35\x31\x05\xfc\xe5\x81\x54\x46\xef\x97\x5f\x12\x2f\x38\x28\x7b\xab\x93\x8e\x98\x9c\x60\x9b\x4f\x4d\xdf\xb4\x19\x3d\x92\x98\x00\xc8\xeb\x51\x1e\x05\x80\x3f\x49\x6b\x33\x96\xc3\xa1\x4c\x80\x8c\x27\x6a\x39\x5b\xa7\x6f\xb5\xf6\xd0\xd7\x73\xd6\x41\xbe\xfd\xd9\x31\xbd\x2d\x2a\x38\x91\x01\x2c\x4d\x97\x53\x62\xcd\x8d\x1e\xc3\xca\x13\x19\x57\x43\x6c\x3e\x7b\xf7\x26\x26\x80\x6d\x10\xd2\xb4\x28\xb1\x9e\x70\x30\xed\xda\x73\x07\xcc\x17\x34\x65\x90\x27\x2d\x72\x1c\xd5\x84\x4f\xcd\x70\x1a\x41\x14\x51\x5e\xd4\x81\xb1\x20\xb6\xe9\x5b\x6d\x99\xf3\xa6\x8d\xf8\x66\x94\x00\x58\x34\x93\x33\x98\x20\x4c\x81\x60\x98\x9e\x04\x7f\x9e\x1b\x12\x28\x58\xa1\x6d\xcb\x15\x58\xf8\x4c\x1b\xbc\xc8\x2c\xe8\xb6\xfc\x24\x26\x21\x55\xbf\x7b\xd0\xdf\xf7\x5d\xcc\x3b\x14\xde\xf6\x9d\xcf\x3b\x7c\x12\xc4\x0e\xa7\x3c\xa8\x07\x09\xfe\xdc\xaf\x49\xd7\xf2\xab\x0e\x16\x63\xc2\x4c\x0a\x23\x65\xf4\x12\xef\x92\x4a\x90\x12\xbe\x21\xd6\x17\x53\xdc\x8d\xd9\xc0\x9e\x21\x34\xe4\x4a\x71\x47\x43\x4e\xf0\xa9\xf9\x72\x12\x5d\x6e\x29\x8b\x53\xcf\x61\x79\x04\xb5\x8e\xe0\x09\x39\xe7\xff\x33\xae\x22\xbc\x11\x2e\x2a\xe3\xfc\xfe\x7f\xe9\xb4\x15\xc6\x33\xd6\x04\xfb\xf6\x36\xe5\x30\xf0\x6d\xc9\x36\x1d\xc0\x93\xd6\xc5\xfd\x9e\xbf\x83\x29\x95\x64\xac\x7b\x8c\xf2\xaa\x54\xd5\x11\xd3\x3e\x0e\xd8\x21\x02\xf5\xa3\x31\xe9\x34\x9d\xeb\xb2\x41\xbf\x61\x9d\x46\x8f\xe0\xaa\xc1\xfa\xf0\xae\x7c\x5d\x3f\x80\xcb\x85\xd2\x83\xfc\xa6\xe0\x81\xa0\x3e\x1c\x91\x4e\xc3\x0e\x9e\x99\x14\xd8\x58\x4d\x8c\x5e\xca\x65\xab\x19\x96\x5c\x4b\xd2\x7f\x64\x71\xe9\x5c\x24\x7d\x18\x3c\xea\x73\xb4\xae\xdb\x0e\x53\x6f\xfb\x68\x30\xef\x6e\x3d\x67\x08\xa2\x00\xef\x56\x04\x0f\x84\x77\xe1\x88\x0a\xd3\x27\xe5\xd6\xca\x82\x04\xf8\xff\xed\x81\xbf\x16\xfb\x9b\x01\x7f\x67\x5e\xc4\xe7\xac\x49\xb5\x1e\xf8\x37\xf3\xc8\xdb\xa0\x57\x7d\x25\xe8\x89\xd0\xba\x5f\xb6\x73\x3b\xfa\xbc\xcb\x28\x31\x1a\x0b\x3c\x3c\x09\xb5\xbd\x59\x64\x74\x73\xf7\xf1\x34\xa1\xc2\xa8\x29\xbe\x2c\x25\xf8\xdc\x3b\x99\x8b\x38\xb2\x35\xa9\x4a\xc8\x2c\x81\x49\x12\xd6\x60\x6a\x2f\xe1\x77\x59\xfe\xe7\xb1\x04\x9d\xff\xab\xc1\xff\x55\x4c\x99\xcd\x7c\x55\xdc\xe1\x3a\x0d\xcf\x57\xdd\xcc\xb5\x92\x55\x40\x29\x71\x25\xf9\x0f\x14\x38\x8a\xfa\x28\x12\x5d\xf5\x21\xd0\x01\x29\xf1\x38\xf1\xbe\x82\xa6\xe3\x30\xec\xfd\x81\xa2\x42\x3f\x9e\x33\x7a\x15\xdf\x45\xd7\xe7\xce\x90\x7f\xe0\xb3\xc7\xc0\x7f\xf8\x80\x1a\x62\x66\x07\x9f\xe6\x8e\x00\x5e\x24\x1a\xff\x8e\x39\xd3\x83\x7f\xc0\xcc\x0e\xc3\xf8\xbf\x0f\xd3\xc3\xf8\xad\x00\x74\xb8\x0c\x40\x5d\xee\x7a\xae\x66\x81\x7b\x53\xc2\xcf\x8a\x8f\xcc\xdf\xc6\x9f\xc3\x6d\xd0\xc3\xdf\x8b\x44\xfb\xf1\x77\xc3\x6d\x88\x96\x91\x8e\x26\xfe\x9c\x46\xe1\xaf\x70\x2c\x57\xdf\x95\x0d\xce\x3c\xba\x9f\x4a\x77\xfd\xb3\x2a\x76\x08\xd9\x8c\xcb\x59\xf6\xf5\xe1\xe5\x45\x79\xb9\x56\x31\xdf\xfb\x93\x71\x43\xde\x35\xc5\x71\x6f\xd6\xb0\xe4\x43\x62\xb9\x41\x3c\x24\x9a\x90\x7c\x08\xf2\xe1\x85\x08\xb8\x25\xd9\x7a\x0e\x86\xa9\xf4\x8e\x86\x15\xbe\xf2\x2d\xcc\x98\x8a\x73\xef\x6b\x57\xb8\x53\xc0\xa2\x8c\x4b\xdb\xfd\x76\x1a\x1f\x3b\x6d\x5f\xb0\x5e\x3a\xef\x74\x0f\x26\x2a\x19\x83\x5a\xc9\xbf\x1a\xad\xf6\x2a\x06\x29\x1f\x97\x80\xc0\x6b\xae\x65\x56\x0e\x15\x7f\xd7\x3c\xbc\x6e\xf1\xcb\xe0\x0e\xbd\xfa\x91\xaa\x5f\x83\x0b\x45\x7f\x1c\xab\x5f\x53\xd6\x02\x4d\x01\x61\xc5\x86\x70\x25\x05\xe6\x29\xab\xa5\xe9\xaf\xb7\x6f\xff\xa5\x57\x99\x5f\x5a\x22\x56\xcb\xdf\xb5\x28\xe5\x56\xf1\xf2\x71\x35\x11\x3b\xef\x63\x4a\x5b\x0a\xc4\x8f\xd7\x6f\x2f\x3e\xf4\xab\x42\x62\xf5\x78\x2a\x7e\x1d\x69\x6d\x78\x1a\x05\xbb\x77\x98\x35\x6f\x34\xa4\x16\x37\x94\x02\xb3\xcb\x41\xe2\x09\x7a\xfa\xfc\x1f\x9d\xa6\xfe\xf4\xa4\x22\xa3\xb9\xd1\x0b\x4a\xed\x0b\x42\x38\xb5\xfb\x4d\xc1\x62\x77\x23\x64\xe3\x5b\x69\xd1\x96\xcf\x84\x78\xad\xfc\x4d\x3d\x53\x2e\x9e\x1c\x6e\x43\xb7\xaf\xa7\xaa\x7d\x3d\xfb\xdc\xa1\xb3\xd0\x66\xa3\xbd\x52\xb2\x7b\xf9\x16\x75\x5f\xab\xfc\xa1\x8b\x7f\xa3\x4f\xe3\x4f\x73\x5b\xcd\x07\x84\x5b\x50\xc3\x33\xfa\x6e\xb8\x0d\x25\x24\x07\x34\x4f\xff\x6b\x42\x86\x77\x3b\x57\xa0\x0d\xe1\xbc\xa7\x0c\x6e\xca\x05\x07\xbf\x11\x66\x13\x0b\x2b\x2e\xda\x72\xdb\x75\xdd\xb0\x15\x1e\x2b\x09\xad\x19\xc7\xfe\x75\xe8\xd4\x40\xe7\xb6\x7c\x74\x1e\x61\xbc\x95\xa9\x0c\xe6\xf5\x16\x57\xb4\x28\xc6\x4c\xa8\x02\x28\x3f\xc6\x7c\x82\x39\x88\x2e\xc0\xac\x65\xe3\x78\x22\x1b\x8a\x87\xa5\x31\x8f\x9b\x70\x87\x8f\x81\x01\xcf\x3c\x92\xa5\xc0\x5b\x8c\xd1\x69\x09\x96\xff\x4a\xcb\xfb\x1d\xea\x3b\x8c\x01\x30\x1b\xdd\x60\x61\x09\x8e\x5e\x5d\x9d\x6a\x16\x31\x5d\x9d\x2e\x2b\x29\x82\x03\x51\xc0\xde\x7b\xb1\x44\x5b\x62\xed\x35\xc0\x9e\x95\x01\x58\x2d\x3f\x76\x1c\x80\x3d\xd3\x05\xec\x59\x8b\x00\x5b\xe3\x7b\xe2\xd1\xbb\x32\x00\xab\x55\x55\x78\x1c\x80\x7d\xa7\x0b\xd8\x77\x2d\x02\x6c\x8d\xc5\x35\xa3\x9f\xcb\x00\xac\xd6\x6b\xd6\xe3\x00\xec\x2f\xba\x80\xfd\xb9\x45\x80\x4d\x31\x50\x7b\xae\x9f\x1c\x9d\xe6\xad\x9a\xac\x23\xe5\x90\xf3\x70\xbf\x16\xa4\xa3\x12\xea\x2a\x52\x2b\x2a\xf6\xad\xfa\xb3\x4e\xf5\x55\xbc\xf0\x6f\xa2\xea\xdf\x75\xaa\xaf\xe2\xf4\xa6\x26\xaa\xfe\xe7\x4e\xf5\xa5\xa9\xbe\xc8\x4e\xcd\x8a\x55\xbf\xf6\x96\x4d\x71\xb7\x84\xf0\xf4\x72\xa0\x55\xf2\xc5\x82\xed\x16\xcb\x67\xb7\xef\x3d\x47\xf9\xa1\xad\xe2\x6e\x50\xb2\xdb\xff\x16\x7e\xed\x10\x29\x09\x67\xe8\xd5\xe5\xa0\xaf\x19\xe8\x5e\x4a\x0b\xbb\xd0\xa2\x60\xb7\x62\x02\x34\xba\xe2\x60\x51\x07\xa7\x5d\x0b\x39\xc9\xf5\x52\x26\x56\x89\x89\xbc\x9e\xba\x4e\x65\x26\xb7\xf0\xc6\x99\x0e\x3d\x3b\x57\x51\x16\x3e\x32\x3d\xa5\xd8\xc2\x05\xb0\xb5\x8a\x63\xf2\xd6\x5f\x36\xe5\x1d\x6c\xc5\xb8\x1b\xb8\x84\xad\xb9\x6e\x7f\x82\x9b\x1c\xb9\x65\xef\x92\xfa\x86\x02\x94\x44\xfb\xd4\xa5\xd6\x71\x67\x0b\xa4\x5b\xc0\x94\xde\x39\x49\xc5\x0d\xe5\xea\x11\x6b\xfa\x31\xfe\x62\xc7\x84\x96\xe4\xd6\x11\x6b\x5a\xd2\xfa\xc7\xa1\x6d\x34\x80\x6d\x9f\x95\x0e\x30\x65\xf4\x02\xc0\x5d\xbc\x7c\xa0\x15\xf0\x79\x0e\x08\x62\xe5\xc0\x50\xda\xdd\xa4\x8d\xd8\x11\x5d\xf8\x3c\x82\xce\x4d\x95\x10\xe4\xac\x55\x42\x68\x51\x61\x1f\x2e\xce\x8f\xd9\x1f\xbf\x37\xbb\x00\xb4\xf0\x4a\xb6\x14\xbc\xb6\xa8\xc4\x28\x61\xbc\xe5\x97\x18\x49\x85\x95\x27\xbb\x1a\xa3\xba\x8a\xd8\x4f\xcb\xac\x62\x9f\x60\x87\x92\xe1\x20\x50\x69\xa3\x4d\x6e\xb2\x19\xfb\x1c\x0c\xa1\x32\x83\xd4\x96\x2a\x99\x15\x25\x5b\xd3\x56\x2b\xb8\xff\xad\xf9\xde\xa6\x3e\xe5\xda\x33\xcb\x6a\xb5\x7a\x3f\x7e\xef\xa7\x64\x5f\x9b\xb2\x5a\xae\x4f\xc1\xd2\x72\x5b\xad\xdf\x41\x3f\xe5\xb2\xfc\xa6\xac\x6e\x8e\xad\x20\x3d\x21\x86\xc8\x8e\x16\xd7\xc7\xb8\xf2\xe5\xf2\x8b\xf7\x6f\x82\x4b\xe8\x46\xd8\x82\xde\x0f\xff\x17\x00\x00\xff\xff\xf4\x5b\xaa\x19\x4f\x47\x01\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 83791, mode: os.FileMode(0664), modTime: time.Unix(1610049455, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x46, 0x18, 0x30, 0x9c, 0x65, 0x45, 0xc5, 0xa8, 0xf5, 0xdc, 0x65, 0x77, 0x37, 0xa4, 0x9, 0x92, 0x90, 0x6e, 0x4f, 0xeb, 0xfd, 0x1e, 0x43, 0xce, 0xcf, 0x48, 0x53, 0x93, 0xdf, 0xbd, 0x43}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
