// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (33.126kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x6f\xdb\x38\x12\x7f\xef\xa7\xe0\xe9\x80\x45\x0f\x8b\x24\x8d\xd3\xee\x1d\x76\x63\x2d\x52\x6f\xd3\x2d\xb6\x69\xd1\x38\x7b\xed\x9b\x40\x4b\x63\x89\x0d\x45\xaa\x24\x15\xdb\xf7\xe9\x0f\x92\xec\xc4\xb6\xfe\x58\x94\x6d\xfd\x71\xfc\x12\x20\x92\x86\x1a\xce\xfc\x66\x38\x9c\x19\xca\x97\xbf\x4f\x7d\x8a\x1e\x40\x48\xc2\x59\xdf\x38\x3f\x7d\x65\x20\x60\x36\x77\x08\x73\xfb\xc6\xdf\x77\xd7\x27\xff\x31\x7e\x37\x5f\x5c\xfe\xe3\xe4\x04\xbd\x07\x06\x02\x2b\x70\xd0\x84\x28\x0f\xb9\x14\x3b\x80\x2e\x4e\x7b\xbd\xd3\x1e\x3a\x39\x31\x5f\x5c\x12\xa6\x40\x8c\xb1\x0d\xe6\x0b\x84\x2e\x05\xfc\x08\x89\x00\x89\x28\x19\xf5\x0d\x57\xdd\xff\x6c\x3c\xbd\xe8\xe2\xb4\xf7\xca\x38\x8b\x9f\xe3\xa3\xef\x60\x2b\x64\x53\x2c\x65\xdf\x78\xaf\xee\xbf\x12\xe6\xf0\x89\x81\x88\xd3\x37\x6c\x4c\x29\x61\x63\x3e\xbf\x16\x11\x20\x74\x19\x08\x1e\x80\x50\x33\xc4\xb0\x0f\xd1\x43\xcc\x1a\x73\x3b\x94\x86\x79\x8d\xa9\x84\xcb\xb3\xc5\x03\xf3\xe7\x6d\x8f\x50\x07\xa9\x59\x00\x7d\x43\x11\x45\x61\x84\xc5\x7c\xac\x68\x34\x8a\x6d\xf0\x38\x75\x40\x9c\xcd\x09\xce\x62\x8a\x65\xea\xc7\xa7\x53\xec\xbe\x17\xc4\x79\x1c\x2c\xcd\xdc\x03\x91\x64\x44\xc1\x30\xef\x44\x98\xe2\xac\xca\x6c\xd2\x3c\x65\xf3\xf5\x11\x8f\x80\x3e\x49\x51\x12\x97\x25\x97\x96\xc9\x2a\xf0\x5b\x95\xe7\x2c\x3a\x0f\xa6\x01\x66\xce\x86\x97\x61\xa5\x04\x19\x85\x0a\xe4\xea\x8d\xe5\x5b\xf3\x01\xa5\x8d\x29\x18\xe8\x01\xd3\x10\xfa\xc6\x6b\xe3\x6c\x6d\xa8\xb3\xec\xb1\x2e\xcf\x12\xf1\xad\x5c\x0b\xb0\x7d\x4f\x98\x5b\x3c\x03\x0a\x63\x65\x61\xa5\xb0\xed\x19\xe6\xab\xb2\xf3\x56\x3c\xd0\x27\x9a\x10\x47\x79\x86\xf9\x3a\xfb\xf9\xcb\xb3\x14\xbf\x2b\x30\xae\x00\x1b\x67\x6a\xdb\xad\x83\xcc\x44\xe0\xa0\xe8\x4d\x4d\xaa\xf2\xbc\xb5\xaa\xb4\x39\x53\x84\x01\x53\x0d\xeb\xb3\x49\xed\xf4\x6a\x93\x36\x51\x61\xeb\xec\x86\x26\xec\x29\x81\x99\xa4\x58\xe1\x11\x85\xbe\x31\x03\x69\x98\x1f\xee\xfe\xfe\x15\x9d\xec\x55\x5f\xa5\x0d\xa3\x19\x7d\xd9\x3f\x3a\xa4\xae\xc1\x97\x7d\x6b\x2b\x47\xf0\x6d\xd1\x16\x16\x82\x76\x48\x5f\x57\xb7\xb7\x1f\xf7\xad\xb1\x8b\xe6\x35\x96\x8e\xa2\x3b\x4f\xb9\xaa\x9c\xa5\x9b\xcb\x37\xd2\x50\xbd\x72\xbe\x87\x52\xf9\xc0\x54\x82\x57\x19\x00\x38\x4b\x17\xb3\x37\x31\x94\x4f\x40\x18\xe6\x9b\xd4\xe6\x65\xed\xb9\x30\x08\xa2\xe7\x7e\x49\x2d\x81\x29\xf8\x47\x31\xb0\x61\xf6\x52\x41\xc6\xfa\x83\x52\x41\x60\x11\x66\x0b\x48\xd8\x4b\x39\xeb\x75\x82\x00\xbb\xb0\x42\xb0\xc6\xcb\x06\xf1\x04\x01\x25\x36\x56\x84\xb3\xe5\x9d\x9e\x8f\x09\xdb\x6e\x97\xa7\xb3\xb7\x48\xd9\x45\xb4\x2b\xcc\x34\xdf\x3f\x81\x52\x8e\x06\x9c\x29\x90\xaa\xde\x9d\xe5\x5b\x3e\x4d\x64\x23\x38\x57\xd1\x3f\x75\xef\x32\xd7\x68\xb8\x20\xc0\x54\xac\x39\xc3\x7c\x00\xa1\x88\x8d\x69\xd5\xed\xe9\x0d\xb0\xf0\x2d\x16\x4f\xca\x8f\x2e\x34\xea\xd1\x53\x4c\xe7\x33\xfe\x41\x81\x3f\xe7\x1c\x58\x78\x4d\x22\x9e\xd6\x08\x2b\x72\xbf\xcd\x0c\x32\xdd\x4a\xee\xba\x64\x45\x6c\xeb\x0c\x15\x4a\xb0\x42\xe6\x80\xa0\x84\x95\x99\xc5\xb2\x6d\xc8\x70\xe4\xa7\xf5\x5b\x24\xe2\xb9\xef\x4c\xe8\x72\x24\xbc\x95\x94\xb7\x95\x34\xca\xc5\x4c\xf1\xc4\xd2\xd8\xf9\x04\x93\x9c\xc9\x6d\x3d\xc1\x5d\x4c\x32\x6b\x8c\x04\x56\xe6\x27\x98\x9c\x9e\x9e\x56\x19\x40\x13\x4c\xf3\x41\x32\xa2\xa5\xe5\xbb\x05\xda\xd8\x8d\xa6\x3e\x07\xc0\x3a\xaa\xaa\x88\xf5\x67\xa5\xab\x21\x7e\x80\x2b\xd9\x51\x6d\x45\xcc\x23\x2c\x0f\x54\x61\x43\x08\xb0\xc0\x8a\x8b\x55\xcd\xc9\xc5\xe5\x48\x7d\xe7\xed\xd6\x5c\xe3\xf0\x7e\x37\x0d\xb8\x50\x03\x3c\x12\x84\x52\xde\x6e\x61\xe9\x84\x25\xc9\xbc\xd0\x62\x62\x07\x6a\x01\x45\x3a\xbd\xfa\xe3\xc3\xf5\xc1\xe9\x33\x9a\xd4\x81\xea\xb2\x8c\x37\xeb\xb5\x5b\xa1\x8d\x23\xff\x4b\x48\x54\xbb\x45\xa4\x83\xf9\x68\x36\xed\x47\x7a\x3e\x61\x0e\x51\x36\x41\xe6\xc3\xd5\x37\xd3\x2b\x39\xa0\x22\x61\xb5\x6d\x3b\x9d\x30\xde\x91\x0d\x75\xae\x94\xb7\x92\xf4\xb6\xd2\x46\x3b\xf1\x27\xc9\xdc\x06\xf3\xce\x91\xc3\xf1\x2a\x8b\x19\xd5\xe6\x59\x10\xba\xc4\xb6\x0d\x14\xe2\x65\x0c\xdd\xc3\xac\x6f\x10\x03\x49\xe2\x32\x4c\xfb\x06\xb6\x15\x79\xc0\x0a\x0c\xe4\x73\x87\x8c\x09\x88\x48\x23\x7f\xfc\x65\x0d\x3e\x7f\xba\xbb\xfd\xfc\xd1\xba\xb9\x1a\xfe\xb5\xde\x81\xb1\x34\xf6\x61\xf9\xad\x3f\x81\x06\x1d\xf4\x5a\x11\xdb\x1d\xf1\x59\x39\x12\xde\x4a\xca\xdb\x4a\x1a\xed\xc4\x63\x45\x33\xbb\x1a\xf1\xb0\xa3\x21\x90\x19\xf3\xfe\x9c\x03\x9e\xea\x65\xdc\x45\x91\x4a\xab\xd8\x3c\x26\x94\xea\x15\x41\x02\x2e\x49\x52\xb7\xc9\x69\x9d\xd9\x55\x9d\x7e\x68\x0b\x4e\x29\x38\xcb\xa5\x3d\xca\xdd\xff\x12\x98\x0c\x38\x53\x98\x30\x10\x1b\xaa\x3c\x71\x73\x94\x25\xe0\x47\x08\x52\x19\xe6\x9b\x37\xa9\x9a\x68\x1e\xe5\xb6\xf5\x21\x1d\x32\xe9\x61\x87\x4f\xac\xc8\xb3\x19\x26\x61\xdb\x56\x95\xee\x04\x40\x24\xa4\x15\x89\x95\x58\x4f\x3c\x20\xae\xa7\x9e\xa4\x75\xfe\x2a\xb7\x37\xaa\xb2\xc4\x36\x48\x4d\x7b\x39\x2a\xd5\xf5\x99\xc9\x6d\x55\x42\x4f\xc6\xb0\xb4\x02\x4e\x89\x3d\x33\x4c\x86\x55\x28\xb2\x6b\x97\xb9\xef\xde\x7e\x08\x0f\xb0\x03\x42\x5a\x36\x25\xf6\x3d\x8e\xc5\xae\x2d\x3b\x60\x11\xa1\x25\x01\x0b\xdb\xab\x40\x2f\x3d\x3e\xb1\x12\x31\x82\xa8\xa2\xbc\x39\x03\xae\x20\x8e\x15\x79\x6d\x59\x5c\x0a\xde\x30\x8c\x12\x00\x8b\x61\x4a\xc6\x12\x71\x97\x39\xc3\xf4\x24\xfe\xb7\x6f\x48\xa0\x60\x27\xbe\xad\x54\x5c\x11\x59\xda\xf0\x91\x66\x61\x6e\x4f\x57\x32\x02\xd6\xe6\x97\x07\x1d\xcf\xb4\xcd\xea\x90\xd3\xa8\xb7\xb3\xd5\x41\x61\x15\xca\xd1\xa2\xec\x2f\x1f\xff\xdd\xaf\x5f\xd7\x5a\x5c\x7d\x2c\x5c\xc2\x2c\x0a\xe3\x8c\xd6\x96\x8d\x64\x22\x72\xc7\x15\xe8\xa4\xc2\xa2\x0a\x1d\x44\xe8\xd0\xa6\x52\x3c\x30\xcc\x5f\x34\x89\x46\x5c\x29\xee\x6b\xd0\x95\xee\x17\xc9\x22\x96\x01\xb6\x09\x73\x0b\xda\xd4\xda\x1e\x72\x61\xfb\x7e\x1e\x1e\x00\x73\xf4\x4d\x71\xcf\x0d\x95\xf1\xb1\x95\xd8\x0a\x81\x29\x31\x5b\x3b\xc5\x92\xc5\x5a\x73\x56\x98\xd3\x27\xbf\xc9\x08\x75\xc9\x62\xab\x28\x1d\x6c\xae\x59\x45\x69\x3a\xc1\x27\xd6\x23\xb8\x4b\x53\xd9\x9c\x86\x3e\x2b\x43\x58\x32\xe0\x5c\x6a\xa8\x8d\x77\x71\x59\x15\x8a\x56\x44\x8b\xf9\xc9\x8b\x3b\x0f\x88\xf8\x55\x67\xac\x64\x6b\x61\x7b\x38\x0a\x7d\x72\xfd\x58\x16\xe5\x14\x53\xe2\xe6\x6f\x9f\x50\xc1\xf6\x32\xdb\x2b\x65\x4e\xb5\xd4\x19\x87\x2c\xca\x52\xa7\x50\x32\x9d\x07\xda\x36\x15\xf6\x2e\x72\x1f\xab\xe7\xcc\x92\x4b\x9b\xb9\x8e\xfe\x1a\xe6\x0a\x55\xdd\x9b\x17\x5d\x52\xc5\x39\x55\x24\xb0\x14\x4c\x55\x3e\x28\xd1\x60\x3e\x27\x9d\xa1\x97\xba\x45\xf3\x87\x8f\x06\xae\x0d\x82\x05\x48\xaa\x0c\xc1\x1c\xa3\x2c\x38\x75\xb0\x77\xd8\xaa\x48\x65\xb7\x10\x70\xa1\xf4\x90\xbb\x4e\x78\x20\xe0\x4d\x66\xa4\x33\xb0\x8f\xa7\x16\x05\xe6\xaa\xa2\xb3\x08\xb9\xba\x5f\x38\x64\x2d\xca\xe8\x95\xd5\xa9\x4b\xd9\xda\xed\xf0\x4e\x67\x4c\xc2\x82\x50\x59\x41\x28\x02\x2e\xc1\x30\x1d\xe2\x12\x25\x6b\xb3\x55\xad\xe9\xb7\x63\xb9\x88\xcd\xe7\x53\xe8\x8f\x40\x54\xb0\xbb\x25\xc2\x03\xb1\xbb\x64\x46\x95\xcd\x27\x37\x24\xcc\xa2\x2c\x65\x00\xff\xec\x0e\xfc\x73\x63\xfd\x6c\x7d\xb4\x01\xfe\xfe\xac\xca\x9a\xb3\x42\xd5\x79\xe0\xdf\xcc\xe6\xab\x0d\x7a\x39\x50\x82\x9e\x88\x7f\x1d\x97\x9d\xfd\x2e\x3b\x59\x45\x7d\xf1\x54\xd4\x77\x05\x1e\x9d\x24\xda\xd6\x2b\xeb\xb7\x65\x39\x2b\xdc\xa0\xed\xd9\x9e\xab\xac\x65\x2b\x54\xb5\xd8\xb3\x04\x26\x89\x22\x0f\x55\xca\x0f\xdb\x6c\xe4\xcb\x38\x83\xe3\x12\xd8\xc0\x12\x58\xb3\xc9\xac\x67\x9e\xb2\x3a\xfd\x5b\x9e\x79\xba\x99\x69\xa5\x9d\x80\x52\x12\x48\xf2\x3f\x30\xcc\x38\xcf\x7f\x4c\x59\xb5\x06\x81\x3e\x48\x89\x5d\xc8\xfa\x9e\x40\x16\xd3\x6d\xc3\x61\xc2\xfd\x81\xa2\xa2\x20\x23\x94\x9b\x45\xfa\x77\xbd\x48\x1a\x70\x7f\xc4\xdf\xf2\xe9\x5d\xbc\x7e\x44\x80\x1a\x61\xe6\xc4\x57\xdb\x8a\xa6\x8d\xcb\xf0\x5b\xcc\x9c\x24\x1c\xff\x79\x54\x1c\x8e\xa7\x02\xc9\xd1\x53\x20\x19\xf0\x20\x0c\x9a\x8d\x21\x2b\xa7\x2f\x6b\x76\x47\x69\x10\xf9\xdc\x81\x6e\x83\xe8\x86\x3b\x30\xdf\xd3\xf9\x9a\x20\xf2\x5b\x05\x22\x2d\x27\xd4\x20\x88\xde\x86\x4a\x2d\xfa\x59\x04\x48\x50\xf3\x0b\xdb\x2c\x2f\xb7\xd1\x38\xad\x6f\x27\x13\x60\x03\x79\x00\x69\x39\x30\xc6\x21\x55\x7b\x48\x53\xc4\x82\x40\x2f\x7f\xa2\xea\xb7\x77\xc3\xc1\x4f\xae\xfa\xad\x00\xd3\x3b\x06\xa0\x56\xcc\xd7\x12\x00\x52\xee\xee\x00\x7e\x1f\xb9\x7b\x04\x5f\x2c\x06\xa4\x3c\x40\x5f\x86\x9f\xe7\x10\x64\x0a\x44\x47\x40\xd8\x64\x7a\xf5\x9b\xed\x61\xe6\x82\x6e\x3e\x66\x99\xec\x10\x12\xac\xef\xa6\xc9\x84\xea\xd9\x75\x96\xca\xaa\x7c\x1b\x78\x05\xa6\xbd\x63\xec\x6a\x25\x85\xda\x91\x4a\x8c\x0b\x5c\x95\xe0\x9b\xa2\xec\x3c\x82\x93\xda\xd8\x11\xc4\x4d\x3a\xe0\xf6\x37\x5b\x3e\xb6\x4d\xe6\x14\x0e\x76\xdf\x36\x79\x0f\x33\x10\xc7\xb6\xc9\x46\xda\x26\x4b\x7f\xa1\x74\xbd\x6d\xb2\x34\x61\xf4\x3a\x8f\xfb\xdc\x05\x06\x7c\xe3\xd9\xa0\x0a\x21\xf2\xf8\x7c\x07\x11\xf2\xb5\x56\x8a\xe3\x50\x03\xe4\x21\x30\x07\xdd\x60\x61\x0b\x8e\x5e\x5e\x9f\x6b\xa6\x1b\xae\xcf\x9f\xf2\x0d\xf1\xc9\x1c\x70\xf6\x9e\x54\xe8\x4a\xa2\x7c\x05\xb0\xbd\x5d\x00\x56\x2b\x9d\xf2\x3c\x00\xdb\xd3\x05\x6c\xaf\x43\x80\xad\x79\xff\xb7\x02\xd8\x8b\x5d\x00\x56\xab\x11\xe1\x79\x00\xf6\x42\x17\xb0\x17\x1d\x02\x6c\xcd\x6d\xc8\x2b\x80\x7d\xbd\x0b\xc0\x6a\xb5\x01\x3c\x0f\xc0\xbe\xd1\x05\xec\xeb\x0e\x01\xb6\xc0\x41\xed\x39\x4b\x31\x3e\x2f\x9b\x9b\x68\x22\xb1\x50\xf2\x94\x79\x07\x6a\x8e\xb9\xc5\xee\x02\x53\xdf\xb7\xea\x7b\x47\xd5\x37\x7a\x5a\xa6\x41\xd5\x5f\x1c\x55\xbf\x33\xd5\x57\x69\x71\x69\x50\xf5\xaf\x8f\xaa\xdf\x99\xea\xf5\x1b\xd6\x6b\x57\xfd\x72\x70\x2a\x15\x0f\x76\x11\x9e\x6a\x25\xb2\x93\x9a\xc6\xd3\xab\xdb\x5e\xcc\xa8\x23\xb2\x55\x3c\x88\xcb\xc1\x83\xaf\xc9\x6d\x9f\x48\x49\x38\xab\x12\xe6\xbe\xe9\x50\x98\x5b\x33\xf4\x5b\xdd\x10\xea\xcd\x7b\x38\xb5\x9b\x89\xbd\x52\xe5\x98\x4c\x25\xe6\x5a\xf4\x24\xf0\x6b\x73\xb6\x95\x5b\xdc\x8f\xe8\x49\xa3\xa7\xe0\xab\x24\x99\x64\x55\x3f\xbe\x95\x0f\x9d\x61\x00\xe0\x68\x75\xd2\x7f\x0f\xa5\x22\xe3\x99\x61\xc6\xb5\xaa\xda\x70\x57\xb9\x09\xb0\x66\xdc\x0d\x03\xc2\x56\x16\xed\x48\xc0\x6d\x8e\xd9\x36\x2e\x77\x83\xaf\x28\x46\xc9\xbc\x97\x54\x6a\x9d\x0f\x5c\x20\xdd\x06\xa6\xf4\x4e\x15\x55\x77\x94\xcb\x67\x12\xf5\xa3\xfb\x45\xb7\x82\x16\x65\xea\x4c\xa2\x16\xb5\xfe\xf9\xc1\xb5\x01\xf0\xd2\x4f\xdb\xad\xfd\xd6\x9d\x56\xac\x17\xfa\x20\x88\x5d\x02\x43\xa9\x40\x46\x1e\xd0\xf9\xc5\xe3\x4a\xb5\x83\x38\x67\xa5\x0d\x42\xcb\x1a\xf6\xb1\xca\x45\x11\xfb\xdd\xb7\xf6\xef\x48\x77\x02\xbd\x0e\xb5\x0a\x55\xfe\xf9\xed\x12\x3f\x0c\x7a\x79\x16\x7f\xa7\x72\x8c\x6d\x30\x5f\xfc\x3f\x00\x00\xff\xff\xe3\x47\x25\xee\x66\x81\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 33126, mode: os.FileMode(0664), modTime: time.Unix(1598096698, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x70, 0xf2, 0x3a, 0x22, 0x53, 0x74, 0x3d, 0x32, 0x17, 0xfe, 0x97, 0x74, 0xd8, 0x78, 0x6f, 0xdc, 0x90, 0xef, 0x6a, 0x7e, 0xec, 0xee, 0x57, 0x9d, 0xd6, 0x69, 0xe5, 0x1b, 0x1, 0xbc, 0x9c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
