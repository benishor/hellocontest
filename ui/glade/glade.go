// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (62.86kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x73\xdb\x36\x12\x7f\xcf\x5f\x81\xe3\xcd\xb4\xb9\xe9\x38\x8e\xed\xa4\x77\xd7\xda\xea\x38\x8a\x9d\x64\xea\x8f\xc4\x72\x93\xbc\x71\x20\x72\x45\xa1\x02\x01\x16\x00\x2d\xab\x73\x7f\xfc\x0d\x3f\x64\x4b\x16\x49\x11\x10\x25\x92\xb2\x1e\x92\x49\x24\x2d\x08\xec\xfe\xf6\x83\x8b\xc5\xe2\xf8\xb7\x7b\x9f\xa2\x3b\x10\x92\x70\x76\x62\x1d\xbc\x7a\x6d\x21\x60\x0e\x77\x09\xf3\x4e\xac\x3f\x6e\xcf\xf7\xfe\x63\xfd\xd6\x79\x71\xfc\x8f\xbd\x3d\xf4\x01\x18\x08\xac\xc0\x45\x63\xa2\x86\xc8\xa3\xd8\x05\x74\xf4\xea\xf0\xf0\xd5\x21\xda\xdb\xeb\xbc\x38\x26\x4c\x81\x18\x60\x07\x3a\x2f\x10\x3a\x16\xf0\x57\x48\x04\x48\x44\x49\xff\xc4\xf2\xd4\xe8\x27\xeb\xf1\x41\x47\xaf\x0e\x5f\x5b\xfb\xf1\xef\x78\xff\x4f\x70\x14\x72\x28\x96\xf2\xc4\xfa\xa0\x46\xdf\x08\x73\xf9\xd8\x42\xc4\x3d\xb1\x1c\x4c\x29\x61\x03\x9e\x7e\x16\x11\x20\x74\x1c\x08\x1e\x80\x50\x13\xc4\xb0\x0f\xd1\x8f\x98\x3d\xe0\x4e\x28\xad\xce\x39\xa6\x12\x8e\xf7\xa7\x3f\xc8\xfe\x3d\x76\x1c\x08\x54\x31\x89\x33\x24\xd4\x45\x6a\x12\xc0\x89\xa5\x88\xa2\xd0\xc7\x22\x7d\x7c\x34\x20\xc5\x0e\x0c\x39\x75\x41\xec\xa7\x04\xfb\x31\xc5\x2c\xf5\xc3\xaf\x17\x56\xf8\x41\x10\xf7\x61\xb0\xc5\xf9\xdd\x11\x49\xfa\x14\xac\xce\xad\x08\x17\x66\x66\xc2\x80\xc5\x39\x65\xcf\xeb\x02\xf7\x81\x3e\x32\x5e\x12\x8f\x25\x1f\xcd\x92\x19\xcc\xd7\x74\xce\x59\x74\x43\x4c\x89\xc7\xac\x8e\x54\x58\xa8\xb2\x44\x3e\x16\x1e\x61\x36\x85\x81\xb2\x3a\x87\x9a\x54\x82\x78\x43\x1d\xb2\x21\xdc\x07\x98\xb9\x7a\xec\x08\x25\xd8\x3e\x16\xa3\x30\xd0\xa3\x1b\x0b\xbc\x8c\x02\x2b\x25\x48\x3f\x54\x20\xe7\xbf\x98\xfd\x2a\x1d\x4d\x3a\x98\x82\x85\xee\x30\x0d\xe1\xc4\x7a\x63\xed\x3f\x19\x6a\x3f\x7b\xac\xe3\xfd\x04\x4a\x73\x9f\x05\xd8\x19\x11\xe6\x15\x4f\x3f\x92\x88\x8d\x95\xc2\xce\xd0\xea\xbc\x2e\xbb\x68\xc5\x83\x65\x44\xc7\xfb\x0b\xcf\x9f\x53\x51\xa4\xaf\x12\xee\xbd\xe3\xec\xd4\xa1\xdd\xea\x50\x27\x52\x0f\x36\x86\xd4\x58\x7f\x77\x50\xdd\x41\xd5\x14\xaa\x39\x1c\xab\x0a\xaa\x3d\x47\x70\x4a\xc1\x9d\x8d\xf4\x64\x18\x80\x70\x86\xe0\x8c\xba\x9c\x29\x4c\x18\x88\x35\x83\x57\x87\xcc\x08\x19\x77\x26\x44\x72\x88\x5d\x3e\xb6\xa3\xc8\xd3\xea\x10\x96\x4b\xb6\xc0\xe6\x6c\x56\x7f\x25\x30\x0e\xb8\x50\xd6\xd3\x9f\x1a\xf2\x73\x09\x4f\x0b\x0d\x42\x26\x63\xcb\x18\x85\xcc\xd9\x9a\x12\x96\x12\xa5\xb1\x38\xf3\x65\x93\x2d\x9f\x19\xab\xfd\xa8\x01\x59\xa6\x7b\x65\xa9\xad\x2a\xb9\x95\xa4\xb7\x92\x04\x57\x92\x62\xe6\x93\x57\x21\x2e\x6b\xef\xf3\xe8\x97\x47\xec\x29\x5d\x86\xfd\x9f\x7e\x93\xad\xfc\x99\x04\x19\x3f\xae\xd3\xb3\x1c\x99\x7a\x96\xf9\x49\xcf\x7c\x39\xfb\x45\x71\x32\x41\x60\x05\xdb\x95\x48\xc8\x72\xa4\xd1\x2a\x6f\x71\x9f\x42\x96\x1f\xad\x32\xd5\x50\x96\x64\xa9\xaa\x6a\xab\xa7\x81\xcf\x2c\x13\x96\xe4\xf8\xca\xcd\x06\xcd\x25\xfd\xfa\x8c\xdf\x78\x10\x78\x9e\xdb\xd8\x39\xfa\x75\x39\xfa\x15\x5c\xc3\x02\x86\x81\x82\xa3\xb0\x91\x5c\x94\xc0\xce\xc8\x8e\xc4\xaa\xc0\xb5\x29\x61\xa3\xe5\x12\x5a\xc1\x5b\x54\x6f\x99\xa5\xc3\xc5\x33\x30\xcd\x6a\x67\x96\x9f\x8f\x59\x56\x3b\x93\xbc\x33\xc9\xed\x32\xc9\xef\x09\xa6\xdc\x4b\x4d\x32\x28\x45\x98\x27\xd3\xcf\xaa\xb1\xca\x91\x29\xb0\x87\x84\x29\xab\xe3\xc6\xe3\xae\xc3\x26\xa3\x78\x1f\x92\x61\xba\x17\xff\xf7\xc4\xba\xeb\xf3\x7b\x2b\xdf\x52\xbf\xe3\xf7\xc9\x92\xfb\xfc\xfe\xa0\xc0\x28\x97\xda\x65\xcb\x03\x7c\x69\x0a\x2e\x08\x30\x85\x15\xe1\xcc\xea\xdc\x81\x50\xc4\xc1\xb4\x94\xb5\x0d\xb0\x43\x98\x67\x75\xfe\x9b\x6f\x68\x17\x58\x83\x9d\xe8\x41\x36\x16\x80\xad\x62\x2b\xfc\x2e\x54\x8a\xb3\x77\x33\x9c\x34\xe7\x52\x16\x1d\xc5\x13\x1e\x2a\x5b\xaa\x49\xa4\x6e\xc0\xdc\x55\x4d\x71\x32\xe1\x34\x44\x06\x09\x2a\xfd\x60\xb9\xee\xd2\xc4\x68\x7b\x6a\xb4\x27\x20\x12\xc1\x9e\xe2\x7b\x12\xdf\x41\xee\x9c\xb2\x46\xa9\xc2\xa4\xeb\x92\x0a\x70\x80\xdc\x81\xb4\x5d\x18\xe0\x90\x2a\x33\x7b\x29\x15\x77\x46\xcb\x48\xf3\xd2\x13\xd9\x89\x84\xac\x47\x99\x9a\xf4\x01\xa1\x54\x9f\x2a\xe0\x92\x24\x4a\x95\x9b\xb7\xc8\x4c\x43\xa0\xbc\x84\x8b\x09\x0e\xf9\xc8\x04\x84\x7c\xb4\xc3\xdd\x8c\x2c\xda\x8a\xbb\x9c\xfd\x3f\xa4\x85\x3b\xf3\xdc\xdd\x52\x4f\x94\xbf\x66\x2d\x92\xa5\x8a\xb6\x86\x0d\xcf\x69\xb0\x72\x09\x52\x62\x6f\x4b\xb6\x3e\x97\xc7\x0e\x59\x54\xe5\x02\xde\x5a\x60\xa4\xc3\xe9\x8d\xa1\x28\xae\xc5\x4a\x40\x94\x44\x5d\x4f\x8a\xb3\x6a\xc7\x8e\xe0\x63\xfb\x21\xb6\x2b\xbd\x95\xed\x70\x1a\xfa\xec\x91\xf0\x6d\x35\x6f\xb6\xdb\xf6\x26\x9b\x78\x59\xa4\x04\x66\x92\xe2\xf8\x5d\xef\xc4\x9a\x80\xb4\x3a\xbd\x04\x0d\x85\x83\xe5\x57\x56\xcd\x7f\x3d\xdd\xf9\x81\xb8\x1e\x61\x5a\x5e\xd5\xe7\xd4\x7d\x5a\x61\x15\xd3\xe5\x54\x59\xa1\x4a\xbc\x5f\xb9\x2d\x9c\x2c\xca\x12\x55\x57\xd9\x84\x63\xe2\xaa\xfc\xa2\x02\xb4\xa6\xb8\x6b\x3b\x01\x3b\x57\x0f\x73\xa0\x25\x86\x7c\xac\x77\xd3\x62\x4f\x9d\xd1\xee\xd3\x15\x14\x46\xd3\xcd\x00\x6b\x25\x81\xd7\x0e\x78\x6b\x00\xde\x75\x00\x02\x2b\x2e\xb6\x14\x78\x3b\x8b\xd7\x54\xe0\x5d\x70\x67\x8b\x71\x97\x53\x64\x81\xd6\x84\xbb\x33\xa6\xc4\x64\x2e\x86\x9e\x3a\x94\xe4\x9b\xe5\x93\x8f\xfe\x8e\xa1\x31\x4b\xdc\xf4\xa4\x47\x20\x88\x8f\xc5\xc4\x26\x0e\x67\xb6\xe2\x9c\x2a\x12\xd8\x0a\xee\x55\x26\xe2\x6e\x87\x80\xd2\x05\xfe\x28\x91\x63\xb0\xc6\x99\xe4\x77\xfe\x63\x4c\x98\x47\x58\x10\xaa\x38\x2d\x2f\xad\xce\x87\xdb\xdf\xed\x4f\x57\x9f\xff\xb8\xb5\x3f\x7e\xba\xba\xb5\xff\xf8\xfc\xf9\xec\xa6\x7b\xda\x3b\xb3\xbb\x1f\x4f\x6f\x7a\xe8\x7f\xe8\xc9\x0f\xae\xae\xaf\xce\x36\xa6\x11\x05\x9e\xbc\x51\x21\xc0\xa2\x46\x4c\x3d\x9d\x91\x46\x98\xb8\xc9\x76\x68\x04\x4f\x57\xb6\x4e\x95\x98\x72\x0f\xed\x74\xa3\x09\x51\xca\xa2\x6e\xa4\xce\xd8\x48\x35\x0c\x1c\x79\x3b\x34\xe3\xd1\x57\xf8\x98\xb8\xc0\x86\x80\x5d\x44\xf5\x57\x5b\x4a\x45\x96\x72\xb1\x29\x58\xdd\x70\x64\xb3\x9d\x11\x75\x41\x22\x80\x33\x05\xb2\x78\xb0\xe7\x9b\xf4\x7a\xb3\x4b\x7a\x6d\xd1\x2b\xe0\x15\xf6\xb5\x66\xdf\xa2\xf7\xbf\xdc\x64\xff\xda\x3d\xba\x93\x18\x90\x88\xb7\x7a\xee\x7c\x86\xb0\xe9\xbe\x5c\x82\xc3\x99\xab\xe7\xcd\xd3\xe5\xfd\x28\xe3\x31\xaa\x7f\xeb\x5b\x66\xb7\x9b\xe2\xbf\x37\x8c\xcc\xee\x10\x9c\xb9\x02\x8c\x54\x0e\x67\x4c\x81\xb8\x1d\x02\x11\x57\xa1\xdf\x07\xa1\x59\x95\x91\x25\x82\x78\x48\x14\x8f\x89\x92\x41\x75\x78\x34\xa7\x04\x4f\x67\xd7\x74\x85\x58\xac\xfe\xd0\x76\x0d\x4b\x95\x28\x96\x24\x52\x43\x22\x11\x19\xa0\x09\x0f\xd1\x98\x50\x8a\xd2\x47\x23\x8c\x24\x08\x82\x29\x62\x31\xc7\xd0\x40\x70\x1f\xa9\xf8\x05\x33\xde\x49\x7e\x88\xa7\x75\x26\xe5\x0a\x3c\xb6\x09\x73\x49\x1c\x1c\xaf\xbf\x30\xa5\x1a\x15\xfb\xb9\x69\x2a\xf6\xdd\x19\x62\xe6\x41\xc5\x3a\x96\x8e\x5a\x81\x92\x19\x8c\xf4\x5c\xb5\x8c\x21\xb8\x4f\xb8\xf5\x9c\x35\xec\xdf\x6b\xd5\xb0\xc5\x1a\xe7\xb5\x8f\xd2\xa2\x6a\x20\xe3\x26\x1a\x86\x25\xf1\xa7\xee\x9f\xa1\x54\x3e\x30\x95\xa6\xac\x02\x00\x77\xe6\xc3\x74\xb8\xa7\x38\xe3\x63\x10\x19\xd1\xce\x42\xb1\x56\x10\x44\xbf\xfb\x79\x21\xd2\x5f\x30\x38\xd1\xdb\xb3\xd5\x39\x5c\x78\x05\x5d\x08\x4e\x15\x04\x36\x61\x8e\x80\x64\x7a\x0b\xfc\x5a\x60\x2d\xf6\x60\x8e\xe0\xc9\x5c\x96\xb0\x27\x08\x68\xa4\xbc\x84\xb3\xd9\x83\x4e\x3e\x26\xac\xd2\xe3\x5c\x85\x07\x47\x16\x74\x95\x28\x0a\x99\xf6\xed\x23\x50\xca\x51\x4e\xb4\xbc\xde\xf3\x60\x0f\xa7\x0c\x04\xe7\x6a\xbe\x8c\x5e\xdb\xbb\x98\xbc\x94\x3f\xa5\x29\x7f\xce\xa0\x44\x11\xdd\x25\xb0\xf0\x1d\x16\x8f\xc2\x8f\x3e\x68\xc3\x79\xad\x68\x9e\x9f\x14\xf8\xe9\xcc\x81\x85\xe7\x24\x9a\x53\x33\x13\x28\xf9\x91\x91\x1d\x4d\x5b\x67\xa8\x50\x82\x1d\x32\x17\x04\x25\xac\xcc\x2a\x66\x75\x43\x86\x7d\x7f\x51\xbe\x45\x2c\x9e\x36\xb8\xe8\x17\x70\x78\x25\x2e\xaf\xca\x69\x94\x8b\x99\xe2\x85\x2d\x62\xe7\x0a\xc6\x39\x8b\x5b\x79\x81\x55\x2c\x32\x6b\x8c\xf4\xa8\x81\x7d\x05\xe3\x57\xaf\x5e\x99\x8c\xa0\x89\xa6\x74\x90\xdc\x06\x17\x28\x2f\xd8\x79\xf8\xb2\x12\x51\x5d\x07\x90\xf5\x3e\x92\xb7\xc8\x46\xc9\x2a\x9a\xfb\xb3\x12\x56\x0f\xdf\xc1\xa9\x6c\xab\xb8\xa2\xd9\xa3\x53\xb9\xa5\x12\xeb\x41\x80\xe3\x2d\xf6\x79\xd1\xc9\xe9\xc7\x91\xfc\x0e\x9a\x2d\xba\xda\xf1\x7d\x76\x1f\x70\xa1\xba\xb8\x2f\x08\xa5\xbc\xd9\xcc\xd2\xca\xd9\xc4\xeb\x42\xf6\x74\x65\x5b\xaa\x02\x45\x42\x3d\x7d\xff\xe9\x7c\xfb\x04\x1a\xad\xea\x19\x0a\xb3\xdb\xfb\xba\x75\xb2\xec\xf6\xec\xaf\x5b\x2a\xca\x32\xae\xe9\xb0\xd9\x02\xad\x1d\xf8\xbd\xf4\x74\x65\xb3\xd9\xa4\xf5\xba\x3c\x5d\xd2\x26\x51\x8f\xd0\x31\x76\x1c\xa0\x69\x35\xe2\x08\x26\x27\x56\x00\x82\x70\xd7\x42\x92\x78\x0c\xd3\xa4\x1f\xc3\x1d\x56\x60\x21\x9f\xbb\x64\x40\x40\x44\x82\x79\xff\xbb\xdd\xbd\xbe\xba\xbd\xb9\xbe\xb0\x2f\x4f\x7b\xbf\x67\xd5\xcf\xa4\x0f\x68\x96\x62\x1d\x35\x1b\x31\xb5\x2b\xd6\x97\x90\x64\x35\x66\x6d\x10\x8b\xb4\x94\x2a\x5a\x4e\xad\xda\xf4\x57\xfd\x8a\xb4\xbe\xae\x9d\xab\x24\x35\xcf\xdc\x4c\xa0\x35\x3d\xa9\x19\x4d\xbb\xc1\x49\xcd\xad\xcc\x61\x46\x3c\xef\x52\xc0\x49\x39\xf6\x39\x01\xea\xb6\xce\xf1\x2f\xdf\xe7\x8e\x16\x18\xef\x5e\x43\xb4\x4a\x34\x88\x97\x59\xb1\x39\x4c\x1e\x12\xb3\x11\x9d\x1b\x3f\xa0\x32\xe3\xe8\xd4\x6f\x1c\xab\xc2\xe7\x07\xae\x78\x8b\xe1\x99\x8f\x99\x68\x61\xc8\x6e\x0c\x64\x60\x7b\x20\x13\xfd\xb9\xc0\x52\x7d\xe9\x5d\xb7\x0d\x2e\x4b\xad\x59\xb4\xb6\xd8\x98\x51\x2c\x15\xfa\xd2\xbb\xae\x38\x49\x10\x0d\x6f\x5f\xac\x30\x76\x65\x80\xa4\xdb\x03\xc8\x0b\xee\xb5\x10\x8b\x05\xee\xee\x82\x7b\x1b\xc5\x47\xad\xef\xba\x8d\x16\xdb\x06\x39\x73\x83\x5d\xc2\xb3\x01\xde\xfb\xdc\x6c\x2e\x69\xe6\x8b\xb0\x70\x86\xe8\x07\xec\x07\xbf\xa2\xcf\x3c\x64\x8e\xd1\x13\x4c\x0d\xe1\x93\x61\x62\xdb\xb7\x02\x7d\x5c\x76\x89\xa5\x2d\x22\xe9\xad\x62\x8f\x65\x1b\xed\x71\x01\x66\x6f\xc2\x96\x16\x04\x64\x82\xf6\x26\x2c\x2c\xc6\xcd\x1b\xb1\x22\x90\x9a\x82\xec\xc9\x30\x9e\xe0\x61\x60\x75\x1e\xad\x8a\x19\x52\x45\xfd\x48\x6d\x66\x6a\x68\xae\x4c\x73\x8e\xb8\xe1\xc9\xa1\x64\xe2\x0d\x4e\x0f\xcd\xd6\xbc\xe5\x72\x79\x25\x4e\xaf\xca\x6d\x54\x49\x34\x9b\xac\xad\x9b\xde\xd4\xbb\x3d\xf6\x33\x5a\x91\x1d\x2d\x69\x1b\x43\xda\x3c\x31\xf6\x1c\x2e\xf2\xaa\x33\xb3\xd6\xd9\x70\x19\xda\xf1\x7a\x9e\x93\x00\x6f\x22\xcf\xb6\x35\xf2\xfb\xd2\xbb\x46\x76\xb4\xa4\xe6\x8b\xb0\x99\xee\xfd\x23\xd0\xa0\x85\xce\x3d\x9a\x76\x4b\x5c\x7b\x0e\x87\x57\xe2\xf2\xaa\x9c\x46\x95\x18\x94\x68\x65\xa7\x7d\x1e\xb6\x74\x8f\xba\x63\xc7\x93\x7f\xce\x96\xa3\x45\x07\xfb\xd6\xdc\xe6\x3b\xeb\x3a\x2e\xca\xbd\xaf\x04\xc6\x65\xef\x1b\x8e\x3b\xba\xd8\x02\xfe\x0a\x41\x2a\xab\xf3\xf6\x6d\x7e\x4f\x6d\x13\xa5\x28\x50\x84\x1a\xef\x0f\xbe\x15\x00\x11\x93\xe6\x38\x56\xc2\xa1\x0c\xe3\xb6\x3f\x8f\xdc\x3a\x78\xad\xd5\xcd\xa4\x9e\xfe\x34\x1b\xbf\x9d\x6a\x28\x63\x58\xda\x01\xa7\xc4\x99\x58\x1d\x86\x55\x28\xb2\x8f\xe1\xe5\x3e\x7b\xf5\x21\x86\x80\x5d\x10\xd2\x76\x28\x71\x46\xc9\x75\x57\xda\xbc\x03\x16\x11\xda\x32\xce\x93\x1a\xd0\xcb\x21\x1f\xdb\x09\x1b\x41\x98\x08\x2f\x9d\x80\x27\x48\x7c\xdd\x56\x14\x45\x14\x9d\x6a\x5c\x32\x8c\x12\x00\xd3\x61\x4a\x06\x13\x4f\xaf\x56\x4a\x6e\x0f\x23\x99\x2d\x0f\xf2\x34\xad\xf7\x40\x33\x55\xb7\xc7\x4f\x32\x9b\x66\xd5\xed\x1e\x74\x2c\x53\x2d\xc7\xbe\x75\x2f\x81\x88\xeb\x41\x9a\x76\x05\xc4\x5c\xff\xab\xdc\x2e\x64\x39\x54\x22\xee\xbf\xa6\x4d\xa6\x78\x50\x74\x6b\x44\x36\x51\x9f\x2b\xc5\x7d\x0d\xba\xb9\xcb\x2d\x4a\x53\xad\xe9\x72\x8b\x44\xe7\xa2\x7f\x66\x55\x84\x37\xc2\x45\xe5\xbf\x32\xc5\xad\x4c\x7e\xd1\x19\x2b\x89\x67\x9c\x21\x8e\xec\x6d\x41\xd7\x98\x45\xca\x16\xb5\x42\xab\xaf\xb9\xa9\x63\xd4\x03\x7b\x8e\x6a\xd3\x11\x93\xf6\x25\x97\x25\x5a\x9f\x11\xb3\xbe\xbb\xa5\x9b\x5d\xeb\x0c\xba\x6b\xe6\xbb\x46\xbc\xab\x48\xd6\x37\x10\x70\xa1\xf4\x20\xff\x94\x70\x4b\x50\x9f\xac\x48\x67\x60\x1f\xdf\xdb\x14\x98\xa7\x8a\x1b\xdd\x2e\xb1\xe4\x5a\x94\xd1\x23\xcd\xa9\x4b\x29\xe9\x4d\xef\x56\x5f\x47\x83\x50\x04\x5c\x82\xd5\x71\x89\x47\x54\x41\x15\x64\xc5\x7a\x57\xa0\x3e\x8d\xd6\xbb\xa4\x51\xa0\x81\xde\xcd\x10\x6e\x89\xde\xe9\xf7\x4c\x9c\x53\x80\x82\x0e\x95\x86\x0a\xf0\xcf\xf6\xc0\x5f\x4b\xfb\x9b\x01\x7f\x7f\x62\xe2\x73\xe6\xa8\x5a\x0f\xfc\xcb\x49\xea\x6d\xd0\xcb\xae\x12\x74\x4f\xfc\x6b\xe7\x76\xd6\xeb\x76\x96\x94\x18\x79\x02\xf7\xf7\x12\x69\xeb\x15\x19\x35\xc5\x9d\xd5\x77\x5f\x8a\x3f\x31\xf1\x65\x73\x54\x1b\xd1\x67\x09\x4c\x92\xa4\x0c\x53\xfb\x2d\x7e\x95\x0c\x40\x19\x63\xb0\x73\x81\x35\xb8\xc0\x5a\x6e\x19\x7c\x4c\x59\x65\xf5\xd7\x69\x78\xca\xea\x72\xa2\x95\xaf\x02\x4a\x49\x20\xc9\xdf\x60\x70\x83\xc0\xb3\xc8\x75\xd5\x87\x40\x3f\xff\xde\xed\xac\x49\x37\x0d\x87\xc9\xec\xb7\x14\x15\xfa\x21\xdd\xba\x3b\x1c\x2f\xf6\x10\xe7\x7e\x9f\xbf\xe3\xf7\xb7\xb1\xff\x88\x00\xd5\xc7\xcc\x8d\x3f\x2d\x1d\x01\x3c\x50\x34\x7e\x9b\x79\xa9\x07\x7f\x87\x99\x9b\x44\xf2\x3f\xf5\x8b\x23\xf9\x85\x18\xb4\xff\x18\x83\x06\x3c\x08\x83\x96\x86\x9f\x85\x6a\xb5\x09\xfc\xf9\xdc\x05\x3d\xfc\x3d\x50\xb4\x1f\x7f\x97\xdc\x85\xf4\x4d\xd2\xd7\xc4\x9f\xdf\x28\xfc\x19\xc7\x72\x1b\xc6\xdf\xdc\xeb\x4f\x7a\x1d\x81\xee\xfb\xcf\x2c\xd9\x36\x24\x34\xce\xee\xf5\xaf\x65\x30\x8f\xf2\x4a\xbd\xc5\x7c\xef\x0e\xbd\xed\xdc\x6e\xd2\xba\xd9\xac\x19\x79\x02\x35\x73\x75\x87\x41\xde\x7b\xab\xd4\x25\x49\x7c\xef\x34\xa6\x0d\x1a\xb3\xe1\x4c\xf9\xdc\xcd\x3c\x14\x70\x15\x57\x5d\xc5\x8d\x6d\x1a\x1f\xe6\x2c\xde\x97\x53\xb9\xde\xe9\xb6\x11\xaa\x18\x83\x5a\x79\xba\x1a\xad\xf6\x2c\x06\x29\xf7\x2a\x40\xe0\x05\xd7\x32\x2b\xdb\x8a\xbf\x0b\xee\xc5\xe8\xfb\xd2\xbb\x46\x2f\x7f\xa0\xea\xd7\xf8\x52\xab\x1f\x3c\xf5\x6b\x41\xd8\xde\x14\x10\xd6\x72\x33\x6a\x8c\xc1\x50\x39\x2d\xcd\x54\xbd\x7e\xfd\x8b\x5e\x1d\x7d\x65\x39\x53\x2d\x7f\xd7\xa2\xec\xd8\x86\xdf\xf4\x66\x73\xa6\x93\x2e\xa6\xb4\xa5\x40\x7c\x7f\xf1\xfa\xf4\x5d\x77\x53\x48\xdc\x3c\x9e\x8c\xeb\xef\xea\xcb\xc1\x0f\xe2\xb3\x36\xcc\x99\x34\x1a\x52\xd3\x3b\xa0\x81\xb9\xd5\x20\x71\x0f\x8d\x3e\xfe\xad\x33\xd4\x9f\xa1\x54\x64\x30\xb1\x3a\x71\x61\xbc\x21\x84\x0b\xa7\xdf\x14\x2c\xae\xd7\xb6\xd5\x70\x4f\xe1\xf6\x8d\xd2\xa2\x03\x9a\x39\xf1\x5a\xf5\x47\x70\xc6\x5c\x8c\x7c\xee\xc2\xee\x14\xce\xa6\x4e\xe1\xac\xf3\x3c\xcd\x54\x9a\x8d\xf6\x4a\xf9\xee\xe5\x5b\x3a\x7d\xad\x4a\x85\x5d\xfc\x9b\x7e\x9a\xdd\x7b\x6d\x36\x1f\x90\x1c\x18\x4d\x3a\xea\x5d\x72\xb7\x8a\x5b\xa2\x35\x7b\xf5\x35\x21\xc3\x5b\xc1\xdd\xce\x65\x7b\x02\x3e\xa5\x6b\xe7\x15\xcc\x75\xc3\x56\x84\xac\x22\xb4\x2e\x69\xd2\xb7\x43\xa7\x06\x3a\x17\xe9\xd3\xee\x81\xd9\x56\x66\x63\x30\xaf\xb7\x0e\xa2\x45\x31\x66\xce\x86\x7d\xf5\x31\xe6\x08\x26\x20\x76\x01\x66\x2d\xc7\xbc\x73\xb5\xc1\x3c\x2c\xcd\x78\xdc\x90\xfb\xdc\x03\x06\x7c\x69\x03\x15\x83\x5d\x8c\xc1\x41\x05\x96\xff\x5c\xcb\xfb\x6d\xeb\x1e\x46\x0f\x98\x8b\x2e\xb1\x70\x04\x47\x2f\xcf\x0f\x34\xeb\x8d\xce\x0f\x1e\x0b\x8e\xe2\xf6\x25\xe0\xae\xbd\xaa\xa8\x2d\xb1\xf6\x1c\x60\x0f\xab\x00\xac\x96\x1f\x7b\x1e\x80\x3d\xd4\x05\xec\x61\x8b\x00\x5b\xe3\x3e\xf1\xe0\xa8\x0a\xc0\x6a\x15\x00\x3e\x0f\xc0\x1e\xe9\x02\xf6\xa8\x45\x80\xad\xb1\xb8\x66\xf0\xa6\x0a\xc0\x6a\x6d\xb3\x3e\x0f\xc0\xbe\xd5\x05\xec\x9b\x16\x01\xb6\xc0\x40\xad\xb9\x7e\x72\x70\x50\xb6\x6a\xb2\x8e\x94\x43\xc9\x56\x7c\x2d\x48\x47\xe5\xd4\x55\x14\x56\x54\xac\x5b\xf4\x87\x3b\xd1\x6f\x62\xc3\xbf\x89\xa2\x3f\xda\x89\x7e\x13\xbd\x96\x9a\x28\xfa\x37\x3b\xd1\x57\x26\x7a\x93\x43\x95\x1b\x16\xfd\xdc\x2e\x9b\xe2\x41\x05\xe1\xe9\x59\x4f\xab\xe4\x8b\xc5\xc7\x2d\x1e\x9f\xdd\xbe\x7d\x8e\xea\x43\x5b\xc5\x83\xb8\x64\xb7\xfb\x2d\xf9\xda\x27\x52\x12\xce\xd0\xcb\xb3\x5e\x57\x33\xd0\x3d\x93\x0e\x0e\xa0\x45\xc1\xee\x86\x15\xa0\xd1\x15\x07\xd3\x3a\x38\xed\x5a\xc8\x61\xa9\x4d\x99\x4c\x21\xe6\xea\xf5\x38\xf0\x37\x66\x72\x8d\x0f\xce\xec\xd0\xb3\x72\x15\xa5\x71\x83\xf3\x82\x62\x8b\x00\xc0\xd5\x2a\x8e\x29\x5b\x7f\xd9\x94\x3d\xd8\x0d\xe3\xae\x17\x10\x36\xe7\xba\x23\x06\x37\x39\x72\x5b\x7e\x4a\xea\x1b\x8a\x51\x92\x1e\x29\x97\x5a\xcd\xc9\xa6\x48\x77\x80\x29\xbd\x96\x46\xe6\x86\x72\xb6\x21\x9a\x7e\x8c\x3f\x3d\x31\xa1\x45\xb9\xd0\x10\x4d\x8b\x5a\xbf\x79\xd9\x93\x01\xb0\x1b\x69\xa5\x0f\x4c\x59\x9d\x18\x70\xa7\x0f\x1f\x68\x05\x7c\xa1\x0f\x82\x38\x25\x30\x54\x74\x93\x68\x53\x9a\xa7\x19\x77\x0f\xd8\x79\xaa\x0a\xe2\x9c\xb9\x62\x08\x2d\x6d\x58\x87\x97\x8b\xc2\xf6\xdb\xef\xcd\xae\x01\x35\x7e\x99\xad\x04\xaf\x2d\xaa\x32\xca\x59\x6f\xf5\x55\x46\x52\x61\x15\xca\x5d\x99\x51\x5d\x75\xec\x07\x55\x16\xb2\x0f\xb1\x4f\x49\xbf\x17\x8b\xb4\xd1\x26\x37\xdf\x8c\x7d\x8c\x97\xb0\x31\x83\xd4\x96\x42\x99\x19\x21\x3b\xe3\x56\x0b\xb8\xfb\xad\xf9\xde\xa6\x3e\xe1\xba\xf7\x8e\xd3\x6a\xf1\xbe\xff\xde\x2d\x48\xc0\x36\xe5\x85\xb9\x3e\x01\x4b\x27\x68\xb5\x7c\x7b\xdd\x82\xdb\xed\x9b\xf2\x76\xf3\xdc\x6a\xd2\x73\x62\x88\xe5\xd1\xe2\xfc\x1a\x67\xbe\x7c\xfc\xe2\x78\x3f\xbe\x35\x6e\x80\x1d\xe8\xbc\xf8\x7f\x00\x00\x00\xff\xff\x24\x5c\x3f\x24\x8c\xf5\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 62860, mode: os.FileMode(0664), modTime: time.Unix(1609584018, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x6c, 0x7d, 0x7d, 0xa0, 0xd9, 0xd7, 0xac, 0xa1, 0x44, 0xdc, 0x6b, 0xa4, 0x7c, 0xde, 0x40, 0x8b, 0x43, 0x3b, 0xd0, 0xbc, 0xbe, 0x20, 0x27, 0x90, 0x95, 0x60, 0x16, 0xfc, 0x63, 0xf7, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
