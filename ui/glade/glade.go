// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (50.243kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x73\xdb\xb6\x93\x7f\x9f\x4f\x81\xe3\xcd\x74\x72\xd3\xf1\x73\xd2\xbb\x69\x6d\x75\x1c\xc5\x4e\x3a\xb5\xe3\xc6\xf2\x25\x79\xc7\x81\xc0\x15\x85\x1a\x04\x58\x00\xb4\xac\x7e\xfa\xff\x90\x94\x6c\x3d\x90\x14\x41\x52\x14\x29\xe9\x45\x32\x63\x92\x0b\x02\xbb\xbf\x7d\xc0\x72\xb1\x3a\xff\xfd\xd9\x63\xe8\x09\xa4\xa2\x82\x5f\x58\x27\x87\xc7\x16\x02\x4e\x84\x43\xb9\x7b\x61\xfd\xff\xc3\xf5\xc1\xff\x59\xbf\x77\xde\x9c\xff\xd7\xc1\x01\xfa\x04\x1c\x24\xd6\xe0\xa0\x11\xd5\x43\xe4\x32\xec\x00\x3a\x3b\x3c\x3d\x3d\x3c\x45\x07\x07\x9d\x37\xe7\x94\x6b\x90\x03\x4c\xa0\xf3\x06\xa1\x73\x09\xff\x04\x54\x82\x42\x8c\xf6\x2f\x2c\x57\x3f\xfe\x6c\xbd\xbe\xe8\xec\xf0\xf4\xd8\x3a\x8a\x9e\x13\xfd\xbf\x81\x68\x44\x18\x56\xea\xc2\xfa\xa4\x1f\xbf\x53\xee\x88\x91\x85\xa8\x73\x61\x11\xcc\x18\xe5\x03\x31\xb9\x16\x12\x20\x74\xee\x4b\xe1\x83\xd4\x63\xc4\xb1\x07\xe1\x43\xdc\x1e\x08\x12\x28\xab\x73\x8d\x99\x82\xf3\xa3\xe9\x03\xc9\xcf\x63\x42\xc0\xd7\xd9\x24\x64\x48\x99\x83\xf4\xd8\x87\x0b\x4b\x53\xcd\xa0\x8f\xe5\xe4\xf5\xe1\x80\x0c\x13\x18\x0a\xe6\x80\x3c\x9a\x10\x1c\x45\x14\xb3\xd4\x2f\x4f\x2f\xad\xf0\x93\xa4\xce\xcb\x60\xcb\xf3\x7b\xa2\x8a\xf6\x19\x58\x9d\x07\x19\x2c\xcd\xac\x08\x03\x96\xe7\x94\x3c\xaf\x1b\xdc\x07\xf6\xca\x78\x45\x5d\x1e\x5f\x9a\x25\x2b\x30\xdf\xa2\x73\x4e\xa2\x1b\x62\x46\x5d\x6e\x75\x94\xc6\x52\xe7\x25\xf2\xb0\x74\x29\xb7\x19\x0c\xb4\xd5\x39\x35\xa4\x92\xd4\x1d\x9a\x90\x0d\xe1\xd9\xc7\xdc\x31\x63\x47\xa0\xc0\xf6\xb0\x7c\x0c\x7c\x33\xba\x91\xc4\xab\x28\xb0\xd6\x92\xf6\x03\x0d\x6a\xfe\xc6\xec\xad\xc9\x68\x8a\x60\x06\x16\x7a\xc2\x2c\x80\x0b\xeb\x9d\x75\xb4\x30\xd4\x51\xf2\x58\xe7\x47\x31\x94\xe6\xae\xf9\x98\x3c\x52\xee\x66\x4f\x3f\x94\x88\x8d\xb5\xc6\x64\x68\x75\x8e\xf3\x2e\x5a\x0b\x7f\x15\xd1\xf9\xd1\xd2\xfb\xe7\x54\x14\x99\xab\x84\xf3\x4c\xc8\x5e\x1d\xda\xad\x0e\x9b\x44\xea\x49\x6d\x48\x8d\xf4\x77\x0f\xd5\x3d\x54\x8b\x42\x35\x85\x63\x55\x41\xb5\x47\xa4\x60\x0c\x9c\xd9\x48\x4f\x05\x3e\x48\x32\x04\xf2\xd8\x15\x5c\x63\xca\x41\xae\x19\xbc\x26\x64\x85\x90\xf1\x54\x84\x48\x0d\xb1\x23\x46\x76\x18\x79\x5a\x1d\xca\x53\xc9\x96\xd8\x9c\xcc\xea\x6f\x14\x46\xbe\x90\xda\x5a\x7c\xb4\x20\x3f\x57\xf0\x34\xd3\x20\x24\x32\x36\x8f\x51\x48\x9c\x6d\x51\xc2\x5c\xa2\x2c\x2c\xce\x74\xd9\x24\xcb\x67\xc6\x6a\xbf\x6a\x40\x92\xe9\x2e\x2d\xb5\xb2\x92\x2b\x25\xbd\x52\x12\x2c\x25\xc5\xc4\x37\x97\x21\xce\x6b\xef\xd3\xe8\x57\x47\xec\x13\xba\x04\xfb\x3f\xbd\x93\xac\xfc\x89\x04\x09\x0f\x6f\xd2\xb3\x9c\x15\xf5\x2c\xf3\x93\x9e\xb9\x39\x7b\x23\x3b\x99\x20\xb1\x86\xed\x4a\x24\x24\x39\xd2\x70\x95\x0f\xb8\xcf\x20\xc9\x8f\x56\x99\x6a\xc8\x4b\xb2\x52\x55\x8d\xd5\xb3\x80\xcf\xcc\x13\x96\xa4\xf8\xca\x7a\x83\xe6\x9c\x7e\x7d\xc6\x6f\xbc\x08\x3c\xcd\x6d\xec\x1d\xfd\xba\x1c\x7d\x09\xd7\xb0\x84\x61\x60\x40\x34\x2e\x24\x17\x2d\x31\x79\xb4\x43\xb1\x6a\x70\x6c\x46\xf9\xe3\x6a\x09\x95\xf0\x16\xd5\x5b\x66\x45\x84\xdc\x01\xd3\xac\xf7\x66\x79\x77\xcc\xb2\xde\x9b\xe4\xbd\x49\x6e\x97\x49\xbe\x74\xfe\x0e\x94\xf6\x80\xeb\x89\x59\xf6\x01\x9c\x99\x8b\xc9\xa6\x96\x89\x51\x68\xcc\xde\xaf\x32\xc9\x81\xef\x87\xcf\xfd\xb2\xb4\x6f\x48\x80\x57\x00\x56\xe7\xf4\xdd\xaa\x07\x95\x06\xdf\xa6\x9c\x48\x88\xa7\xb7\x94\x61\x5d\x24\xf0\xb1\x0b\x73\x04\x0b\x73\x59\xc1\x1e\xdf\x67\x94\x60\x4d\x05\x9f\xb5\xea\x1e\xa6\xbc\x52\xdf\x95\xa9\x25\x4b\x40\x0b\x1d\x97\x85\xb4\xc4\x5c\x31\x1c\xa1\xf5\xc2\x1a\x83\xb2\x3a\x9f\x81\x31\x81\x42\x77\x03\x6a\x49\x4b\xd7\xeb\xfc\x3e\x88\xe7\x49\x6c\x2a\x84\x0e\xff\x58\x8f\xab\x4b\xff\xd8\xb9\x40\x23\x24\x05\xae\x23\xc9\x59\x9d\x27\x90\x9a\x12\xcc\x8a\xfa\xa3\x5b\xe0\xc1\x07\x2c\x5f\x85\x1f\x5e\x68\x83\x73\x0a\xe7\xf9\x87\x06\x6f\x32\x73\xe0\xc1\x35\x0d\xe7\xd4\x4c\xef\xc4\x62\x57\x9a\x00\x6c\x3b\x9c\xb6\xa9\x13\x08\xb8\x03\x92\x51\x9e\x67\x15\xb3\xba\xa1\x82\xbe\xb7\x2c\xdf\x2c\x16\x4f\xb3\x79\xfd\x0c\x0e\x97\xe2\x72\x59\x4e\xa3\xcc\x1c\x65\xfa\xc2\x96\xb1\xf3\x05\x46\x29\x8b\x2b\xbd\xc0\x2a\x16\x99\x34\x46\x0c\xab\x8e\xfd\x05\x46\x87\x87\x87\x45\x46\x30\x44\xd3\x64\x90\xd4\x6c\x1e\x4a\xcf\xe8\x4d\x6e\x56\x22\xaa\x3b\x1f\x78\x5b\x65\x15\xce\x7d\xa7\x84\xd5\xc3\x4f\x70\xa9\xda\x2a\xae\x70\xf6\xe8\x52\x6d\xa9\xc4\x7a\xe0\x63\x89\xb5\x90\xf3\xa2\x53\xd3\xcb\xa1\xfc\x4e\x9a\x2d\xba\x8d\xe3\xfb\xea\x39\xdc\xd0\x77\x71\x5f\x52\xc6\x44\xb3\x99\x65\x12\x99\xc4\xeb\x42\xf6\x74\x65\x5b\xaa\x02\x59\x42\xbd\xfc\xf8\xc7\xf5\xf6\x09\x34\x5c\xd5\x0e\x0a\xb3\xdb\xfb\xb6\x75\xb2\xec\xf6\xec\x6f\x5b\x2a\xca\x3c\xae\xe9\xb4\xd9\x02\xdd\x38\xf0\x7b\xa0\x35\xe5\x6e\x4b\x83\xaf\xc4\xed\xf2\x74\x49\x3b\x8c\xfa\xb3\x66\x8b\x73\xe3\xa8\xff\x1a\xd0\xa4\x12\xb1\x06\xb1\xc8\x08\xf1\xe1\x72\x6a\x83\x3a\x42\xe7\x98\x10\x60\x10\xa1\x0d\x3d\xc2\xf8\xc2\xfa\xc7\x42\x8a\xba\x1c\xb3\x0b\x0b\x13\x4d\x9f\xb0\x06\x0b\x79\xc2\xa1\x03\x0a\x32\x14\xc4\xc7\x3f\xed\xee\xdd\x97\x87\xfb\xbb\x1b\xfb\xf6\xb2\xf7\xe7\x62\xa5\xfd\xcc\xd8\x45\xa1\xb1\xbe\xfa\xa1\x32\x19\xc7\x2b\x27\x11\x68\x4d\xcf\x38\x86\xd3\x6e\x70\xc6\x71\x2b\x13\x8c\x21\xcf\xbb\x0c\xb0\xbc\xe2\x5a\x8e\xaf\x29\x30\xa7\x75\x5e\x59\x0b\xc1\x34\xf5\x6d\x0d\xcf\x3a\x11\x59\xd1\x02\x91\x1e\x02\x82\x70\x95\x68\x10\x2d\xb3\x62\x73\x18\xbf\x24\x62\x23\xba\x2e\xfc\x82\xca\x8c\x23\xd9\xbc\x71\xac\x0a\x9f\x9f\x84\x16\x2d\x86\x67\x3a\x66\xc2\x85\x21\xbb\x31\x90\x81\xed\x81\x4c\xf8\xef\x06\x2b\xfd\xb5\x77\xd7\x36\xb8\xac\xb4\x66\xe1\xda\x22\x63\xc6\xb0\xd2\xe8\x6b\xef\xae\xe2\x1d\x7c\x38\xbc\x7d\x53\x62\xec\xca\x00\xc9\xb6\x07\x90\x37\xc2\x6d\x21\x16\x33\xdc\xdd\x8d\x70\x6b\xc5\xc7\x46\xf7\xba\x8d\x16\x5b\x8d\x9c\xb9\xc7\x0e\x15\xc9\x00\xef\xfd\xd5\x6c\x2e\x19\x26\x73\xb0\x24\x43\xf4\x13\xf6\xfc\xdf\xd0\x5f\x22\xe0\xa4\xd0\x1b\x8a\x1a\xc2\x85\x61\x22\xdb\x57\x82\xde\x91\x78\x64\x63\x65\xcb\x50\x7a\x65\xec\xb1\x6a\xa3\x3d\xce\xc0\xec\x7d\xd0\xd2\xaf\xf5\x89\xa0\xbd\x0f\x52\x0f\x32\x66\x8d\x58\x11\x48\x8b\x82\x6c\x61\x18\x57\x8a\xc0\xb7\x3a\xaf\x56\xa5\x18\x52\xe5\xe6\x91\xda\xcc\xd4\xd0\x5c\x0d\xe5\x1c\x71\xc3\x93\x43\xf1\xc4\x1b\x9c\x1e\x9a\x2d\x48\x4b\xe5\x72\x29\x4e\x97\xe5\x36\xaa\x24\x9a\x8d\xd7\xd6\x9d\xf4\x0c\xda\x1e\xfb\x19\xae\xc8\x0e\x97\xb4\x8d\x21\x6d\x9a\x18\x7b\x44\xc8\xb4\xd2\xc9\xa4\x75\x36\x5c\x86\x76\xb4\x9e\x5d\x12\xe0\x7d\xe8\xd9\xb6\x46\x7e\x5f\x7b\x77\xc8\x0e\x97\xd4\x7c\x11\x36\xd3\xbd\x7f\x06\xe6\xb7\xd0\xb9\x87\xd3\x6e\x89\x6b\x4f\xe1\x70\x29\x2e\x97\xe5\x34\xaa\xc4\xa0\x84\x2b\xbb\xec\x8b\xa0\xa5\xdf\xa8\x3b\x76\x34\xf9\x5d\xb6\x1c\xc5\x7b\x4e\x4c\x0f\x43\x19\xf5\x9a\x1a\x50\xc6\xcc\x0e\xdb\xf8\x42\xd1\xf8\x7c\xd0\x9a\x3b\xca\x25\x1d\x0c\x66\xc2\xfd\x46\x61\x94\xb7\xf3\xd1\x88\x3a\x7a\x68\x4b\xf8\x27\x00\xa5\xad\xce\xfb\xf7\x4b\x67\xef\xd2\x28\xeb\xec\x99\x54\x71\x27\xa3\x07\x09\x10\x32\x69\x8e\x63\x39\x1c\xca\x10\xa8\x3b\xd4\xaf\xdc\x3a\x39\x4e\x6d\x5c\x52\x98\x63\x2b\xb8\x66\x7e\x32\xb7\xf6\x73\xb2\x43\x15\xc1\xd2\xf6\x05\xa3\x64\x6c\x75\x38\xd6\x81\x4c\x3e\x23\x97\xfa\xee\xf2\x43\x0c\x01\x3b\x20\x95\x4d\x18\x25\x8f\xf1\xc1\x5b\x63\xde\x01\x0f\x09\x6d\x15\xe5\x49\x0b\xd0\xab\xa1\x18\xd9\x31\x1b\x41\x16\x11\xde\x64\x02\xae\xa4\xd1\xc1\xdf\x30\x8a\xc8\x3a\x72\xb8\x62\x18\x2d\x01\xa6\xc3\xe4\x0c\x26\xa2\x3e\xbc\x1c\xb3\x83\xe8\xcf\xe9\x39\xe6\xc8\xb6\xe5\x0a\x2c\x42\x4d\xeb\xbd\xd0\x4c\xd5\xed\xf5\x4a\x42\x42\x6a\xf3\xee\xc1\xc4\x32\x95\xf1\x0e\x6b\xee\xe2\x18\xb5\x06\x8e\x58\x1e\xd5\x83\x2c\x74\x0a\x4e\x9a\x5a\xad\x3d\x1c\xe7\xda\x31\x2e\x9d\xcf\x5e\x41\x35\x69\xc7\x68\x4a\xa6\x85\x9f\x70\xba\x7c\x05\x51\x5f\x68\x2d\x3c\x03\x3a\x29\x46\xb6\xf2\x31\xa1\xdc\x35\xa0\x22\x82\x05\x1e\xcf\x43\x68\xde\x40\x22\x8a\x1d\x93\xca\xb5\x1b\xe1\xa2\xd2\xb7\x4c\x0f\x43\xa0\xf2\x57\x93\xb1\xe2\x78\x86\x0c\x71\x68\x6f\x7f\x31\xa1\x7c\x9e\x74\xa2\xc8\x70\xe9\x69\x31\x6d\xb2\x79\x49\x5c\x6a\xae\xae\x67\x49\x94\x39\x7a\x6a\xa2\x64\xe3\x81\xca\x6e\xc0\xa3\xd2\x9d\xf9\x5e\xde\xf1\xa5\xd5\xb3\x0e\xff\xb7\x3a\x73\x54\x75\x47\x4c\xc6\xed\x36\x56\x55\xa6\x44\xa0\x44\xdd\xc9\x9a\x4c\x86\x9e\x69\x85\x90\x51\xc6\x87\x59\x86\x73\xaf\x18\x82\x29\x2e\x28\x8d\x33\x4d\x80\xa0\x0e\xd9\x7f\x0f\xbe\x90\xda\x0c\x85\x8b\x84\x5b\x02\xc4\x78\x45\x26\x03\x7b\xf8\xd9\x66\xc0\x5d\x9d\xde\x44\x31\x99\x70\xce\xb8\x1a\x51\x86\xaf\x2c\x4e\x9d\x4b\x6f\xee\x7b\x0f\x26\x63\x52\xee\x07\xda\xf6\x03\xe9\x0b\x05\x56\xc7\xa1\x2e\xd5\x19\x85\x89\x15\xeb\x5d\x86\xfa\x34\x5a\xef\xbe\x04\x5e\x1f\x64\x01\xbd\x9b\x21\xdc\x12\xbd\x8b\x57\x54\x58\x7d\x52\xc3\xbb\x24\xca\x5c\x0a\xf0\xdf\xed\x81\xbf\x91\xf6\x37\x03\xfe\xde\xb8\x88\xcf\x99\xa3\x6a\x3d\xf0\x6f\xc7\x13\x6f\x83\xde\x76\xb5\x64\x07\xf2\x7f\xf6\x6e\x67\xbd\x6e\x67\x45\xd5\x8f\x2b\x71\xff\x20\x96\xb6\x59\xdd\x4f\x53\xdc\x59\x46\xfc\xb9\x76\x7d\x2e\xe2\xcb\xe6\xa8\x6a\xd1\x67\x05\x5c\xd1\xb8\x32\xd2\x78\x63\x5d\x66\x53\x9e\xc7\x18\xec\x5d\xe0\x06\x5c\x60\xcd\x2a\xb3\x98\x45\x4a\xea\x47\xd3\xf0\x2c\xd2\xed\xd8\x28\x85\x04\x8c\x51\x5f\xd1\x7f\xa1\x40\x57\xd2\x9d\x48\x3f\x6d\x0e\x81\x1e\x28\x85\xdd\x66\xb7\xc2\xcd\xc0\x61\x3c\xfb\x2d\x45\x85\x79\x48\x67\x75\xfe\xb7\x5e\x24\x75\x85\xd7\x17\x1f\xc4\xf3\x43\xe4\x3f\x42\x40\xf5\x31\x77\xa2\xab\xb9\x23\x80\x17\x8a\xc6\x7f\xf9\x5d\xe9\xc1\x3f\x60\xee\xc4\x91\xfc\xcf\xfd\xec\x48\x7e\x29\x06\xed\xbf\xc6\xa0\xbe\xf0\x03\xbf\xa5\xe1\x67\xa6\x5a\xd5\x81\x3f\x4f\x38\x60\x86\xbf\x17\x8a\xf6\xe3\xef\x56\x38\x30\xd9\x49\x7a\x86\xf8\xf3\x1a\x85\xbf\xc2\xb1\x5c\xcd\xf8\x9b\xdb\xfe\xfc\x20\x43\xcc\x5d\x30\xdd\xff\xcc\x92\x6d\x43\x42\xe3\xea\x39\x5e\x50\x3d\x51\x5e\xae\x5d\xcc\x8f\xee\xd0\xad\xcd\xdf\xa7\x7e\x42\x4f\x66\x68\x13\xb6\xee\x51\x42\xb9\x10\x7c\x97\x28\x5b\x8f\xe0\x38\x17\xbd\x07\x71\x3b\xf2\xc9\x1f\x02\xad\xa7\x75\x50\x84\x01\x96\x93\x0b\x65\x76\x15\x51\x47\x96\xc6\x07\x03\x12\x08\xd0\x27\x50\xb6\x03\x03\x1c\x30\xbd\x06\x55\x30\xed\x7f\x53\x31\x06\x8d\xb2\x59\x1b\x34\xa4\xb3\x18\x64\xc2\xad\x00\x81\x37\x22\x43\xd3\x77\x07\x7f\x37\xc2\x8d\xd0\xf7\xb5\x77\x87\xde\xfe\xc4\xf4\x6f\x57\x5c\x83\xfc\xc9\xd5\xbf\x65\x04\xb7\x4d\x01\x61\xcd\x86\x70\x26\xa7\x13\xe8\xc4\x9f\x42\x4f\x9a\x70\xc3\xf2\x39\xc7\xc7\xbf\x9a\x15\x80\x57\x96\x59\x34\xf2\x77\x2d\xca\x21\xd5\xbc\x1f\x9a\xcd\x2c\x8e\xbb\x98\xb1\x96\x02\xf1\xe3\xcd\xf1\xe5\x87\x6e\x5d\x48\xac\x1f\x4f\x85\xab\xd4\x36\x97\xa9\x1e\x44\x87\x44\x38\x19\x37\x1a\x52\xd3\x9f\x6d\x03\xee\x54\x83\xc4\x03\xf4\xf8\xf9\x5f\x93\xa1\xfe\x0e\x94\xa6\x83\xb1\xd5\x89\x2a\xba\x0b\x42\x38\x73\xfa\x4d\xc1\xe2\x7a\x6d\xdb\xf2\xaf\x6c\xb5\x64\x94\x16\x9d\xe6\x4b\x89\x91\xaa\x3f\xaf\x31\x12\xf2\xd1\x13\x0e\xec\x8f\x6c\xd4\x75\x64\x63\x9d\x87\x2f\xa6\xd2\x6c\xb4\x27\x48\x37\xe9\xdf\x27\xd3\x37\xfa\x86\xbe\x8f\x39\x27\x57\x93\x1b\x75\xcd\xee\xc1\xe3\xd3\x85\x71\xfb\xb5\x5b\xe1\x40\x05\x1b\x72\xc3\xc6\x6e\x4d\x48\x74\x2e\xef\xcf\x8d\x21\x9c\xb7\x81\xdc\x22\x5d\xd4\xd3\x8b\x72\x87\x12\xac\x85\x5c\x45\xbf\x1b\xe1\xc4\x6a\xd8\xca\x80\x57\x84\xd6\x15\x1d\xdd\xf6\xe8\x34\x40\xe7\x32\xfd\xa4\xd5\x5c\xb2\x95\xa9\x0d\xe6\x9b\xfd\x42\xdf\xa2\x18\x33\xe5\x53\x72\xf5\x31\xe6\x23\x8c\x41\xee\x03\xcc\x8d\x9c\x09\x4e\xd5\x86\xe2\x61\x69\xc2\xeb\x86\xc2\x13\x2e\x70\x10\x2b\xbb\x6d\x14\xf8\x72\x30\x38\xa9\xc0\xf2\x5f\x1b\x79\xbf\x6d\xfd\x6e\xd0\x03\xee\xa0\x5b\x2c\x89\x14\xe8\xed\xf5\x89\x61\x25\xcc\xf5\xc9\x6b\x29\x4c\xd4\xeb\x02\x9c\xb5\xd7\xbb\xb4\x25\xd6\x9e\x03\xec\x69\x15\x80\x35\xf2\x63\xbb\x01\xd8\x53\x53\xc0\x9e\xb6\x08\xb0\x1b\xfc\x36\x3b\x38\xab\x02\xb0\x46\xa5\x69\xbb\x01\xd8\x33\x53\xc0\x9e\xb5\x08\xb0\x1b\x2c\x68\x19\xbc\xab\x02\xb0\x46\x9f\x36\x77\x03\xb0\xef\x4d\x01\xfb\xae\x45\x80\xcd\x30\x50\x6b\x2e\x23\x1c\x9c\xe4\x2d\x1e\xdc\x44\xca\x21\x67\xdf\xb6\x16\xa4\xa3\x52\x6a\x19\x32\xab\x18\xd6\x2d\xfa\xd3\xbd\xe8\xeb\xf8\xc8\xde\x44\xd1\x9f\xed\x45\x5f\x47\x17\xa0\x26\x8a\xfe\xdd\x5e\xf4\x95\x89\xbe\xc8\x71\xbf\x9a\x45\x3f\xf7\x95\x4d\x0b\xbf\x82\xf0\xf4\xaa\x67\x54\x66\xc5\xa3\x53\x07\xaf\xef\x6e\xdf\x77\x8e\xea\x43\x5b\x2d\xfc\xa8\x4c\xb6\xfb\x3d\xbe\xed\x51\xa5\xa8\xe0\xe8\xed\x55\xaf\x6b\x18\xe8\x5e\x29\x82\x7d\x68\x51\xb0\x5b\xb3\x02\x34\xba\xe2\x60\x5a\x7b\x66\x5c\x7f\x38\xcc\xf5\x51\x26\x51\x88\xa9\x7a\x3d\xf2\xbd\xda\x4c\x6e\xe1\xc3\x2a\x7b\xf4\x94\xae\x5c\x2c\xdc\x0d\x3b\xa3\xd8\xc2\x07\x70\x8c\x8a\x63\xf2\xd6\x3c\x36\xe5\x1b\x6c\xcd\xb8\xeb\xf9\x94\xcf\xb9\xee\x90\xc1\x4d\x8e\xdc\x56\x9f\x4c\xfa\x8e\x22\x94\x4c\x0e\x3b\x2b\xa3\xb6\x59\x53\xa4\x13\xe0\xda\xac\xd9\x4e\x71\x43\x39\xdb\xaa\xcb\x3c\xc6\x9f\x9e\x52\x30\xa2\x5c\x6a\xd5\x65\x44\x6d\xde\x56\x6b\x61\x00\xec\x84\x5a\xe9\x01\xd7\x56\x27\x02\xdc\xe5\xcb\x05\xa3\x80\x2f\xf0\x40\x52\x92\x03\x43\x59\x3f\x3b\xd9\x94\xb6\x5e\x85\xcf\xb5\xef\x3d\x55\x05\x71\xce\x5c\x31\x84\x91\x36\xac\xc3\xcb\x85\x61\xfb\xc3\x8f\x66\xd7\x80\x16\xde\xcc\x56\x82\xd7\x16\x55\x19\xa5\xac\xb7\xfa\x2a\x23\xa5\xb1\x0e\xd4\xbe\xcc\x68\x53\x75\xec\x27\x55\x16\xb2\x0f\xb1\xc7\x68\xbf\x17\x89\xb4\xd1\x26\x37\xdd\x8c\x7d\x8e\x96\x50\x9b\x41\x6a\x4b\xa1\xcc\x8c\x90\xc9\xa8\xd5\x02\xee\x7e\x6f\xbe\xb7\xd9\x9c\x70\x9d\x67\x42\x5a\x2d\xde\x8f\x3f\xba\x19\x09\xd8\xa6\x6c\x98\x37\x27\x60\x45\xfc\x56\xcb\xb7\xd7\xcd\xf8\x29\xf4\xa6\xec\x6e\x76\xad\x26\x3d\x25\x86\x58\x1d\x2d\xce\xaf\x71\xe6\xe6\xeb\x8d\xf3\xa3\xe8\x27\xc6\x06\x98\x40\xe7\xcd\x7f\x02\x00\x00\xff\xff\x49\xc9\x3f\xd6\x43\xc4\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 50243, mode: os.FileMode(0664), modTime: time.Unix(1609157378, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x85, 0xcc, 0xf3, 0xfe, 0xc4, 0xd5, 0x3a, 0xd2, 0x2b, 0xdd, 0x2f, 0x2d, 0x34, 0xe9, 0x52, 0x33, 0x21, 0x3, 0x54, 0xb8, 0x3f, 0x49, 0xab, 0xc2, 0x9b, 0xc, 0x78, 0x4d, 0x63, 0x7f, 0x66}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
