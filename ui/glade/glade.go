// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (82.479kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x6b\x73\xdb\x38\xb2\xf6\xf7\xf9\x15\x78\xf9\x56\xcd\xe6\xd4\x8e\x93\xd8\x99\xd9\xb3\x67\x27\xd6\x96\xa3\xd8\xc9\xd4\xf8\x16\xcb\x93\xe4\x1b\x0b\x22\x5b\x12\xc6\x20\xc0\x01\x40\x4b\xda\x3a\x3f\xfe\x14\x2f\xb2\x6e\xbc\x81\xa2\x78\x91\xf8\x61\xa6\x62\x49\x0d\x02\xe8\xe7\xe9\x6e\x34\x1b\xc0\xfb\x7f\xcf\x1c\x8a\x9e\x41\x48\xc2\xd9\xb9\x71\xfa\xfa\xad\x81\x80\x59\xdc\x26\x6c\x7c\x6e\xfc\xf1\x78\x75\xf2\x4f\xe3\xdf\xbd\x1f\xde\xff\xbf\x93\x13\xf4\x09\x18\x08\xac\xc0\x46\x53\xa2\x26\x68\x4c\xb1\x0d\xe8\xdd\xeb\xb3\xb3\xd7\x67\xe8\xe4\xa4\xf7\xc3\x7b\xc2\x14\x88\x11\xb6\xa0\xf7\x03\x42\xef\x05\xfc\xe5\x11\x01\x12\x51\x32\x3c\x37\xc6\xea\xe9\xef\xc6\xf2\x41\xef\x5e\x9f\xbd\x35\xde\x04\xbf\xe3\xc3\x3f\xc1\x52\xc8\xa2\x58\xca\x73\xe3\x93\x7a\xfa\x46\x98\xcd\xa7\x06\x22\xf6\xb9\x61\x61\x4a\x09\x1b\xf1\xe8\x33\x5f\x00\xa1\xf7\xae\xe0\x2e\x08\x35\x47\x0c\x3b\xe0\xff\x88\x99\x23\x6e\x79\xd2\xe8\x5d\x61\x2a\xe1\xfd\x9b\xc5\x0f\xe2\x7f\x8f\x2d\x0b\x5c\x95\x2e\x62\x4d\x08\xb5\x91\x9a\xbb\x70\x6e\x28\xa2\x28\x0c\xb1\x88\x1e\xef\x37\x48\xb1\x05\x13\x4e\x6d\x10\x6f\x22\x81\x37\x81\xc4\xaa\xf4\xcb\xaf\xb7\x46\xf8\x49\x10\xfb\xa5\xb1\xed\xfe\x3d\x13\x49\x86\x14\x8c\xde\xa3\xf0\xb6\x7a\x56\x64\x02\xb6\xfb\x14\xdf\xaf\x6b\x3c\x04\xba\x9c\x78\x49\xc6\x2c\xfc\x68\x55\xac\x40\x7f\x8b\xf6\x39\x4e\x6e\x82\x29\x19\x33\xa3\x27\x15\x16\x2a\xaf\x90\x83\xc5\x98\x30\x93\xc2\x48\x19\xbd\x33\x4d\x29\x41\xc6\x13\x1d\xb1\x09\xcc\x5c\xcc\x6c\xbd\xe9\xf0\x24\x98\x0e\x16\x4f\x9e\xab\x27\x37\x15\x38\x4b\x02\x2b\x25\xc8\xd0\x53\x20\xd7\xbf\x58\xfd\x2a\x6a\x4d\x5a\x98\x82\x81\x9e\x31\xf5\xe0\xdc\xf8\xd9\x78\xb3\xd1\xd4\x9b\xf8\xb6\xde\xbf\x09\xa1\xb4\xf6\x99\x8b\xad\x27\xc2\xc6\xe9\xdd\xf7\x35\x62\x62\xa5\xb0\x35\x31\x7a\x6f\xf3\x0e\x5a\x71\x37\x4b\xe8\xfd\x9b\xad\xe7\xaf\x51\x14\xe9\x53\xc2\x9e\x59\x56\x47\x87\x76\xd3\xa1\x4e\xa4\x9e\x56\x86\xd4\x80\xbf\x1d\x54\x3b\xa8\x16\x85\x6a\xc2\x8c\x95\x05\xd5\x81\x25\x38\xa5\x60\xaf\x46\x7a\xd2\x73\x41\x58\x13\xb0\x9e\xfa\x9c\x29\x4c\x18\x88\x3d\x83\x57\x47\xac\x10\x32\x9e\x8b\x08\xc9\x09\xb6\xf9\xd4\xf4\x23\x4f\xa3\x47\x58\xa2\xd8\xd6\x34\xc7\x4f\xf5\x57\x02\x53\x97\x0b\x65\x6c\xfe\xb4\xe0\x7c\x66\xcc\x69\xaa\x41\x88\x9d\xd8\x3c\x46\x21\xb6\xb7\x45\x05\x73\xa9\xb2\xb0\x3a\x93\x75\x13\xaf\x9f\x15\xab\xbd\x64\x40\x9c\xe9\xde\x59\x6b\xbb\x6a\x6e\x27\xed\xed\xa4\xc1\x9d\xb4\x18\xfb\xe4\x5d\x84\xf3\xda\xfb\x24\xf9\xec\x88\x3d\x92\x8b\xb1\xff\x8b\x6f\xe2\xc9\x1f\x2b\x10\xf3\xe3\x3a\x3d\xcb\xbb\xa2\x9e\x65\xbd\xd3\x2b\x5f\xae\x7e\x91\x9e\x4c\x10\x58\xc1\x61\x25\x12\xe2\x1c\xa9\x3f\xca\x47\x3c\xa4\x10\xe7\x47\xcb\x4c\x35\xe4\x15\xc9\xa4\xaa\x36\x3d\x0b\xf8\xcc\x3c\x61\x49\x82\xaf\xac\x36\x68\xce\xe9\xd7\x57\xfc\xc6\x8b\xc2\x93\xdc\x46\xe7\xe8\xf7\xe5\xe8\x77\x70\x0d\x5b\x18\x06\x0a\x96\xc2\x85\xf4\xa2\x04\xb6\x9e\x4c\x5f\xad\x0a\x6c\x93\x12\xf6\x94\xad\xa1\x1d\xbc\x45\xf9\x96\x59\x5a\x5c\x1c\x81\x69\x56\x9d\x59\x3e\x1e\xb3\xac\x3a\x93\xdc\x99\xe4\x76\x99\xe4\x8f\x04\x53\x3e\x8e\x4c\x32\x28\x45\xd8\x58\x46\x9f\x95\x63\x95\x7d\x53\x60\x4e\x08\x53\x46\xcf\x0e\xda\xdd\x87\x4d\x46\xc1\x7b\x48\x86\xe9\x49\xf0\xe7\xb9\xf1\x3c\xe4\x33\x23\xd9\x52\x7f\xe0\xb3\x70\xc8\x43\x3e\x3b\x4d\x31\xca\xb9\xde\xb2\x25\x01\x3e\xb7\x04\x17\x04\x98\xc2\x8a\x70\x66\xf4\x9e\x41\x28\x62\x61\x9a\xcb\xda\xba\xd8\x22\x6c\x6c\xf4\xfe\x27\xd9\xd0\x6e\x4d\x0d\xb6\xfc\x07\x99\x58\x00\x36\xd2\xad\xf0\x07\x4f\x29\xce\x3e\xac\xcc\x64\xf1\x59\x8a\x93\xa3\x78\xce\x3d\x65\x4a\x35\xf7\xe9\x06\xcc\xde\xd5\x14\x87\x1d\x0e\x35\xcb\x5d\x60\x1f\x61\x84\x3d\xaa\x64\xf4\x79\x36\x85\x69\x68\xcb\x95\xc0\x4c\x52\x1c\xd8\x81\x73\x63\x0e\xd2\xe8\xdd\xb9\xc0\x90\xb9\x68\x50\xcb\x8e\x95\x60\xe7\x75\x45\x05\x58\x40\x9e\x41\x9a\x76\xd8\xe1\x62\x46\xd4\x63\x36\x08\x4a\x58\x66\xdf\x93\xf2\x16\xf1\x19\x86\xb8\xc7\x15\xb5\xf5\x23\x42\xa9\xbe\x94\xcb\x25\x09\xd9\x96\xf0\x82\x06\xc5\xe7\x27\x50\x52\x26\xa6\x08\x40\x05\x48\x50\x9a\xc8\xec\x99\x0f\xbe\x54\x07\xbf\x0d\x4d\xb5\x15\x7e\x89\xaf\xa9\xf6\x0f\x3f\x8b\x72\x09\xda\xf0\xeb\xfb\x52\x1d\xfc\x36\x34\xd5\x56\xf8\x25\x64\x66\x91\x16\xfc\x8a\xa7\x96\x33\x03\xa5\xe4\x31\x6b\x89\x2c\x07\x5c\x5d\xe5\xc8\x22\x96\xbe\x01\x29\xf1\xf8\x40\xde\xcc\x67\x87\xb6\x71\x52\xf9\xd6\x63\xb5\xc0\x48\x67\xa6\x2b\x43\x51\x50\x2a\x18\x82\x28\x5c\x14\x6c\xd4\x0e\xd6\x8e\x1d\xc1\xa7\xe6\xcb\xd2\x23\x77\xa5\x85\xc5\xa9\xe7\xb0\xa5\xe0\x2f\xe5\x24\x5e\x0e\x2d\xd1\x92\xbc\x04\x19\x84\x68\x48\x6d\x2c\xb9\xf0\x6f\xfd\xeb\xc5\x8b\x49\x08\xca\x65\x16\xd5\x7f\x43\x4e\xed\xcd\x02\xc0\x40\x2e\xa1\x08\x10\x95\xe2\xfd\xf2\xbd\x61\x8c\x93\xcc\x51\x14\x18\x2f\x38\x25\xb6\x4a\xae\x79\x41\x7b\x0a\xbf\x0e\x13\xb0\x6b\xe5\x5a\xa7\x5a\x6a\x48\xc6\x7a\x3f\xaa\x45\xd6\x69\x6d\x16\x8d\x20\xa5\x0b\x4d\x01\x6b\xc5\xcb\xce\x0e\x78\x3a\x79\x1e\x81\x15\x17\x07\x0a\xbc\xce\xe2\x35\x15\x78\xd7\xdc\x3a\x60\xdc\x95\xb2\xd2\xcc\x8f\xbb\x4b\xa6\xc4\x7c\x2d\x86\x5e\x38\x94\xf0\x9b\xec\xce\xfb\xff\x0f\xa0\xb1\x2a\xdc\xf4\xc4\x87\xe2\x9c\x2a\xe2\x9a\x0a\x66\x2a\x16\x64\x8f\x13\x40\xd1\x98\xfe\x26\x91\x55\x60\x58\x2b\xaf\x63\x92\x1f\x53\x64\xbe\x08\x73\x3d\x15\xbc\x28\x92\x46\xef\xd3\xe3\xef\xe6\x6f\xb7\xf7\x7f\x3c\x9a\x9f\x7f\xbb\x7d\x34\xff\xb8\xbf\xbf\x7c\xe8\x5f\x0c\x2e\xcd\xfe\xe7\x8b\x87\x01\xfa\x5f\xb4\xf1\x83\xdb\xbb\xdb\xcb\xca\x48\x90\xe2\xbc\x1b\xe5\xf5\xb7\x49\xb0\x70\x6e\x85\x48\x50\xc4\x33\x36\x96\x04\x3c\x1a\xcc\x3e\x59\xb0\x98\x30\xd4\xd1\xa1\x09\xb1\xc8\x36\x1d\x22\x97\x5b\x88\x0d\x05\xdc\x75\x63\xc9\xb0\xf4\x08\x0e\x26\x36\xb0\x09\x60\x1b\x51\xfd\x01\xe6\x62\x45\xe6\xc4\x35\x05\x9e\x15\x87\x2c\x87\x19\x2a\xa7\xac\xf0\x39\x53\x20\xd3\x1b\x3b\xde\x6c\xd6\xcf\x5d\x36\xeb\x80\xd6\x76\xb7\xd8\xd1\xea\x7d\x8b\x16\x76\x89\x59\xfc\xbd\x3b\x71\x2b\x34\x20\xfe\xdc\xea\x79\xf0\x15\xc1\x83\x70\xdf\xd1\x78\xfe\x26\x03\x21\xbd\x6a\x47\x8b\x33\x1b\x8b\xb9\x49\x2c\xce\xcc\x3d\x3f\x2d\xdf\xd2\x31\xcb\x2d\x34\x25\x3c\xa8\x18\xf8\xfd\x09\x58\xeb\xf5\x1b\xe1\x44\x5d\x32\x05\xe2\x71\x02\x44\xdc\x7a\xce\x10\x44\x09\xa5\x6e\x41\x93\x28\x68\x13\x85\x8d\xea\xcc\xd1\x1a\xc7\x36\x7b\xd7\x74\xbe\x6d\x57\x8e\x68\x7b\x9e\x4c\x12\x05\x9a\x44\x6a\x42\x24\x22\x23\x34\xe7\x1e\x9a\x12\x4a\x51\xf4\x68\x84\x91\x04\x41\x30\x45\x2c\x98\x31\x34\x12\xdc\x41\x2a\x58\xb2\x06\x6f\xa0\x5f\xc2\xf5\x4a\xdc\xa1\x2d\xf0\xd4\x24\xcc\x26\x41\xd0\xbe\xff\x4a\x98\x72\xb8\xf9\x8f\xa6\x71\xf3\xbb\x35\xc1\x6c\xac\x5b\x6e\x95\x45\xce\xa8\xd5\x12\xd8\x59\xa0\xa5\x63\xa5\x27\x43\x30\x0b\x67\xab\xa3\x66\x01\x6a\xfe\x77\x33\xa8\xf9\x10\x9e\x54\x56\x32\x39\xd7\x68\x89\x88\x44\xd1\x63\x12\x0b\xdb\xe3\x9a\x5f\xa3\x68\x4c\x3f\x3b\x92\x6e\x92\xd4\xa7\x60\x36\x29\x7d\x7d\x38\x98\xd9\x3e\x5b\xe6\x1d\x43\x13\x19\xfa\xcf\x66\x30\xf4\x82\x52\x3e\xbd\xf1\xa8\x22\x1f\x30\xb3\x4b\x20\x67\xd0\xd6\x89\xdf\x58\x61\x36\xae\xf7\xa9\x23\x62\x9c\xb7\x74\xf0\x1c\x4d\xb9\x78\x0a\x38\x28\xb1\xb3\xe4\x1f\x67\xc8\xf1\xe7\xce\xa5\x80\x86\x98\xd9\x5a\xbb\x68\x8e\x8c\x84\xb1\x1b\xba\x16\x5d\xac\x83\x84\x37\xdc\x2e\xc3\x43\x86\x24\xf4\x1b\x2b\x81\x84\xba\xcd\x74\x24\x64\x88\xac\x90\xd0\xe1\x36\x74\x24\x4c\x26\x61\x5a\xfa\xb7\xcb\xa8\xe7\x15\x4c\x36\x06\xf7\x9c\x30\x25\xd1\x88\x0b\x34\xf0\x31\xda\xe7\x1e\x53\x7a\xb1\x59\x8b\x32\xe5\xa7\x5d\xd1\x67\xc5\x68\x62\x8a\x30\x60\x5a\xcd\xb7\x09\x4f\xdd\xfb\xbe\xca\xf0\xe4\x82\x45\x46\xc4\x8a\x2c\x14\xd1\xf3\x9a\x6d\xc2\x54\x57\xf4\xb0\x57\x4c\x6d\x03\x09\xdd\x0b\x18\x91\xd9\xe1\x22\x2a\xa5\x92\xa1\x43\x54\xa9\x56\xea\x4e\x4d\x40\x04\x6e\x0f\x5b\x7a\x47\x54\xb4\x09\x4f\x15\xbf\x77\x3d\x4c\x3c\x15\x3e\xcd\x29\x63\x65\xef\x52\x02\xe2\x60\xa1\x57\xf1\x6b\xc5\xed\x5a\x17\x3f\xae\x8d\x16\x49\x21\xef\x0b\x15\xbe\x6c\xb5\xd2\xf4\x1c\x4a\xae\xba\x14\x77\x69\x08\xad\xc8\x04\x86\x97\xd6\x44\x99\x0f\xb9\x7c\x33\x10\x24\x44\x3e\x7e\xef\xf7\x11\x30\x45\x94\xd6\x82\x33\xac\xcb\x76\x3d\xe1\x72\x09\x46\xcf\x26\x63\x92\x36\x81\x8d\x49\x65\xd4\xb7\xf7\x60\x0d\x75\xd1\x92\x6c\x67\xf4\xae\xb5\x73\x94\xf8\xb5\x8a\x2c\x6f\xdb\x8a\xde\xfa\xb6\x0a\x2c\x50\x17\x05\xee\x25\x58\xdf\xb8\x96\x8e\x09\xc1\x72\xb1\x06\xb2\x5e\xd6\x40\xaf\x24\x00\x62\x30\x53\x88\xbb\xfe\x2f\xff\xeb\x18\x30\x5d\xdf\x96\xc8\x04\x24\x46\x0b\xd1\x52\x50\x5d\x60\x51\xdb\x48\x5c\x5f\x20\x8b\x3b\x0e\x3e\x91\xe0\xe2\xf0\x22\x3c\x4a\xa4\x42\x7c\x84\x5c\x41\x1c\x2c\xe6\x61\x1c\xe1\x16\x18\x6f\xae\x72\xd8\x8f\xd7\x3f\x5d\xfd\xf4\x49\x9f\x0e\x07\xbd\x71\xac\xea\x9c\xc2\x36\x75\x82\xa5\xf6\x0e\x4e\x60\x45\xbe\xf5\x14\xc9\x67\xfa\xd5\x04\x2b\x64\x73\xc4\xb8\x42\x0e\x56\xd6\x04\x61\x36\xf7\x79\x14\x94\xea\x04\x99\x0b\x0b\x2b\x18\xf3\xc8\x21\x84\x21\x4e\x60\x4c\x7e\xda\x08\x78\x7e\xda\x74\x21\xf3\xa3\xf0\x17\x15\x27\x3e\xb6\x8f\x7d\x8d\xeb\x61\x2d\x69\x8f\xdc\xe7\xe5\xa6\x8f\x39\x7e\xdc\x49\xa5\x10\x41\x7e\xc3\x37\xf6\x89\x55\x10\x71\x5d\x4d\xce\x97\x04\x7e\xe3\x32\x73\xfd\x19\xd7\xe8\x9a\x29\x79\xe9\x97\x6e\x2b\x65\xdd\x22\x54\x44\xbc\x40\x55\x44\x5c\x33\x05\xea\x04\x57\x96\xfd\x88\x48\x84\x17\xd5\x10\x24\x7d\x73\x42\xdc\xd3\x77\xba\x09\x49\xaf\x22\x02\xa5\x18\x22\x94\x6a\x8c\xe2\x9e\x9d\xeb\xc0\xbc\x24\xe1\x7c\x67\x4e\xc6\x49\x66\x1e\xa0\xb7\x1c\x69\xb2\x6d\x8d\xbf\x07\xa9\x44\x8a\x7f\xbb\xff\x5e\x12\xc3\xbf\xdd\x7f\x8f\xde\xee\xec\x4e\xf0\x6f\xf7\xdf\x3b\x7e\xe7\xe1\x77\x18\x89\x23\x6c\x59\x5c\xd8\x84\x8d\x91\xe2\xc1\xe7\xfd\x2f\xc8\xd7\x87\xf0\x28\xc8\x8e\xf8\x75\x11\x3f\x35\xfa\xa9\x99\xf8\x59\xdb\x00\xe2\x46\x96\x73\x2b\xc0\xee\xfc\x2f\xd8\xd0\x71\xda\x80\x7c\x7b\x01\x3a\x0b\x50\x87\x05\x48\xc9\xe4\xa2\x42\x16\xa0\x31\xeb\xb3\x86\x6c\x3a\x0c\x32\x70\xf7\x20\x4a\xda\x35\x11\x34\x87\x02\x1b\x24\x91\x0b\x02\xed\xb4\x81\x62\xb5\x73\x4d\x4f\x7c\xd4\xb3\x8f\x69\x69\x93\x64\x98\xdd\x08\x92\x2a\x80\xad\x49\xb0\x67\x02\x2d\x12\x91\xb4\xdb\xc2\x94\xc2\xc5\x8a\x77\x19\x6e\x27\x08\x23\x7f\x1d\xf0\xe6\x1e\x2b\x05\x42\xf3\xe4\xc1\xe4\x76\x9a\xce\x9b\x1c\x39\x75\x01\x63\x8f\x62\x81\x60\xe6\x0a\x90\xd2\x77\xc8\x41\x7e\x30\xca\xeb\x81\x44\x23\x4f\x04\x39\xc1\xe9\x84\x58\x93\xa5\x43\x0f\x4e\xf6\x59\x10\x03\xcb\x55\xb6\x68\xd1\x21\xdf\x85\x0b\x8d\x81\x73\xc5\x5b\xf2\x0e\xb3\xe6\x29\xd9\xc7\x45\x24\x3b\x09\x58\x86\x2e\x5f\x40\x79\xa8\x75\x4c\x1d\x9c\xf6\x0a\xa7\x47\x90\x2a\xf0\xe5\x87\x8f\xa4\x8a\xb7\x29\x36\xf8\x9d\xc4\xcb\xb5\x16\x7a\x67\x86\x4d\xb8\xc3\xc7\xc0\x80\xe7\xf2\xb4\x1a\xa9\x8e\xed\x90\xe4\x51\x2f\x2c\x89\xeb\xed\x5a\x68\x92\xd0\x5e\x9b\x52\x14\x99\xa1\x4a\x78\xda\x0a\x0e\xe3\x8e\x20\x95\x28\xe6\x88\x7b\x21\xbd\x63\xa2\x18\x3f\x56\x5f\xc4\x2a\x39\x63\x93\x83\x5a\xdd\xd7\x9c\xd8\x5f\xb9\x7f\x69\xb6\x82\xcc\xaf\xbe\xf6\x92\xbc\x50\xdc\x80\xca\xc2\xe4\x7e\x12\x5e\x8f\x6b\xcb\xc4\x08\x9b\x30\x53\x02\x5b\x0a\xec\x65\xd2\x6b\x4c\x9e\x81\x21\x9f\xaa\xe1\x6f\x7e\x42\x9e\x0c\x32\xe2\xf1\xd8\xc5\x43\xfe\xac\xdd\xd9\x9d\x12\x61\xc9\x2e\xf4\x15\xe3\x61\x95\x40\xea\x9b\xfd\x83\xa2\x4e\xe9\xa9\xf1\xc6\xac\x5e\xf6\x1b\x24\x6c\xdf\x0f\xdc\xb5\x52\x53\x2b\xbb\x5f\xe1\xa6\x73\x7b\xd9\x4e\x17\x01\x26\xa0\x39\xfb\x0a\xb7\x82\xd7\x6c\x5f\xd8\x7f\x7a\x52\x39\xc0\x54\x74\x02\xb9\x0b\x60\xaf\x7c\x18\x35\xb7\x49\x40\x3e\x05\x11\x73\xd4\xe4\xe6\xef\x3c\xd7\xf5\x7f\xf7\x8f\x2d\xf7\xbb\xe5\xd8\x7c\x3f\x60\xf4\xce\xb6\x0a\xe8\xb6\xc2\x59\x05\xae\x49\x98\x25\x20\xec\xde\xd6\x7c\x6d\x4d\x2d\x1e\xc3\x9a\xc0\x46\x5f\x32\xa6\xc7\x75\x29\xb1\x82\x57\x33\xdf\x08\xb3\xf9\x34\x9c\x25\x07\x93\xc5\xdf\xf1\x4f\xd5\xbd\x8c\x3c\x35\xf1\xb3\x65\xc4\x88\xa2\x10\xeb\x9e\x3e\x03\xa5\x1c\x25\x1c\x55\x5a\xc6\x7d\xe6\x2f\xbf\x4e\xbe\xb9\x5c\x70\xae\xd6\xd7\x43\xda\x51\x4c\x91\xc8\xa5\x70\x2d\x56\x9e\x9b\x0f\x6f\x80\x79\x1f\xb0\x58\x2a\xdf\xff\xa0\xd6\x9b\x0f\x73\x2e\x4c\xfd\x7e\xfe\xa6\xc0\x89\x7a\x0e\xcc\xbb\x22\x7e\x9f\x9a\xb9\x56\x4d\x8e\xbb\x4c\xbf\xdb\x3a\x4d\x69\x5d\x94\xbb\xc1\x0d\xe9\x0d\x9d\x6d\xfd\xa6\x4d\x71\x64\x3b\x43\xb9\x84\x19\xde\x69\x96\x77\x9d\x69\x94\xba\x60\x49\x1e\xd8\x36\x76\x6e\x61\x9a\x30\xb8\x9d\x07\x58\xc6\x20\xe3\xda\x58\xdc\x11\x7d\x0b\xd3\xd7\xaf\x5f\x17\x69\x41\x13\x4d\x51\x23\x29\x6b\x80\x94\x75\x25\x2a\x4d\x55\x77\x2e\x24\xd5\x8b\xc4\x0d\xb2\x51\xba\xf2\xfb\x7e\x54\xca\x1a\xe0\x67\xb8\x90\x6d\x55\x97\xdf\x7b\x74\x21\x0f\x54\x63\x83\xf0\xdd\x36\x17\xeb\xaa\x93\x8b\x8f\x7d\xfd\x9d\x36\x5b\x75\xb5\xe3\xfb\x72\xe6\x72\xa1\xfa\x78\x28\x08\xa5\xbc\xd9\x93\xa5\x13\x99\x84\xe3\x42\xe6\x62\x64\x07\x4a\x81\x34\xa5\x5e\x7c\xfc\xed\xea\xf0\x14\xea\x8f\xea\x08\x95\xd9\x1f\x7c\x3d\x38\x5d\xf6\x07\xe6\xd7\x03\x55\x65\x1e\xd7\x74\xd6\x6c\x85\xd6\x0e\xfc\x01\x28\x45\xd8\xb8\xa5\xc1\x57\xec\x72\x79\x31\xa4\x2a\x51\x8f\xd0\x7b\x6c\x59\x40\xa3\xcb\x25\x9f\x60\x7e\x6e\xb8\x20\x08\xb7\x0d\x24\xc9\x98\x61\x7a\x6e\x60\x4b\x91\x67\xac\xc0\x40\x0e\xb7\xc9\x88\x80\xf0\x15\xf3\xf1\x77\xb3\x7f\x77\xfb\xf8\x70\x77\x6d\xde\x5c\x0c\x7e\x8f\xbb\x1b\x2d\x7a\x40\xb3\x88\xf5\xae\xd9\x88\xa9\x9d\x58\x5f\x3c\xa2\x9a\x3d\x45\x5a\xa4\xf2\x87\x53\x2b\x9b\xfe\xaa\x9f\x48\xc9\x82\x5a\x6f\xfb\x76\xaa\xb6\xd9\x06\xdb\xa5\x1d\x0b\xb4\xa6\x27\x35\xfd\x6e\x37\x38\xa9\x79\x90\x39\x4c\x7f\xce\xfb\x14\x70\x78\xbb\xee\x15\x01\x6a\xb7\xce\xf1\x67\x97\xef\xfb\x03\x0c\xb7\x1c\xf9\xa3\x44\xa3\x60\x98\x25\x9b\xc3\xf0\x21\xc1\x34\xa2\xab\xc2\x0f\x28\xcd\x38\x5a\xf5\x1b\xc7\xb2\xf0\xf9\x89\x2b\xde\x62\x78\x26\x63\xc6\x1f\x18\x32\x1b\x03\x19\x38\x1c\xc8\xf8\xff\x5d\x63\xa9\xbe\x0c\xee\xda\x06\x97\xec\x62\x47\x9b\x84\x85\x8d\x14\x4b\x85\xbe\x0c\xee\x4a\x4e\x12\xf8\xcd\x9b\xd7\x3b\xb4\x5d\x1a\x20\xe9\xe1\x00\xf2\x9a\x8f\x5b\x88\xc5\x14\x77\x77\xcd\xc7\x95\xe2\xa3\xd6\xb5\x6e\xa3\xd5\x56\xe1\xcc\x3c\x60\x9b\xf0\x78\x80\x0f\xee\x9b\x3d\x4b\x9a\xf9\x22\x2c\xac\x09\xfa\x11\x3b\xee\xaf\xe8\x9e\x7b\xcc\x2a\xf4\x84\xa2\x86\x70\xa3\x99\xc0\xf6\xed\x20\x1f\x6c\x0e\xc5\xd2\x14\xbe\xf6\x76\xb1\xc7\xb2\x8d\xf6\x38\x05\xb3\x0f\x5e\x4b\x0b\x02\x62\x41\xfb\xe0\x65\x6e\xea\x88\x6b\xb1\x24\x90\x16\x05\xd9\x46\x33\x63\xc1\x3d\xd7\xe8\x2d\xad\x4a\x31\xa4\x8a\xfa\x91\xda\xcc\xd4\xd0\x5a\x99\xe6\x9a\x70\xc3\x93\x43\x61\xc7\x1b\x9c\x1e\x5a\xad\x79\x4b\x9c\xe5\x9d\x66\x7a\xd7\xd9\x46\xa5\x44\xb3\xe1\xd8\xfa\x98\x52\xc2\x46\x07\x54\xb9\xe0\x8f\xc8\xf4\x87\x74\x88\x21\x6d\x92\x1a\x07\x16\x17\x49\xd5\x99\x71\xe3\x6c\xb8\x0e\xcd\x60\x3c\xc7\xa4\xc0\x07\xdf\xb3\x1d\x8c\xfe\xbe\x0c\xee\x90\xe9\x0f\xa9\xf9\x2a\x6c\xa6\x7b\xff\x0c\xd4\x6d\xa1\x73\xf7\xbb\xdd\x12\xd7\x9e\x30\xc3\x3b\xcd\xf2\xae\x33\x8d\x4a\x31\x28\xfe\xc8\x2e\x86\xdc\x6b\xe9\x3b\xea\x9e\x19\x74\xfe\x98\x2d\xc7\xee\x1b\xfb\xb4\xb6\xe9\x65\x6f\xa7\x4d\xde\xd8\x97\xb0\x03\x3d\x7b\x63\x5f\xbe\x1d\x4a\x03\x4b\x70\x4a\xc1\x5e\xdd\xa5\x46\xf9\xf8\x2b\x81\x69\x70\xf1\x1a\x61\x20\x32\x36\x2c\x4d\x89\xad\x26\xa6\x80\xbf\x3c\x90\xca\xe8\xfd\xf2\x4b\xe2\xc1\xde\x65\x6f\x75\xd2\x11\x93\x13\x6c\xf3\xa9\xe9\x9b\x36\xa3\x47\x12\x13\x00\x79\x3d\xca\xa3\x00\xf0\x27\x69\x6d\xc6\x72\x38\x94\x09\x90\xf1\x44\x2d\x67\xeb\xf4\xad\xd6\xf1\x1a\xf5\x1c\x29\x93\xef\x74\xa9\x98\xde\x16\x15\x9c\xc8\x00\x96\xa6\xcb\x29\xb1\xe6\x46\x8f\x61\xe5\x89\x8c\x23\xd1\x37\x9f\xbd\x7b\x13\x13\xc0\x36\x08\x69\x5a\x94\x58\x4f\x38\x98\x76\xed\xb9\x03\xe6\x0b\x9a\x32\xc8\x93\x16\x39\x86\x65\xc2\xa7\x66\x38\x8d\x20\x8a\x28\x2f\xea\xc0\x58\x10\xdb\xf4\xad\xb6\xcc\x79\xc2\x7c\x7c\x33\x4a\x00\x2c\x9a\xc9\x19\x4c\x10\xa6\x40\x30\x4c\x4f\x82\x3f\xcf\x0d\x09\x14\xac\xd0\xb6\xe5\x0a\x2c\x7c\xa6\x0d\x5e\x64\x16\x74\x5b\x7e\x12\x93\x90\xaa\xdf\x3d\xe8\xef\xfb\x2e\xe6\x1d\x0a\x6f\xfb\xce\xe7\x1d\x3e\x09\x62\x87\x53\x1e\xd4\x83\x04\x7f\xee\xd7\xa4\x6b\xf9\x55\x07\x8b\x31\x61\x26\x85\x91\x32\x7a\x89\x77\xa8\x24\x48\x09\xdf\x10\xeb\x8b\x29\xee\xc6\x6c\x60\xcf\x10\x1a\x72\xa5\xb8\xa3\x21\x27\xf8\xd4\x7c\x39\x81\x29\xb7\x94\xc5\xa9\xe7\xb0\x3c\x82\x5a\x27\x9d\x85\x9c\xf3\xff\x19\x57\x11\xde\x08\x17\x95\x71\x6e\xf5\xbf\x74\xda\x0a\xe3\x19\x6b\x82\x7d\x7b\x9b\x72\x08\xee\xb6\x64\x8b\x4e\x3a\xab\xf1\x02\x3a\x4c\xa9\x24\x63\xdd\xe3\x43\x57\xa5\xaa\x8e\x98\xf6\x71\xc5\x10\x11\xa8\x1f\x8d\x49\xa7\xe9\x5c\x97\x6c\xf9\x0d\xeb\x34\x7a\x04\x57\x6c\xd5\x87\x77\xe5\xeb\xfa\x01\x5c\x2e\x94\x1e\xe4\x37\x05\x0f\x04\xf5\xe1\x88\x74\x1a\x76\xf0\xcc\xa4\xc0\xc6\x6a\x62\xf4\x52\x2e\x19\xcc\xb0\xe4\x5a\x92\xfe\x23\x8b\x4b\xe7\x22\xe9\xc3\xe0\x51\x9f\xa3\x75\xdd\xf2\x95\x7a\xca\x7d\x83\x79\x77\xeb\x39\x43\x10\x05\x78\xb7\x22\x78\x20\xbc\x0b\x47\x54\x98\x3e\x29\xb7\xb5\x15\x24\xc0\xff\x6f\x0f\xfc\xb5\xd8\xdf\x0c\xf8\x3b\xf3\x22\x3e\x67\x4d\xaa\xf5\xc0\xbf\x99\x47\xde\x06\xbd\xea\x2b\x41\x4f\x84\xd6\xbd\x8a\x9d\xdb\xd1\xe7\x5d\x46\x89\xd1\x58\xe0\xe1\x49\xa8\xed\xcd\x22\xa3\x9b\xbb\x8f\xa7\x09\x15\x46\x4d\xf1\x65\xf5\x5d\x39\xef\xcc\x8b\x38\xb2\x35\xa9\x4a\xc8\x2c\x81\x49\x12\xd6\x60\x6a\x2f\xe1\x77\x59\xfe\xe7\xb1\x04\x9d\xff\xab\xc1\xff\x55\x4c\x99\xcd\x7c\x55\xdc\xe1\x3a\x0d\xcf\x57\xdd\xcc\xb5\x92\x55\x40\x29\x71\x25\xf9\x0f\x14\x38\xf1\xff\x28\x12\x5d\xf5\x21\xd0\x01\x29\xf1\x38\xf1\x9c\xee\xa6\xe3\x30\xec\xfd\x81\xa2\x42\x3f\x9e\x33\x7a\x15\xdf\xc1\xd4\xe7\xce\x90\x7f\xe0\xb3\xc7\xc0\x7f\xf8\x80\x1a\x62\x66\x07\x9f\xe6\x8e\x00\x5e\x24\x1a\xff\x8e\x39\xd3\x83\x7f\xc0\xcc\x0e\xc3\xf8\xbf\x0f\xd3\xc3\xf8\xad\x00\x74\xb8\x0c\x40\x5d\xee\x7a\xae\x66\x81\x7b\x53\xc2\xcf\x54\x5a\x55\x81\x3f\x87\xdb\xa0\x87\xbf\x17\x89\xf6\xe3\xef\x86\xdb\x10\x2d\x23\x1d\x4d\xfc\x39\x8d\xc2\x5f\xe1\x58\xae\x62\xfc\xad\x2d\x7f\xa2\x7b\x59\x74\xd7\x3f\xab\x62\x87\x90\xcd\xb8\x9c\x65\x5f\x9b\x5b\x5e\x94\x97\x6b\x15\xf3\xbd\x3f\x19\x37\xe4\x5d\x53\x1c\xf7\x66\x0d\x4b\x3e\x24\x96\x1b\xc4\x43\xa2\x09\xc9\x87\x20\x1f\x5e\x88\x80\x5b\x92\xad\xe7\x60\x98\x4a\xef\x68\x58\xe1\x2b\xdf\xc2\x8c\xa9\x38\xf7\xbe\x76\x75\x31\x05\x2c\xca\xb8\xac\xd8\x6f\xa7\xf1\xb1\xd3\xf6\xc5\xc2\xa5\xf3\x4e\xf7\x60\xa2\x92\x31\xa8\x95\xfc\xab\xd1\x6a\xaf\x62\x90\xf2\x71\x09\x08\xbc\xe6\x5a\x66\xe5\x50\xf1\x77\xcd\xc3\x6b\xc6\xbe\x0c\xee\xd0\xab\x1f\xa9\xfa\x35\xb8\x48\xef\xc7\xb1\xfa\x35\x65\x2d\xd0\x14\x10\x56\x6c\x08\x57\x52\x60\x9e\xb2\x5a\x9a\xfe\x7a\xfb\xf6\x5f\x7a\x95\xf9\xa5\x25\x62\xb5\xfc\x5d\x8b\x52\x6e\x15\x2f\x1f\x57\x13\xb1\xf3\x3e\xa6\xb4\xa5\x40\xfc\x78\xfd\xf6\xe2\x43\xbf\x2a\x24\x56\x8f\xa7\xe2\xd7\xf0\xd5\x86\xa7\x51\xb0\x7b\x87\x59\xf3\x46\x43\x6a\x71\x93\x25\x30\xbb\x1c\x24\x9e\xa0\xa7\xcf\xff\xd1\x69\xea\x4f\x4f\x2a\x32\x9a\x1b\xbd\xa0\xd4\xbe\x20\x84\x53\xbb\xdf\x14\x2c\xee\xd7\xb6\xb5\xf6\xfe\xc4\x26\xb5\xd2\xa2\x2d\x9f\x09\xf1\x5a\xf9\x9b\x7a\xa6\x5c\x3c\x39\xdc\x86\x6e\x5f\x4f\x55\xfb\x7a\xf6\xb9\x43\x67\xa1\xcd\x46\x7b\xa5\x64\xf7\xf2\x2d\xea\xbe\x56\xf9\x43\x17\xff\x46\x9f\xc6\x9f\xe6\xb6\x9a\x0f\x08\xb7\xa0\x86\x67\xf4\xdd\x70\x1b\x4a\x48\x0e\x68\x9e\xfe\xd7\x84\x0c\xef\x76\xae\x40\x1b\xc2\x79\x4f\x19\xdc\x94\x0b\x0e\x7e\x23\xcc\x26\x16\x56\x5c\x64\xc9\x1f\x47\x68\x93\x0d\x5b\xe1\xb1\x92\xd0\x9a\x71\xec\x5f\x87\x4e\x0d\x74\x6e\xcb\x47\xe7\x11\xc6\x5b\x99\xca\x60\x5e\x6f\x71\x45\x8b\x62\xcc\x84\x2a\x80\xf2\x63\xcc\x27\x98\x83\xe8\x02\xcc\x5a\x36\x8e\x27\xb2\xa1\x78\x58\x1a\xf3\xb8\x09\x77\xf8\x18\x18\xf0\xcc\x23\x59\x0a\xbc\xc5\x18\x9d\x96\x60\xf9\xaf\xb4\xbc\xdf\xa1\xbe\xc3\x18\x00\xb3\xd1\x0d\x16\x96\xe0\xe8\xd5\xd5\xa9\x66\x11\xd3\xd5\xe9\xb2\x92\x22\x38\x10\x05\xec\xbd\x17\x4b\xb4\x25\xd6\x5e\x03\xec\x59\x19\x80\xd5\xf2\x63\xc7\x01\xd8\x33\x5d\xc0\x9e\xb5\x08\xb0\x35\xbe\x27\x1e\xbd\x2b\x03\xb0\x5a\x55\x85\xc7\x01\xd8\x77\xba\x80\x7d\xd7\x22\xc0\xd6\x58\x5c\x33\xfa\xb9\x0c\xc0\x6a\xbd\x66\x3d\x0e\xc0\xfe\xa2\x0b\xd8\x9f\x5b\x04\xd8\x14\x03\xb5\xe7\xfa\xc9\xd1\x69\xde\xaa\xc9\x3a\x52\x0e\x39\x0f\xf7\x6b\x41\x3a\x2a\xa1\xae\x22\xb5\xa2\x62\xdf\xaa\x3f\xeb\x54\x5f\xc5\x0b\xff\x26\xaa\xfe\x5d\xa7\xfa\x2a\x4e\x6f\x6a\xa2\xea\x7f\xee\x54\x5f\x9a\xea\x8b\xec\xd4\xac\x58\xf5\x6b\x6f\xd9\x14\x77\x4b\x08\x4f\x2f\x07\x5a\x25\x5f\x2c\xd8\x6e\xb1\x7c\x76\xfb\xde\x73\x94\x1f\xda\x2a\xee\x06\x25\xbb\xfd\x6f\xe1\xd7\x0e\x91\x92\x70\x86\x5e\x5d\x0e\xfa\x9a\x81\xee\xa5\xb4\xb0\x0b\x2d\x0a\x76\x2b\x26\x40\xa3\x2b\x0e\x16\x75\x70\xda\xb5\x90\x93\x5c\x2f\x65\x62\x95\x98\xc8\xeb\xa9\xeb\x54\x66\x72\x0b\x6f\x9c\xe9\xd0\xb3\x73\x15\x65\xe1\x23\xd3\x53\x8a\x2d\x5c\x00\x5b\xab\x38\x26\x6f\xfd\x65\x53\xde\xc1\x56\x8c\xbb\x81\x4b\xd8\x9a\xeb\xf6\x27\xb8\xc9\x91\x5b\xf6\x2e\xa9\x6f\x28\x40\x49\xb4\x4f\x5d\x6a\x1d\x77\xb6\x40\xba\x05\x4c\xe9\x9d\x93\x54\xdc\x50\xae\x1e\xb1\xa6\x1f\xe3\x2f\x76\x4c\x68\x49\x6e\x1d\xb1\xa6\x25\xad\x7f\x1c\xda\x46\x03\xd8\xf6\x59\xe9\x00\x53\x46\x2f\x00\xdc\xc5\xcb\x07\x5a\x01\x9f\xe7\x80\x20\x56\x0e\x0c\xa5\xdd\x4d\xda\x88\x1d\xd1\x85\xcf\x23\xe8\xdc\x54\x09\x41\xce\x5a\x25\x84\x16\x15\xf6\xe1\xe2\xfc\x98\xfd\xf1\x7b\xb3\x0b\x40\x0b\xaf\x64\x4b\xc1\x6b\x8b\x4a\x8c\x12\xc6\x5b\x7e\x89\x91\x54\x58\x79\xb2\xab\x31\xaa\xab\x88\xfd\xb4\xcc\x2a\xf6\x09\x76\x28\x19\x0e\x02\x95\x36\xda\xe4\x26\x9b\xb1\xcf\xc1\x10\x2a\x33\x48\x6d\xa9\x92\x59\x51\xb2\x35\x6d\xb5\x82\xfb\xdf\x9a\xef\x6d\xea\x53\xae\x3d\xb3\xac\x56\xab\xf7\xe3\xf7\x7e\x4a\xf6\xb5\x29\xab\xe5\xfa\x14\x2c\x2d\xb7\xd5\xfa\x1d\xf4\x53\x2e\xcb\x6f\xca\xea\xe6\xd8\x0a\xd2\x13\x62\x88\xec\x68\x71\x7d\x8c\x2b\x5f\x2e\xbf\x78\xff\x26\xb8\x84\x6e\x84\x2d\xe8\xfd\xf0\x7f\x01\x00\x00\xff\xff\x19\x19\xa9\x7c\x2f\x42\x01\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 82479, mode: os.FileMode(0664), modTime: time.Unix(1609851425, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0xfa, 0x11, 0x35, 0xf9, 0x15, 0x30, 0xed, 0xe7, 0x73, 0xe8, 0xc7, 0xa1, 0x9a, 0x80, 0x63, 0xd4, 0xef, 0x95, 0xce, 0xc1, 0x41, 0x12, 0xb1, 0x6a, 0xc8, 0x1d, 0x19, 0xe, 0x7f, 0x30, 0xcb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
