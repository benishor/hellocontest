// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (64.146kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x73\xdb\xb6\xf2\x7f\xcf\xa7\xc0\x9f\xff\x99\x36\x67\x3a\x8e\x63\x3b\xe9\xe9\x69\x6d\x75\x1c\xc5\x4e\x32\xf5\x25\xb1\xdc\x24\x6f\x1c\x88\x5c\x49\xa8\x41\x80\x05\x40\xcb\xea\x9c\x0f\x7f\x86\x17\xd9\xba\x90\x14\x41\x51\x24\x28\xeb\x21\x99\x44\xd2\x82\xc0\xee\x6f\x2f\x5c\x2c\x16\xc7\xbf\x3f\x78\x14\xdd\x83\x90\x84\xb3\x13\xeb\xe0\xd5\x6b\x0b\x01\x73\xb8\x4b\xd8\xf0\xc4\xfa\xf3\xf6\x7c\xef\x17\xeb\xf7\xce\x8b\xe3\xff\xdb\xdb\x43\x1f\x80\x81\xc0\x0a\x5c\x34\x26\x6a\x84\x86\x14\xbb\x80\x8e\x5e\x1d\x1e\xbe\x3a\x44\x7b\x7b\x9d\x17\xc7\x84\x29\x10\x03\xec\x40\xe7\x05\x42\xc7\x02\xfe\x0e\x88\x00\x89\x28\xe9\x9f\x58\x43\x75\xf7\x93\xf5\xf4\xa0\xa3\x57\x87\xaf\xad\xfd\xe8\x77\xbc\xff\x17\x38\x0a\x39\x14\x4b\x79\x62\x7d\x50\x77\xdf\x08\x73\xf9\xd8\x42\xc4\x3d\xb1\x1c\x4c\x29\x61\x03\x9e\x7c\x16\x12\x20\x74\xec\x0b\xee\x83\x50\x13\xc4\xb0\x07\xe1\x8f\x98\x3d\xe0\x4e\x20\xad\xce\x39\xa6\x12\x8e\xf7\xa7\x3f\x48\xff\x3d\x76\x1c\xf0\x55\x3e\x89\x33\x22\xd4\x45\x6a\xe2\xc3\x89\xa5\x88\xa2\xd0\xc7\x22\x79\x7c\x38\x20\xc5\x0e\x8c\x38\x75\x41\xec\x27\x04\xfb\x11\xc5\x2c\xf5\xe3\xaf\x97\x56\xf8\x41\x10\xf7\x71\xb0\xe5\xf9\xdd\x13\x49\xfa\x14\xac\xce\xad\x08\x96\x66\x56\x86\x01\xcb\x73\x4a\x9f\xd7\x05\xee\x03\x7d\x62\xbc\x24\x43\x16\x7f\x34\x4b\x56\x62\xbe\x65\xe7\x9c\x46\x37\xc2\x94\x0c\x99\xd5\x91\x0a\x0b\x55\x94\xc8\xc3\x62\x48\x98\x4d\x61\xa0\xac\xce\xa1\x26\x95\x20\xc3\x91\x0e\xd9\x08\x1e\x7c\xcc\x5c\x3d\x76\x04\x12\x6c\x0f\x8b\xbb\xc0\xd7\xa3\x1b\x0b\xbc\x8a\x02\x2b\x25\x48\x3f\x50\x20\xe7\xbf\x98\xfd\x2a\x19\x4d\x3a\x98\x82\x85\xee\x31\x0d\xe0\xc4\x7a\x63\xed\x2f\x0c\xb5\x9f\x3e\xd6\xf1\x7e\x0c\xa5\xb9\xcf\x7c\xec\xdc\x11\x36\xcc\x9f\x7e\x28\x11\x1b\x2b\x85\x9d\x91\xd5\x79\x5d\x74\xd1\x8a\xfb\xab\x88\x8e\xf7\x97\x9e\x3f\xa7\xa2\x48\x5f\x25\xdc\x07\xc7\xd9\xa9\x43\xbb\xd5\xa1\x49\xa4\x1e\xd4\x86\xd4\x48\x7f\x77\x50\xdd\x41\xb5\x2c\x54\x33\x38\x56\x15\x54\x7b\x8e\xe0\x94\x82\x3b\x1b\xe9\xc9\xc0\x07\xe1\x8c\xc0\xb9\xeb\x72\xa6\x30\x61\x20\x36\x0c\x5e\x1d\xb2\x52\xc8\xb8\x2f\x43\x24\x47\xd8\xe5\x63\x3b\x8c\x3c\xad\x0e\x61\x99\x64\x4b\x6c\x4e\x67\xf5\x57\x02\x63\x9f\x0b\x65\x2d\xfe\xb4\x24\x3f\x57\xf0\x34\xd7\x20\xa4\x32\xb6\x88\x51\x48\x9d\x6d\x59\xc2\x42\xa2\x2c\x2d\xce\x6c\xd9\xa4\xcb\x67\xc6\x6a\x3f\x69\x40\x9a\xe9\x5e\x5b\x6a\xeb\x4a\x6e\x2d\xe9\xad\x25\xc1\xb5\xa4\x98\xfa\xe4\x75\x88\x8b\xda\xfb\x2c\xfa\xd5\x11\x7b\x42\x97\x62\xff\xa7\xdf\xa4\x2b\x7f\x2a\x41\xca\x8f\x9b\xf4\x2c\x47\x65\x3d\xcb\xfc\xa4\x67\xbe\x9c\xfd\x22\x3f\x99\x20\xb0\x82\xed\x4a\x24\xa4\x39\xd2\x70\x95\xb7\xb8\x4f\x21\xcd\x8f\x56\x99\x6a\x28\x4a\xb2\x52\x55\xb5\xd5\xb3\x84\xcf\x2c\x12\x96\x64\xf8\xca\x7a\x83\xe6\x82\x7e\x7d\xc6\x6f\x3c\x0a\x3c\xcb\x6d\xec\x1c\xfd\xa6\x1c\xfd\x1a\xae\x61\x09\xc3\x40\xc1\x51\xb8\x94\x5c\x94\xc0\xce\x9d\x1d\x8a\x55\x81\x6b\x53\xc2\xee\x56\x4b\x68\x0d\x6f\x51\xbd\x65\x96\x0e\x17\xcf\xc0\x34\xab\x9d\x59\x7e\x3e\x66\x59\xed\x4c\xf2\xce\x24\xb7\xcb\x24\xbf\x27\x98\xf2\x61\x62\x92\x41\x29\xc2\x86\x32\xf9\xac\x1a\xab\x1c\x9a\x02\x7b\x44\x98\xb2\x3a\x6e\x34\xee\x26\x6c\x32\x8a\xf6\x21\x19\xa6\x7b\xd1\x7f\x4f\xac\xfb\x3e\x7f\xb0\xb2\x2d\xf5\x3b\xfe\x10\x2f\xb9\xcf\x1f\x0e\x72\x8c\x72\xa1\x5d\xb6\x2c\xc0\x17\xa6\xe0\x82\x00\x53\x58\x11\xce\xac\xce\x3d\x08\x45\x1c\x4c\x0b\x59\x5b\x1f\x3b\x84\x0d\xad\xce\x7f\xb2\x0d\xed\x12\x6b\xb0\x13\x3e\xc8\xc6\x02\xb0\x95\x6f\x85\xdf\x05\x4a\x71\xf6\x6e\x86\x93\xe5\xb9\x94\x46\x47\xf1\x84\x07\xca\x96\x6a\x12\xaa\x1b\x30\x77\x5d\x53\x1c\x4f\x38\x09\x91\x41\x82\x4a\x3e\x58\xad\xbb\x34\x36\xda\xf6\x4d\x48\xa5\x65\xa5\x2a\xb0\xe2\xba\xa4\x02\x1c\x20\xf7\x20\x6d\x17\x06\x38\xa0\xaa\x9c\x89\x0c\x98\x0b\x82\x12\xb6\x72\xee\x59\x59\x89\xf4\xfc\x41\xda\xe3\xca\x5a\xf2\x01\xa1\x54\x9f\xca\xe7\x92\xc4\xba\x94\x99\xae\x48\xcd\x3e\xa0\xac\x3c\x4b\x19\xf8\x39\x94\x4b\xd0\x86\x5f\x37\xa4\xda\xc1\x6f\x41\x52\x6d\x85\x5f\xc6\xee\x1f\xd2\x82\x5f\xf9\xcc\xdd\x4a\x3f\x94\xbd\x66\x2d\x92\x95\xfa\xb6\x81\xed\xce\x69\xa8\x72\x09\x52\xe2\xe1\x96\x6c\x7c\xae\x8e\x1c\xd2\xa8\x8a\x85\xbb\x8d\xc0\x48\x87\xd3\xb5\xa1\x28\xaa\xc4\x8a\x41\x14\xc7\x5c\x0b\xa5\x59\x8d\x63\x47\xf0\xb1\xfd\x18\xd9\x15\xde\xc8\x76\x38\x0d\x3c\xf6\x44\xf8\xb6\x9a\xf7\xda\x6d\x7b\x8f\x8d\x3d\x2d\x52\x02\x33\x49\x71\xf4\xa6\x77\x62\x4d\x40\x5a\x9d\x5e\x8c\x86\xdc\xc1\xb2\xeb\xaa\xe6\xbf\x9e\xee\xfb\x40\x54\x8d\x30\x2d\xae\xea\x73\xea\x2e\xd6\x57\x45\x74\x19\x35\x56\xa8\x12\xef\x57\x6c\x03\x27\x8d\xb2\x40\xcd\x55\x3a\xe1\x98\xb8\x2a\xbb\xa4\x00\x6d\x28\xfc\xda\x4e\xc0\xce\x55\xc3\x1c\x68\x89\x21\x1b\xeb\xdd\xa4\xd4\x53\x67\xb4\x87\x64\x05\xb9\x41\xb5\x19\x60\xad\x24\xf0\xda\x01\x6f\x03\xc0\xbb\xf6\x41\x60\xc5\xc5\x96\x02\x6f\x67\xf1\x4c\x05\xde\x05\x77\xb6\x18\x77\x19\x25\x16\x68\x43\xb8\x3b\x63\x4a\x4c\xe6\x62\xe8\xa9\x43\x89\xbf\x59\x3d\xf9\xf0\xef\x08\x1a\xb3\xc4\xa6\x27\x3e\x7c\x41\x3c\x2c\x26\x36\x71\x38\xb3\x15\xe7\x54\x11\xdf\x56\xf0\xa0\x52\x11\x77\x3b\x02\x94\x2c\xf0\x47\x89\x9c\x12\x6b\x9c\x49\x7d\x67\x3f\xa6\x0c\xf3\x08\xf3\x03\x15\x25\xe5\xa5\xd5\xf9\x70\xfb\x87\xfd\xe9\xea\xf3\x9f\xb7\xf6\xc7\x4f\x57\xb7\xf6\x9f\x9f\x3f\x9f\xdd\x74\x4f\x7b\x67\x76\xf7\xe3\xe9\x4d\x0f\xfd\x17\x2d\xfc\xe0\xea\xfa\xea\xac\x36\x8d\xc8\xf1\xe4\x46\x85\x00\xcb\x1a\x31\xf5\x74\xa5\x34\xa2\x8c\x9b\x6c\x87\x46\xf0\x64\x65\x9b\x54\x89\x29\xf7\xd0\x4e\x37\x4c\x88\x52\x96\x75\x23\x71\xc6\xa5\x54\xa3\x84\x23\x6f\x87\x66\x3c\xf9\x0a\x0f\x13\x17\xd8\x08\xb0\x8b\xa8\xfe\x6a\x0b\xa9\xc8\x4a\x2e\x9a\x82\xd5\x9a\x23\x9b\xed\x8c\xa8\x73\x12\x01\x9c\x29\x90\xf9\x83\x3d\xdf\xa4\xd7\x9b\x5d\xd2\x6b\x8b\x5e\x01\xaf\xb0\xa7\x35\xfb\x16\xbd\xff\x65\x26\xfb\x37\xee\xd1\x9d\xd8\x80\x84\xbc\xd5\x73\xe7\x33\x84\xa6\xfb\x72\x09\x0e\x67\xae\x9e\x37\x4f\x96\xf7\xa3\x8c\xc6\xa8\xfe\xad\x6f\x95\xdd\x36\xc5\x7f\xd7\x8c\xcc\xee\x08\x9c\xf9\x3a\x8c\x98\x51\x67\x4c\x81\xb8\x1d\x01\x11\x57\x81\xd7\x07\xa1\x59\x99\x91\x26\x82\x68\x48\x14\x8d\x89\xe2\x41\x75\x78\x34\xa7\x04\x8b\xb3\x33\x5d\x21\x96\x2b\x40\xb4\x5d\xc3\x4a\x25\x8a\x24\x89\xd4\x88\x48\x44\x06\x68\xc2\x03\x34\x26\x94\xa2\xe4\xd1\x08\x23\x09\x82\x60\x8a\x58\xc4\x31\x34\x10\xdc\x43\x2a\x7a\xc1\x8c\x76\x92\x1f\xe3\xe9\x5a\xfc\x55\xb1\x9d\xfb\x34\x4a\x57\xe0\xb1\x4d\x98\x4b\xa2\x78\x7c\xf3\xb5\x30\xd5\x68\xf5\xcf\xa6\x69\xf5\x77\x67\x84\xd9\x50\xb7\xe0\x6a\x95\x5a\x27\xa3\x56\xa0\xd7\x25\x46\x7a\xae\x8a\xcd\x10\x3c\xc4\xdc\xda\x29\x75\xad\x4a\xfd\x6f\x33\x94\xfa\x26\x6e\x22\x55\xb1\x5a\xcf\x29\x34\x22\x12\x25\x8f\xc9\xac\x39\x4e\x1b\x7e\x4e\xb9\x53\xe6\xb9\x53\xef\x45\xf5\x0e\x95\x77\xb5\x3a\x87\xf2\xf0\x30\x73\x43\x6d\x99\xec\x74\x7b\x03\xba\xfd\xcb\x46\x75\x7b\xf9\x8c\x46\x4b\x46\x69\x51\x55\x64\xe9\x56\x42\x25\x0f\x06\x9d\xba\x7f\x05\x52\x79\xc0\x54\x92\xba\xf7\x01\xdc\x99\x0f\x93\xe1\x16\xd1\xca\xc7\x20\x52\xde\xfa\x96\x8a\x56\x7d\x3f\xfc\xdd\xcf\x4b\x19\x8f\x25\x33\x89\x69\x00\x56\xe7\x70\x29\x15\xb7\xf4\x92\xae\xc0\xb7\x09\x73\x04\xc4\xd3\x5b\xe2\xd7\x12\x6b\xf1\x10\xe6\x08\x16\xe6\xb2\x82\x3d\xbe\x4f\x43\x13\x40\x38\x9b\x3d\xee\xe9\x61\xc2\x2a\x3d\xd4\x9a\x7b\x7c\x6e\x49\xe3\x89\xa2\x90\x6a\x95\x3f\x02\xa5\x1c\x65\x64\x0d\x36\x7b\x2a\xf6\xf1\xac\x95\xe0\x5c\xcd\x1f\x26\xd2\xf6\x89\x65\x92\x93\x8b\x34\xc5\x4f\x5b\x15\x28\x26\xbe\x04\x16\xbc\xc3\xe2\x49\xf8\xe1\x07\x6d\x38\xb5\x1a\xce\xf3\x93\x02\x2f\x99\x39\xb0\xe0\x9c\x84\x73\x32\x33\x91\x9c\x1d\xd7\xd9\xe1\xb4\x75\x86\xd2\x3a\x7b\xb2\xa0\x1b\x32\xe8\x7b\xcb\xf2\xcd\x63\xf1\xb4\xcd\x4f\x3f\x87\xc3\x6b\x71\x79\x5d\x4e\xa3\x4c\xcc\xe4\x2f\x6c\x19\x3b\x57\x30\xce\x58\xdc\xda\x0b\xac\x62\x91\x69\x63\x4c\x8f\x5d\x5d\xc1\xf8\xd5\xab\x57\x65\x46\xd0\x44\x53\x32\x48\x66\x9b\x1f\x94\x15\xec\x3c\x7e\x59\x89\xa8\xae\x7d\x48\x7b\x9b\xca\x5a\xa4\x51\xb2\x0a\xe7\xfe\xac\x84\xd5\xc3\xf7\x70\x2a\xdb\x2a\xae\x70\xf6\xe8\x54\x6e\xa9\xc4\x7a\xe0\xe3\xa8\xd4\x68\x5e\x74\x72\xfa\x71\x28\xbf\x03\xb3\x45\xd7\x38\xbe\xcf\x1e\x7c\x2e\x54\x17\xf7\x05\xa1\x94\x9b\xcd\x2c\xad\x44\x72\xb4\x2e\x64\x4f\x57\xb6\xa5\x2a\x90\x27\xd4\xd3\xf7\x9f\xce\xb7\x4f\xa0\xe1\xaa\x9e\xa1\x30\xbb\xbd\xaf\x5b\x27\xcb\x6e\xcf\xfe\xba\xa5\xa2\x2c\xe2\x9a\x0e\xcd\x16\x68\xe3\xc0\xef\x25\xa7\xcc\xcd\x66\x93\xd6\xeb\xf2\x74\x49\x75\xa2\x1e\xa1\x63\xec\x38\x40\x93\xaa\xec\x3b\x98\x9c\x58\x3e\x08\xc2\x5d\x0b\x49\x32\x64\x98\xc6\x5d\x69\xee\xb1\x02\x0b\x79\xdc\x25\x03\x02\x22\x14\xcc\xfb\x3f\xec\xee\xf5\xd5\xed\xcd\xf5\x85\x7d\x79\xda\xfb\x23\xad\x8e\x30\x79\x80\x59\x8a\x75\x64\x36\x62\x1a\x57\xac\x2f\x01\x49\x6b\x4f\x6d\x10\x8b\xb4\x94\x2a\x5c\x4e\xa3\xda\xf4\x77\xf3\x8a\xb4\xb9\xde\xc5\xeb\x24\x35\xcf\xdc\x54\xa0\x99\x9e\xd4\x0c\xa7\x6d\x70\x52\x73\x2b\x73\x98\x21\xcf\xbb\x14\x70\x7c\x2c\xe5\x9c\x00\x75\x5b\xe7\xf8\x57\xef\xce\x87\x0b\x8c\x77\xe5\xc3\x55\xa2\x41\xb4\xcc\x8a\xcd\x61\xfc\x90\x88\x8d\xe8\xbc\xf4\x03\x2a\x33\x8e\x4e\xf3\xc6\xb1\x2a\x7c\x7e\xe0\x8a\xb7\x18\x9e\xd9\x98\x09\x17\x86\x6c\x63\x20\x03\xdb\x03\x99\xf0\xcf\x05\x96\xea\x4b\xef\xba\x6d\x70\x59\x69\xcd\xc2\xb5\x45\xc6\x8c\x62\xa9\xd0\x97\xde\x75\xc5\x49\x82\x70\x78\xfb\x62\x8d\xb1\x2b\x03\x24\xdd\x1e\x40\x5e\xf0\x61\x0b\xb1\x98\xe3\xee\x2e\xf8\xb0\x56\x7c\x34\xfa\xae\x6b\xb4\xd8\x6a\xe4\xcc\x0d\x76\x09\x4f\x07\x78\xef\xb3\xd9\x5c\xd2\xcc\x17\x61\xe1\x8c\xd0\x0f\xd8\xf3\x7f\x43\x9f\x79\xc0\x9c\x52\x4f\x28\x6b\x08\x17\x86\x89\x6c\xdf\x1a\xf4\x51\xf1\x26\x96\xb6\x08\xa5\xb7\x8e\x3d\x96\x6d\xb4\xc7\x39\x98\xbd\x09\x5a\x5a\x10\x90\x0a\xda\x9b\x20\xf7\x84\x40\xd6\x88\x15\x81\xb4\x2c\xc8\x16\x86\x19\x0a\x1e\xf8\x56\xe7\xc9\xaa\x94\x43\xaa\x68\x1e\xa9\x66\xa6\x86\xe6\xca\x34\xe7\x88\x0d\x4f\x0e\xc5\x13\x37\x38\x3d\x34\x5b\xf3\x96\xc9\xe5\xb5\x38\xbd\x2e\xb7\x51\x25\xd1\x6c\xbc\xb6\x6e\x72\x5f\xf9\xf6\xd8\xcf\x70\x45\x76\xb8\xa4\x6d\x0c\x69\xb3\xc4\xd8\x73\xb8\xc8\xaa\xce\x4c\x5b\xa7\xe1\x32\xb4\xa3\xf5\x3c\x27\x01\xde\x84\x9e\x6d\x6b\xe4\xf7\xa5\x77\x8d\xec\x70\x49\xe6\x8b\xd0\x4c\xf7\xfe\x11\xa8\xdf\x42\xe7\x1e\x4e\xbb\x25\xae\x3d\x83\xc3\x6b\x71\x79\x5d\x4e\xa3\x4a\x0c\x4a\xb8\xb2\xd3\x3e\x0f\x5a\xba\x47\xdd\xb1\xa3\xc9\x3f\x67\xcb\xd1\xa2\x83\x7d\x1b\xbe\xee\x20\xed\x52\x42\xca\x87\x5f\x09\x8c\x8b\xde\xba\x1e\x75\xb6\xb2\x05\xfc\x1d\x80\x54\x56\xe7\xed\xdb\xec\xbb\x05\xca\x28\x45\x8e\x22\xe8\x90\x55\x7c\x8b\xfa\xad\x00\x08\x99\x34\xc7\xb1\x02\x0e\x65\x14\xb5\x3f\x7b\xe2\xd6\xc1\x6b\xad\xae\x4e\xcd\xf4\xe9\xaa\xfd\x8e\xbe\x91\x8c\x60\x69\xfb\x9c\x12\x67\x62\x75\x18\x56\x81\x48\x3f\x86\x97\xf9\xec\xf5\x87\x18\x01\x76\x41\x48\xdb\xa1\xc4\xb9\x8b\x2f\xfd\xd3\xe6\x1d\xb0\x90\xd0\x96\x51\x9e\xb4\x04\xbd\x1c\xf1\xb1\x1d\xb3\x11\x44\x19\xe1\x25\x13\x18\x0a\x12\x5d\x3a\x18\x46\x11\x79\xa7\x1a\x57\x0c\xa3\x04\xc0\x74\x98\x82\xc1\xc4\xe2\x05\x73\xf1\x1d\x8a\x24\xb5\x61\x43\x96\xa6\xf5\x1e\x69\xa6\xea\xf6\xf4\x49\x6a\xf3\xc0\xa6\xdd\x83\x8e\x65\x6a\xe4\xd8\xb7\xee\x65\x38\x51\x3d\x88\x69\x57\xe1\xcc\xf5\x01\xcc\xec\xc6\x98\x41\x25\xa2\x3e\x94\xda\x64\x8a\xfb\x79\xb7\xe7\xa4\x13\xf5\xb9\x52\xdc\xd3\xa0\x9b\xbb\xe4\xa7\x30\xd5\x86\x2e\xf9\x89\x75\x2e\xfc\x67\x5a\x45\xb8\x11\x2e\x6a\x45\x67\x97\x5f\x75\xc6\x8a\xe3\x19\x67\x84\x43\x7b\x9b\xd3\xca\x6a\x99\xb2\x45\x2d\x21\x9b\x6b\xf2\xec\x94\xba\x0b\x60\x8e\xaa\xee\x88\x49\xfb\xaa\xdf\x02\x2d\x20\x49\xb9\xfe\xe3\x85\x9b\xfe\xeb\x0c\xba\x6b\x6a\xbe\x41\xbc\xab\x50\xd6\x37\xe0\x73\xa1\xf4\x20\xbf\x48\xb8\x25\xa8\x8f\x57\xa4\x33\xb0\x87\x1f\x6c\x0a\x6c\xa8\xf2\x1b\x7e\xaf\xb0\xe4\x5a\x94\xe1\x23\xcb\x53\x17\x52\xd2\x9b\xde\xad\xbe\x8e\xfa\x81\xf0\xb9\x04\xab\xe3\x92\x21\x51\x39\x55\x90\x15\xeb\x5d\x8e\xfa\x18\xad\x77\x71\xc3\xd4\x12\x7a\x37\x43\xb8\x25\x7a\xa7\xdf\x3b\x76\x4e\x01\x72\x3a\xf5\x96\x54\x80\xff\x6f\x0f\xfc\xb5\xb4\xdf\x0c\xf8\x7b\x93\x32\x3e\x67\x8e\xaa\xf5\xc0\xbf\x9c\x24\xde\x06\xbd\xec\x2a\x41\xf7\xc4\xbf\x76\x6e\x67\xb3\x6e\x67\x45\x89\xd1\x50\xe0\xfe\x5e\x2c\x6d\xbd\x22\x23\x53\xdc\x59\x73\xf7\x46\x79\x93\x32\xbe\x6c\x8e\xaa\x16\x7d\x96\xc0\x24\x89\xcb\x30\xb5\xdf\xe2\xd7\xc9\x00\x14\x31\x06\x3b\x17\xd8\x80\x0b\x6c\xe4\xb6\xd5\xa7\x94\x55\x5a\x7f\x1d\xc3\x53\x56\x97\x13\xad\x7c\x15\x50\x4a\x7c\x49\xfe\x81\x12\x8d\x6e\x9f\x45\xae\xab\x39\x04\x7a\x20\x25\x1e\x82\xd1\xb7\xf0\xe4\xe0\x30\x9e\xfd\x96\xa2\x42\x3f\xa4\xab\xbf\x07\x3a\xf7\xfa\xfc\x1d\x7f\xb8\x8d\xfc\x47\x08\xa8\x3e\x66\x6e\xf4\x69\xe1\x08\xe0\x91\xc2\xf8\x6d\xe6\x95\x1e\xfc\x1d\x66\x6e\x1c\xc9\xff\xd4\xcf\x8f\xe4\x97\x62\xd0\xfe\x53\x0c\xea\x73\x3f\xf0\x5b\x1a\x7e\xe6\xaa\x55\x1d\xf8\xf3\xb8\x0b\x7a\xf8\x7b\xa4\x68\x3f\xfe\x2e\xb9\x0b\xc9\x9b\xa4\xa7\x89\x3f\xcf\x28\xfc\x95\x8e\xe5\x6a\xc6\xdf\xdc\xeb\x4f\x72\x89\x82\xee\xfb\xcf\x2c\xd9\x36\x24\x34\xce\x1e\xf4\x2f\x93\x28\x1f\xe5\x15\x7a\x8b\xf9\xde\x1d\x0d\xb7\x73\xbb\x49\xeb\x86\x47\x33\xf2\x04\x6a\xe6\xc2\x91\x12\x79\xef\xad\x52\x97\x38\xf1\xbd\xd3\x98\x36\x68\x4c\xcd\x99\xf2\xb9\x9b\x85\x28\xe0\x2a\xae\xfc\x8b\x1a\xdb\x18\x1f\xe6\x2c\xdf\xf2\x53\xb9\xde\xe9\xb6\x11\xaa\x18\x83\x5a\x79\xba\x06\xad\xf6\x2c\x06\x29\x1f\x56\x80\xc0\x0b\xae\x65\x56\xb6\x15\x7f\x17\x7c\x18\xa1\xef\x4b\xef\x1a\xbd\xfc\x81\xaa\xdf\xa2\x9b\xf6\x7e\x18\xaa\xdf\x72\xc2\x76\x53\x40\xd8\xc8\x0d\xd1\x11\x06\x03\xe5\xb4\x34\x53\xf5\xfa\xf5\xaf\x7a\x75\xf4\x95\xe5\x4c\xb5\xfc\x5d\x8b\xb2\x63\x35\xbf\xe9\xcd\xe6\x4c\x27\x5d\x4c\x69\x4b\x81\xf8\xfe\xe2\xf5\xe9\xbb\x6e\x5d\x48\xac\x1f\x4f\xa5\xeb\xef\x9a\xcb\xc1\x0f\xa2\xb3\x36\xcc\x99\x18\x0d\xa9\xe9\x55\x85\xc0\xb4\xae\x9c\xcc\x46\xe2\x1e\xba\xfb\xf8\x8f\xce\x50\x7f\x05\x52\x91\xc1\xc4\xea\x44\x85\xf1\x25\x21\x9c\x3b\x7d\x53\xb0\xb8\x59\xdb\xd6\xda\xdb\x0e\x4d\x1a\xa5\x45\x07\x34\x33\xe2\xb5\xea\x8f\xe0\x8c\xb9\xb8\xf3\xb8\x0b\xbb\x53\x38\x75\x9d\xc2\xd9\xe4\x79\x9a\xa9\x34\x8d\xf6\x4a\xd9\xee\xe5\x5b\x32\x7d\xad\x4a\x85\x5d\xfc\x9b\x7c\x9a\xde\x7b\x6d\x36\x1f\x10\x1f\x18\x8d\x3b\xea\x5d\x72\xb7\x8a\x3b\xae\x35\x7b\xf5\x99\x90\xe1\xad\xe0\x46\xea\xa2\x3d\x01\x17\xe9\xda\x79\x91\x73\xd3\xb0\x15\x01\xab\x08\xad\x2b\x9a\xf4\xed\xd0\xa9\x81\xce\x65\xfa\xa4\x7b\x60\xba\x95\xa9\x0d\xe6\xcd\xd6\x41\xb4\x28\xc6\xcc\xd8\xb0\xaf\x3e\xc6\xbc\x83\x09\x88\x5d\x80\xd9\xc8\x31\xef\x4c\x6d\x28\x1f\x96\xa6\x3c\x6e\xc4\x3d\x3e\x04\x06\x7c\x65\x03\x95\x12\xbb\x18\x83\x83\x0a\x2c\xff\xb9\x96\xf7\xdb\xd6\x3d\x8c\x1e\x30\x17\x5d\x62\xe1\x08\x8e\x5e\x9e\x1f\x68\xd6\x1b\x9d\x1f\x3c\x15\x1c\x45\xed\x4b\xc0\xdd\x78\x55\x51\x5b\x62\xed\x39\xc0\x1e\x56\x01\x58\x2d\x3f\xf6\x3c\x00\x7b\xa8\x0b\xd8\xc3\x16\x01\xb6\xc1\x7d\xe2\xc1\x51\x15\x80\xd5\x2a\x00\x7c\x1e\x80\x3d\xd2\x05\xec\x51\x8b\x00\xdb\x60\x71\xcd\xe0\x4d\x15\x80\xd5\xda\x66\x7d\x1e\x80\x7d\xab\x0b\xd8\x37\x2d\x02\x6c\x8e\x81\xda\x70\xfd\xe4\xe0\xa0\x68\xd5\x64\x13\x29\x87\x82\xad\xf8\x5a\x90\x8e\xca\xa8\xab\xc8\xad\xa8\xd8\xb4\xe8\x0f\x77\xa2\xaf\x63\xc3\xdf\x44\xd1\x1f\xed\x44\x5f\x47\xaf\x25\x13\x45\xff\x66\x27\xfa\xca\x44\x5f\xe6\x50\x65\xcd\xa2\x9f\xdb\x65\x53\xdc\xaf\x20\x3c\x3d\xeb\x69\x95\x7c\xb1\xe8\xb8\xc5\xd3\xb3\xdb\xb7\xcf\x51\x7d\x68\xab\xb8\x1f\x95\xec\x76\xbf\xc5\x5f\x7b\x44\x4a\xc2\x19\x7a\x79\xd6\xeb\x6a\x06\xba\x67\xd2\xc1\x3e\xb4\x28\xd8\xad\x59\x01\x8c\xae\x38\x98\xd6\xc1\x69\xd7\x42\x8e\x0a\x6d\xca\xa4\x0a\x31\x53\xaf\xc7\xbe\x57\x9b\xc9\x2d\x7d\x70\x66\x87\x9e\xb5\xab\x28\x4b\x37\x38\xcf\x29\xb6\xf0\x01\x5c\xad\xe2\x98\xa2\xf5\x97\xa6\xec\xc1\xd6\x8c\xbb\x9e\x4f\xd8\x9c\xeb\x0e\x19\x6c\x72\xe4\xb6\xfa\x94\xd4\x37\x14\xa1\x24\x39\x52\x2e\xb5\x9a\x93\x4d\x91\xee\x00\x53\x7a\x2d\x8d\xca\x1b\xca\xd9\x86\x68\xfa\x31\xfe\xf4\xc4\x84\x16\xe5\x52\x43\x34\x2d\x6a\xfd\xe6\x65\x0b\x03\x60\x37\xd4\x4a\x0f\x98\xb2\x3a\x11\xe0\x4e\x1f\x3f\xd0\x0a\xf8\x02\x0f\x04\x71\x0a\x60\x28\xef\x26\x51\x53\x9a\xa7\x95\xee\x1e\xb0\xf3\x54\x15\xc4\x39\x73\xc5\x10\x5a\xda\xb0\x09\x2f\x17\x86\xed\xb7\xdf\xcd\xae\x01\x2d\xfd\x32\x5b\x09\x5e\x5b\x54\x65\x94\xb1\xde\xea\xab\x8c\xa4\xc2\x2a\x90\xbb\x32\xa3\xa6\xea\xd8\x0f\xaa\x2c\x64\x1f\x61\x8f\x92\x7e\x2f\x12\xa9\xd1\x26\x37\xdb\x8c\x7d\x8c\x96\x50\x9b\x41\x6a\x4b\xa1\xcc\x8c\x90\x9d\x71\xab\x05\xdc\xfd\x66\xbe\xb7\x69\x4e\xb8\xee\x83\xe3\xb4\x5a\xbc\xef\xbf\x77\x73\x12\xb0\xa6\xbc\x30\x37\x27\x60\xe9\xf8\xad\x96\x6f\xaf\x9b\x73\xbb\xbd\x29\x6f\x37\xcf\xad\x26\x3d\x23\x86\x58\x1d\x2d\xce\xaf\x71\xe6\xcb\xa7\x2f\x8e\xf7\xa3\x5b\xe3\x06\xd8\x81\xce\x8b\xff\x05\x00\x00\xff\xff\xa0\x1c\x5b\xe3\x92\xfa\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 64146, mode: os.FileMode(0664), modTime: time.Unix(1609602607, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0x18, 0xc2, 0x54, 0xea, 0x71, 0x86, 0xce, 0x45, 0x25, 0x19, 0xd2, 0x77, 0x5d, 0x76, 0xf2, 0x9e, 0x20, 0x24, 0x1f, 0x89, 0x89, 0x66, 0x16, 0x5a, 0x8c, 0xcd, 0x8, 0xea, 0xc3, 0xfe, 0x71}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
