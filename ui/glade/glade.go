// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (79.078kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x6b\x73\xdb\x38\xb2\xf6\xf7\xf9\x15\x78\xf9\x56\xcd\xe6\xd4\x8e\x93\xd8\xc9\xec\xd9\xb3\x63\x6b\xcb\x51\xec\x64\x6a\x7c\x8b\xe5\x99\xe4\x1b\x0b\x02\x5b\x12\xc6\x20\xc0\x01\xc0\xc8\xda\x3a\x3f\xfe\x14\x2f\xb2\x75\x21\x29\x82\xa2\x78\x91\xf8\x61\xa6\x62\x49\x0d\x02\xe8\xe7\xe9\x6e\x34\x1b\xc0\xe9\xbf\x9f\x5c\x86\xbe\x83\x54\x54\xf0\x33\xeb\xf8\xf5\x5b\x0b\x01\x27\xc2\xa1\x7c\x7c\x66\xfd\xfe\x70\x79\xf4\x4f\xeb\xdf\xbd\x1f\x4e\xff\xdf\xd1\x11\xfa\x04\x1c\x24\xd6\xe0\xa0\x29\xd5\x13\x34\x66\xd8\x01\xf4\xee\xf5\xc9\xc9\xeb\x13\x74\x74\xd4\xfb\xe1\x94\x72\x0d\x72\x84\x09\xf4\x7e\x40\xe8\x54\xc2\x5f\x3e\x95\xa0\x10\xa3\xc3\x33\x6b\xac\x1f\xff\x6e\xbd\x3c\xe8\xdd\xeb\x93\xb7\xd6\x9b\xf0\x77\x62\xf8\x27\x10\x8d\x08\xc3\x4a\x9d\x59\x9f\xf4\xe3\x57\xca\x1d\x31\xb5\x10\x75\xce\x2c\x82\x19\xa3\x7c\x24\xe2\xcf\x02\x01\x84\x4e\x3d\x29\x3c\x90\x7a\x86\x38\x76\x21\xf8\x11\xb7\x47\x82\xf8\xca\xea\x5d\x62\xa6\xe0\xf4\xcd\xfc\x07\xc9\xbf\xc7\x84\x80\xa7\xb3\x45\xc8\x84\x32\x07\xe9\x99\x07\x67\x96\xa6\x9a\xc1\x10\xcb\xf8\xf1\x41\x83\x0c\x13\x98\x08\xe6\x80\x7c\x13\x0b\xbc\x09\x25\x16\xa5\x9f\x7f\xbd\x36\xc2\x4f\x92\x3a\xcf\x8d\xad\xf7\xef\x3b\x55\x74\xc8\xc0\xea\x3d\x48\x7f\xad\x67\x45\x26\x60\xbd\x4f\xc9\xfd\xba\xc2\x43\x60\x2f\x13\xaf\xe8\x98\x47\x1f\x2d\x8a\x15\xe8\x6f\xd1\x3e\x27\xc9\x4d\x30\xa3\x63\x6e\xf5\x94\xc6\x52\xe7\x15\x72\xb1\x1c\x53\x6e\x33\x18\x69\xab\x77\x62\x28\x25\xe9\x78\x62\x22\x36\x81\x27\x0f\x73\xc7\x6c\x3a\x7c\x05\xb6\x8b\xe5\xa3\xef\x99\xc9\x4d\x25\xde\x24\x81\xb5\x96\x74\xe8\x6b\x50\xcb\x5f\x2c\x7e\x15\xb7\xa6\x08\x66\x60\xa1\xef\x98\xf9\x70\x66\xbd\xb7\xde\xac\x34\xf5\x26\xb9\xad\xd3\x37\x11\x94\x96\x3e\xf3\x30\x79\xa4\x7c\x9c\xdd\xfd\x40\x23\x36\xd6\x1a\x93\x89\xd5\x7b\x9b\x77\xd0\x5a\x78\x9b\x84\x4e\xdf\xac\x3d\x7f\x89\xa2\xc8\x9c\x12\xce\x13\x21\x1d\x1d\xda\x4d\x87\x3a\x91\x7a\x5c\x19\x52\x43\xfe\x76\x50\xed\xa0\x5a\x14\xaa\x29\x33\x56\x16\x54\x07\x44\x0a\xc6\xc0\x59\x8c\xf4\x94\xef\x81\x24\x13\x20\x8f\x7d\xc1\x35\xa6\x1c\xe4\x8e\xc1\x6b\x22\x56\x08\x19\xdf\x8b\x08\xa9\x09\x76\xc4\xd4\x0e\x22\x4f\xab\x47\x79\xaa\xd8\xda\x34\x27\x4f\xf5\x1f\x14\xa6\x9e\x90\xda\x5a\xfd\x69\xc1\xf9\xdc\x30\xa7\x99\x06\x21\x71\x62\xf3\x18\x85\xc4\xde\x16\x15\xcc\xa5\xca\xc2\xea\x4c\xd7\x4d\xb2\x7e\x16\xac\xf6\x0b\x03\x92\x4c\xf7\xd6\x5a\xdb\x56\x73\x5b\x69\x6f\x2b\x0d\x6e\xa5\xc5\xc4\x27\x6f\x23\x9c\xd7\xde\xa7\xc9\x6f\x8e\xd8\x63\xb9\x04\xfb\x3f\xff\x26\x99\xfc\x89\x02\x09\x3f\xae\xd3\xb3\xbc\x2b\xea\x59\x96\x3b\xbd\xf0\xe5\xe2\x17\xd9\xc9\x04\x89\x35\xec\x57\x22\x21\xc9\x91\x06\xa3\x7c\xc0\x43\x06\x49\x7e\xb4\xcc\x54\x43\x5e\x91\x8d\x54\x35\xa6\x67\x01\x9f\x99\x27\x2c\x49\xf1\x95\xd5\x06\xcd\x39\xfd\xfa\x82\xdf\x78\x56\x78\x9a\xdb\xe8\x1c\xfd\xae\x1c\xfd\x16\xae\x61\x0d\xc3\xc0\x80\x68\x5c\x48\x2f\x5a\x62\xf2\x68\x07\x6a\xd5\xe0\xd8\x8c\xf2\xc7\xcd\x1a\xda\xc2\x5b\x94\x6f\x99\x15\x11\xf2\x00\x4c\xb3\xee\xcc\xf2\xe1\x98\x65\xdd\x99\xe4\xce\x24\xb7\xcb\x24\x7f\xa4\x98\x89\x71\x6c\x92\x41\x6b\xca\xc7\x2a\xfe\xac\x1c\xab\x1c\x98\x02\x7b\x42\xb9\xb6\x7a\x4e\xd8\xee\x2e\x6c\x32\x0a\xdf\x43\x72\xcc\x8e\xc2\x3f\xcf\xac\xef\x43\xf1\x64\xa5\x5b\xea\x0f\xe2\x29\x1a\xf2\x50\x3c\x1d\x67\x18\xe5\x5c\x6f\xd9\xd2\x00\x9f\x5b\x42\x48\x0a\x5c\x63\x4d\x05\xb7\x7a\xdf\x41\x6a\x4a\x30\xcb\x65\x6d\x3d\x4c\x28\x1f\x5b\xbd\xff\x49\x37\xb4\x6b\x53\x83\x49\xf0\x20\x1b\x4b\xc0\x56\xb6\x15\xfe\xe0\x6b\x2d\xf8\x87\x85\x99\x2c\x3e\x4b\x49\x72\x0c\xcf\x84\xaf\x6d\xa5\x67\x01\xdd\x80\x3b\xdb\x9a\xe2\xa8\xc3\x71\x88\x0c\x0a\x74\xfc\xc1\x66\xee\xb2\xc8\x68\xdb\xf7\x81\x94\x91\x95\x2a\xc1\x8a\x9b\x8a\x4a\x20\x40\xbf\x83\xb2\x1d\x18\x61\x9f\xe9\x62\x26\xd2\xe7\x0e\x48\x46\xf9\xc6\xbe\xa7\x65\x25\x92\xf3\x07\x49\x8f\x2b\x6a\xc9\x47\x94\x31\x73\x29\x4f\x28\x1a\x71\x29\x35\x5d\x91\x98\x7d\x40\x69\x79\x96\x22\xf0\x23\x4c\x28\x30\x86\x5f\x3f\x90\xea\xe0\xb7\xa2\xa9\xb6\xc2\x2f\xe5\xed\x1f\x32\x82\x5f\xf1\xcc\xdd\x46\x3f\x94\x3e\x66\x23\x91\x8d\x7c\xdb\xc1\xeb\xce\x79\xa8\x72\x0d\x4a\xe1\xf1\x9e\xbc\xf8\xdc\x1c\x39\x24\x49\xe5\x0b\x77\x6b\x81\x91\xc9\x4c\x57\x86\xa2\xb0\x12\x2b\x02\x51\x14\x73\xad\x94\x66\xd5\x8e\x1d\x29\xa6\xf6\x73\x64\x97\xfb\x45\x36\x11\xcc\x77\xf9\x8b\xe0\xcf\xe5\xac\x6b\xf7\x6d\x1d\x1b\x79\x5a\xa4\x25\xe6\x8a\xe1\x70\xa5\x77\x66\xcd\x40\x59\xbd\x41\x84\x86\xcc\xc6\xd2\xeb\xaa\x96\xbf\x9e\xbf\xf7\x81\xb0\x1a\x61\x5e\x5c\x35\x14\xcc\x59\xad\xaf\x0a\xe5\x52\x6a\xac\x50\x29\xde\x2f\xdf\x0b\x9c\x24\xc9\x1c\x35\x57\xc9\x82\x53\xea\xe8\xf4\x92\x02\xb4\xa3\xf0\x6b\x3f\x01\xbb\x54\x0d\x73\x6c\xa4\x86\x74\xac\xf7\xe3\x52\x4f\x93\xd6\x9e\xe2\x11\x64\x06\xd5\xcd\x00\x6b\x29\x81\x57\x07\xbc\x1d\x00\xef\xd6\x03\x89\xb5\x90\x7b\x0a\xbc\xce\xe2\x35\x15\x78\x57\x82\xec\x31\xee\x52\x4a\x2c\xd0\x8e\x70\x77\xc1\xb5\x9c\x2d\xc5\xd0\x73\x87\x12\x7d\xb3\xb9\xf3\xc1\xff\x43\x68\x2c\x0a\x37\x3d\xf1\xa1\x85\x60\x9a\x7a\xb6\x86\x27\x9d\x08\xb2\x87\x09\xa0\x78\x4c\x7f\x53\x88\x14\x18\xd6\x42\xb6\x3b\xfd\x31\x45\xe6\x8b\x72\xcf\xd7\x61\x1e\x5e\x59\xbd\x4f\x0f\xbf\xd9\xbf\xde\xdc\xfd\xfe\x60\x7f\xfe\xf5\xe6\xc1\xfe\xfd\xee\xee\xe2\xbe\x7f\x3e\xb8\xb0\xfb\x9f\xcf\xef\x07\xe8\x7f\xd1\xca\x0f\x6e\x6e\x6f\x2e\x2a\x23\x41\x86\xf3\x6e\x94\xd7\x5f\x27\xc1\xdc\xb9\x15\x22\x41\x11\xcf\xd8\x58\x12\x88\x78\x30\xbb\x64\xc1\x7c\xc2\x50\x47\x87\x26\xc4\x22\xeb\x74\x88\x5d\x6e\x21\x36\x14\x70\xd7\x8d\x25\xc3\x8b\x47\x70\x31\x75\x80\x4f\x00\x3b\x88\x99\x0f\x30\x17\x2b\x36\x4e\x5c\x53\xe0\x59\x71\xc8\xb2\x9f\xa1\x72\xc6\x0a\x5f\x70\x0d\x2a\xbb\xb1\xc3\xcd\x66\xbd\xef\xb2\x59\x7b\xb4\xb6\xbb\xc1\xae\x51\xef\x5b\xb4\xb0\x4b\xcd\xe2\xef\xdc\x89\x93\xc8\x80\x04\x73\x6b\xe6\xc1\x17\x04\xf7\xc2\x7d\xc7\xe3\xf9\x9b\x0a\x85\xcc\x8a\xc9\x88\xe0\x0e\x96\x33\x9b\x12\xc1\xed\x1d\x3f\x2d\xdf\xd2\x71\x93\x5b\x68\x4a\x78\x50\x31\xf0\xfb\x13\x20\xcb\xf5\x1b\xd1\x44\x5d\x70\x0d\xf2\x61\x02\x54\xde\xf8\xee\x10\xa4\x61\x45\x47\x92\x0a\xc2\x26\x51\xd8\x26\x8a\x1a\x35\x99\xa3\x25\x8e\xad\xf6\xae\xe9\x7c\x5b\xaf\x1c\x31\xf6\x3c\x1b\x49\x14\x6a\x12\xe9\x09\x55\x88\x8e\xd0\x4c\xf8\x68\x4a\x19\x43\xf1\xa3\x11\x46\x0a\x24\xc5\x0c\xf1\x70\xc6\xd0\x48\x0a\x17\xe9\x70\xc9\x1a\xbe\x81\x7e\x0e\xd7\x2b\x71\x87\x8e\xc4\x53\x9b\x72\x87\x86\x41\xfb\xee\x2b\x61\xca\xe1\xe6\x3f\x9a\xc6\xcd\x6f\x64\x82\xf9\xd8\xb4\xdc\x6a\x13\x39\xe3\x56\x4b\x60\x67\x81\x96\x0e\x95\x9e\x1c\xc1\x53\x34\x5b\x1d\x35\x0b\x50\xf3\xbf\x9b\x41\xcd\xfb\xe8\x20\xa8\x92\xc9\xb9\x44\x4b\x44\x15\x8a\x1f\x93\x5a\x37\x9c\xd4\xfc\x12\x45\x13\xfa\xd9\x91\x74\x95\xa4\x01\x05\x37\x93\x32\xd0\x87\x8b\xb9\x13\xb0\x65\xd6\x31\x34\x95\xa1\xff\x6c\x06\x43\xcf\x19\x13\xd3\x6b\x9f\x69\xfa\x01\x73\xa7\x04\x72\x86\x6d\x1d\x05\x8d\x15\x66\xe3\x72\x9f\x3a\x22\x26\x79\x4b\x17\xcf\xd0\x54\xc8\xc7\x90\x83\x0a\xbb\x2f\xfc\x13\x1c\xb9\xc1\xdc\x79\x0c\xd0\x10\x73\x47\x75\x24\x4c\x25\x61\xe2\x7e\x99\x79\x17\xeb\x20\xe1\xb5\x70\xca\xf0\x90\x11\x09\x83\xc6\x4a\x20\xa1\x69\x33\x1d\x09\x39\xa2\x0b\x24\x74\x85\x03\x1d\x09\xd3\x49\x98\x95\xfe\xad\x92\x85\x7d\xe1\x73\x7d\x07\xb2\x24\x47\x18\x36\x87\x42\x06\x29\xe4\x81\x44\x5b\xf9\xc4\xc5\xce\x75\x64\x4c\x0a\x4d\x63\xbe\x51\x90\x0a\x91\x70\xee\x47\x42\x22\xc0\x64\x12\xba\x41\xa4\xc0\xc3\x12\x6b\x60\x5d\x54\x9a\xc1\xc5\x8a\xc3\xd2\xfd\x7c\xbb\x95\x6e\x14\xee\x04\xe5\x5a\x85\xc8\x1c\x04\xfe\x22\xa4\xb5\xd9\x3a\xa9\x45\x6f\xad\x8e\xbb\x02\xec\x8a\xd1\xc4\x35\xe5\xc0\x8d\x9a\x6f\x13\x9e\xba\x77\xef\x95\xe1\xc9\x03\x42\x47\x94\xc4\x16\x8a\x9a\x45\xb0\x6d\xc2\x54\x57\x80\xb4\x53\x4c\xad\x03\x09\xdd\x49\x18\xd1\xa7\xfd\x45\x54\x46\x55\x51\x87\xa8\x52\xad\xd4\xad\x9e\x80\x0c\xdd\x1e\x26\x7a\x6f\xf1\x54\x71\x0d\xc4\x7e\xe2\xa9\xf0\xc1\x55\x1b\xb2\x6c\xd1\x8a\x73\x5f\xa1\x57\xf1\x2b\xfe\xfd\x84\x5e\x3a\x82\xe2\x77\x8d\x47\x21\x92\xd0\xc5\x93\x27\x41\x29\xc3\x37\xdb\x6d\x82\x53\xc5\xaf\xa5\xd7\xcb\x18\x83\x65\x52\xbc\xe6\x8e\xdc\x48\xa1\x9a\xc6\xb5\x56\x9a\x9e\x91\xcb\x55\x72\xe8\xbd\xf8\x55\x12\x7b\xd4\xe8\xba\xa7\x38\xa9\xad\x5e\x5e\xfa\x86\xb9\xee\x8f\xdf\xfa\x7d\x04\x5c\x53\x6d\x94\xbf\x88\xb6\xdc\x78\xbe\xf4\x84\x02\xab\xe7\xd0\x31\xcd\x9a\xc0\xc6\x64\xc6\xea\xdb\x56\xb6\x84\xba\x78\x85\xbf\x35\x7a\x97\xda\x39\x48\xfc\x92\x22\xd9\x92\xb6\xa2\xb7\xbe\x5d\x60\x73\xd4\xc5\xeb\xc0\x12\xac\x6f\x52\x4b\x87\x84\x60\x35\x5f\x52\x93\xe7\x25\xf5\x2b\x05\x80\x38\x3c\x69\x24\xbc\xe0\x97\xff\x75\x08\x98\xae\x6f\xb7\x7b\x0a\x12\xe3\xbc\x46\x29\xa8\x2e\x90\x23\x69\x24\xae\xcf\x11\x11\xae\x8b\x8f\xe6\xaf\xdf\x1c\xc4\xa8\xd2\x48\x8c\x90\x27\xa9\x8b\xe5\x2c\x8a\x23\xbc\x02\xe3\xcd\xb5\xd3\xe1\xe3\xd5\x4f\x97\x3f\x7d\x32\xa7\xc3\x5e\xef\x09\xae\x3a\x45\xb5\x4e\x9d\x30\x73\xb3\x85\x13\x58\x90\x6f\x3d\x45\xf2\x99\x7e\x3d\xc1\x1a\x39\x02\x71\xa1\x91\x8b\x35\x99\x20\xcc\x67\x01\x8f\xc2\x2a\xcc\x30\x11\x46\xb0\x86\xb1\x88\x1d\x42\x14\xe2\x84\xc6\xe4\xa7\x95\x80\xe7\xa7\x55\x17\x32\x3b\x08\x7f\x51\xfb\x26\xba\x78\xb9\x1f\xae\xf6\xef\xb0\xd6\x20\x0d\x0f\x4a\x49\x6f\xa7\xf5\x24\x38\x47\x12\xc6\x3e\xc3\x12\xc1\x73\x1a\x24\xc2\x7c\x8c\x55\x50\x68\xe4\xcb\x10\xe7\xd3\x09\x25\x93\x97\x5a\xe4\x70\x23\xf2\xbc\xe8\x03\xab\xc5\x4a\x90\x16\xa0\xb2\xe2\x9c\xc8\xfa\x31\xde\xbb\x82\x88\x71\x82\x2d\xf7\xf9\xe7\xd9\x63\x4e\x1e\x77\x5a\xd5\x57\x48\xa2\x20\x04\x49\x2d\xf9\x4a\xea\x6a\x7a\x4a\x2f\x8c\x66\x2e\x36\x66\x45\x92\x1a\x5d\xe2\xf8\x73\xbf\x4c\x5b\x29\xeb\x56\xb8\x22\xe2\x05\x2a\xbf\x92\x9a\x29\x50\xfd\xb5\x90\x8c\x42\x54\x21\xbc\x60\x04\x4c\x9f\xbe\xd5\xcd\x76\x66\x65\x5f\x28\xc3\x10\xa1\x4c\x63\x94\xf4\xec\x5c\x27\xf4\xa6\x09\xe7\x3b\xe4\x3a\x49\x32\xd7\x39\xeb\x28\xdd\x9c\xa1\x34\x93\x86\xca\xa4\xf8\xd7\xbb\x6f\x25\x31\xfc\xeb\xdd\xb7\xf8\x15\xf6\xf6\x04\xff\x7a\xf7\xad\xe3\x77\x1e\x7e\x47\xeb\x43\x84\x09\x11\xd2\xa1\x7c\x8c\xb4\x08\x3f\xef\x7f\x41\x81\x3e\xa4\xcf\x40\x75\xc4\xaf\x8b\xf8\x99\xd1\x4f\xcd\xc4\xdf\xb4\xef\x30\x69\x64\x39\xf7\x1e\x6e\xcf\xff\x82\x0d\x1d\xa6\x0d\xc8\xb7\xf9\xb0\xb3\x00\x75\x58\x80\x8c\xf7\x0b\xa8\x90\x05\x68\xcc\xfa\x6c\xb7\x25\x10\xeb\xd7\x5a\x75\xad\xd4\xd4\x4a\x8b\xae\xc6\x48\x41\xf3\xce\xae\x52\x3e\x77\xfe\xf4\x95\x76\x81\xeb\xf8\x64\x47\x0f\xc0\x59\xf8\x30\x6e\x6e\x95\x80\x62\x0a\x32\xe1\x08\x9f\xd5\xdf\xf9\x9e\x17\xfc\xee\x1f\x6b\xcb\x87\x84\x1a\x2e\x1f\xac\xde\xc9\x5a\xf6\x7a\xf5\x87\x4a\x83\x67\x53\x4e\x24\x44\xdd\x5b\x9b\xaf\xb5\xa9\xc5\x63\x58\x12\x58\xe9\xcb\x86\xe9\xf1\x3c\x16\x58\x7d\x2a\xf8\xe2\x9d\x9f\x2e\xa6\xbc\xd4\x9b\x4d\x33\xef\x50\x5c\x33\x62\x54\x33\x48\xf4\xac\x9f\x81\x31\x81\x52\x8e\x80\xda\xed\xd5\xa8\xcf\x17\xee\x49\x21\xf4\x72\x2a\xca\x38\xc6\x29\x92\x7a\x2a\x9c\x72\xca\x73\xa3\xcc\x35\x70\xff\x03\x96\x2f\xca\x0f\x3e\x68\xc3\xd5\xa5\x41\x3f\x7f\xd5\xe0\xc6\x3d\x07\xee\x5f\xd2\xa0\x4f\xcd\x4c\x13\xa6\x07\xe7\x76\xd0\x6d\x93\xa6\x8c\x2e\x20\x5b\xe1\x86\xf2\x87\xee\xba\x7e\xb3\xa6\x38\xb6\x9d\x91\x5c\xca\x0c\x6f\x35\xcb\xdb\xce\x34\xca\x5c\x77\xa5\x0f\x6c\x1d\x3b\x37\x30\x4d\x19\xdc\xd6\x03\x2c\x63\x90\x49\x6d\xcc\xef\xde\xbb\x81\xe9\xeb\xd7\xaf\x8b\xb4\x60\x88\xa6\xb8\x91\x8c\x35\x40\xc6\xf2\x18\x95\xa6\xaa\x5b\x0f\xd2\x96\xc5\x49\x83\x6c\x94\xae\x82\xbe\x1f\x94\xb2\x06\xf8\x3b\x9c\xab\xb6\xaa\x2b\xe8\x3d\x3a\x57\x7b\xaa\xb1\x41\x54\xe1\x22\xe4\xb2\xea\xd4\xfc\xe3\x40\x7f\xc7\xcd\x56\x5d\xed\xf8\xbe\x78\xf2\x84\xd4\x7d\x3c\x94\x94\x31\xd1\xec\xc9\x32\x89\x4c\xa2\x71\x21\x7b\x3e\xb2\x3d\xa5\x40\x96\x52\xcf\x3f\xfe\x7a\xb9\x7f\x0a\x0d\x46\x75\x80\xca\xec\x0f\xfe\xd8\x3b\x5d\xf6\x07\xf6\x1f\x7b\xaa\xca\x3c\xae\xe9\xa4\xd9\x0a\xad\x1d\xf8\x83\xf8\xaa\xe1\x66\x4f\x93\xd1\x72\x79\x3e\xa4\x2a\x51\x8f\xd0\x29\x26\x04\x58\x7c\x69\xcf\x23\xcc\xce\x2c\x0f\x24\x15\x8e\x85\x14\x1d\x73\xcc\xce\x2c\x4c\x34\xfd\x8e\x35\x58\xc8\x15\x0e\x1d\x51\x90\x81\x62\x3e\xfe\x66\xf7\x6f\x6f\x1e\xee\x6f\xaf\xec\xeb\xf3\xc1\x6f\x49\x77\x4e\xc4\x0f\x68\x16\xb1\xde\x35\x1b\x31\xb5\x13\xeb\x8b\x4f\x75\xb3\xa7\xc8\x88\x54\xc1\x70\x6a\x65\xd3\x5f\xf5\x13\x29\x5d\xd0\xe8\x6d\xdf\x56\x85\x8e\xeb\x60\xbb\x70\x12\x81\xd6\xf4\xa4\x66\xd0\xed\x06\x27\x35\xf7\x32\x87\x19\xcc\x79\x9f\x01\x8e\x6e\x2d\xbb\xa4\xc0\x9c\xd6\x39\xfe\xcd\x15\x16\xc1\x00\xa3\xca\x8a\x60\x94\x68\x14\x0e\xb3\x64\x73\x18\x3d\x24\x9c\x46\x74\x59\xf8\x01\xa5\x19\x47\x52\xbf\x71\x2c\x0b\x9f\x9f\x84\x16\x2d\x86\x67\x3a\x66\x82\x81\x21\xbb\x31\x90\x81\xfd\x81\x4c\xf0\xdf\x15\x56\xfa\xcb\xe0\xb6\x6d\x70\xd9\x68\xcd\x82\xb1\x85\xc6\x8c\x61\xa5\xd1\x97\xc1\x6d\xc9\x49\x82\xa0\x79\xfb\x6a\x8b\xb6\x4b\x03\x24\xdb\x1f\x40\x5e\x89\x71\x0b\xb1\x98\xe1\xee\xae\xc4\xb8\x52\x7c\xd4\xba\xd6\x6d\xb4\xda\x2a\x9c\x99\x7b\xec\x50\x91\x0c\xf0\xc1\x5d\xb3\x67\xc9\x30\x5f\x84\x25\x99\xa0\x1f\xb1\xeb\xfd\x82\xee\x84\xcf\x49\xa1\x27\x14\x35\x84\x2b\xcd\x84\xb6\x6f\x0b\xf9\xb0\x5e\x17\x2b\x5b\x06\xda\xdb\xc6\x1e\xab\x36\xda\xe3\x0c\xcc\xde\xfb\x2d\x2d\x08\x48\x04\xed\xbd\x9f\xb9\x39\x36\xad\xc5\x92\x40\x5a\x14\x64\x2b\xcd\x8c\xa5\xf0\x3d\xab\xf7\x62\x55\x8a\x21\x55\xd6\x8f\xd4\x66\xa6\x86\x96\xca\x34\x97\x84\x1b\x9e\x1c\x8a\x3a\xde\xe0\xf4\xd0\x62\xcd\x5b\xea\x2c\x6f\x35\xd3\xdb\xce\x36\x2a\x25\x9a\x8d\xc6\xd6\xc7\x8c\x51\x3e\xda\xa3\xca\x85\x60\x44\x76\x30\xa4\x7d\x0c\x69\xd3\xd4\x38\x20\x42\xa6\x55\x67\x26\x8d\xb3\xe1\x3a\xb4\xc3\xf1\x1c\x92\x02\xef\x03\xcf\xb6\x37\xfa\xfb\x32\xb8\x45\x76\x30\xa4\xe6\xab\xb0\x99\xee\xfd\x33\x30\xaf\x85\xce\x3d\xe8\x76\x4b\x5c\x7b\xca\x0c\x6f\x35\xcb\xdb\xce\x34\x2a\xc5\xa0\x04\x23\x3b\x1f\x0a\xbf\xa5\xef\xa8\x7b\x76\xd8\xf9\x43\xb6\x1c\x2d\xda\xd8\x97\x72\x82\xc6\xe6\x8d\x7d\xf9\x76\x28\x0d\x88\x14\x8c\x81\xb3\xb8\x4b\x8d\x89\xf1\x1f\x14\xa6\xe1\x21\xfa\x94\x83\xdc\xb0\x61\x69\x4a\x1d\x3d\xb1\x25\xfc\xe5\x83\xd2\x56\xef\xe7\x9f\x53\x4f\xd5\x2a\x7b\xab\x93\x89\x98\x9a\x60\x47\x4c\xed\xc0\xb4\x59\x3d\x9a\x9a\x00\xc8\xeb\x51\x1e\x24\x40\x30\x49\x4b\x33\x96\xc3\xa1\x4c\x80\x8e\x27\xfa\x65\xb6\x8e\xdf\x1a\x9d\x9d\x5d\xcf\x31\xe7\x59\x9b\x0c\x33\x7b\x5b\x54\x70\xa2\x42\x58\xda\x9e\x60\x94\xcc\xac\x1e\xc7\xda\x97\x1b\x4e\x7e\x5a\x7d\xf6\xf6\x4d\x4c\x00\x3b\x20\x95\x4d\x18\x25\x8f\x38\x9c\x76\xe3\xb9\x03\x1e\x08\xda\x2a\xcc\x93\x16\x90\x57\x13\x31\xb5\xa3\x69\x04\x59\x44\x79\x71\x07\xc6\x92\x3a\x76\x60\xb5\x55\xce\x83\xb4\x92\x9b\xd1\x12\x60\xde\x4c\xce\x60\x82\x72\x0d\x92\x63\x76\x14\xfe\x79\x66\x29\x60\x40\x22\xdb\x96\x2b\xb0\x08\x98\x36\x78\x96\x99\xd3\xed\xe5\x93\x84\x84\x54\xfd\xee\xc1\xc4\x32\xd5\xb2\xed\x3b\x9f\x77\xf8\x24\xa9\x13\x4d\x79\x58\x0f\x12\xfe\xb9\x5b\x93\x6e\xe4\x57\x5d\x2c\xc7\x94\xdb\x0c\x46\xda\xea\xa5\x1e\x60\x9a\x22\x25\x03\x43\x6c\x2e\xa6\x85\x97\xb0\x81\x7d\x83\xd0\x50\x68\x2d\x5c\x03\x39\x29\xa6\xb6\xf2\x30\xa1\x7c\x6c\x20\x45\x04\xf3\x5d\x9e\x47\xd0\xe8\xf6\x8d\x88\x73\xc1\x3f\x93\x2a\xc2\x1b\xe1\xa2\x36\x1c\xcf\xf3\x2f\x93\xb6\xa2\x78\x86\x4c\x70\x60\x6f\x33\xce\xfa\x58\x97\x6c\xd1\xc5\x1b\x35\x9e\xfe\x8e\x19\x53\x74\x6c\x7a\xce\xe9\xa2\x54\xd5\x11\xd3\x2e\xce\xf7\xa5\x12\xf5\xe3\x31\x99\x34\x9d\xeb\x84\xeb\xa0\x61\x93\x46\x0f\xe0\x7c\xeb\xfa\xf0\xae\x03\x5d\xdf\x83\x27\xa4\x36\x83\xfc\xaa\xe0\x9e\xa0\x3e\x1a\x91\x49\xc3\x2e\x7e\xb2\x19\xf0\xb1\x9e\x58\xbd\x8c\x13\xfe\x37\x58\x72\x23\xc9\xe0\x91\xc5\xa5\x73\x91\xf4\x7e\xf0\x60\xce\xd1\xba\x8e\xd8\xce\x3c\xcc\xab\xc1\xbc\xbb\xf1\xdd\x21\xc8\x02\xbc\x5b\x10\xdc\x13\xde\x45\x23\x2a\x4c\x9f\x8c\xa3\xd2\x0b\x12\xe0\xff\xb7\x07\xfe\x46\xec\x6f\x06\xfc\xdd\x59\x11\x9f\xb3\x24\xd5\x7a\xe0\x5f\xcf\x62\x6f\x83\x5e\xf5\xb5\x64\x47\xd2\xe8\x52\x83\xce\xed\x98\xf3\x6e\x43\x89\xd1\x58\xe2\xe1\x51\xa4\xed\xd5\x22\xa3\xeb\xdb\x8f\xc7\x29\x15\x46\x4d\xf1\x65\xf5\xdd\xf7\xe6\xce\x8a\x38\xb2\x25\xa9\x4a\xc8\xac\x80\x2b\x1a\xd5\x60\x1a\x2f\xe1\xb7\x59\xfe\xe7\xb1\x04\x9d\xff\xab\xc1\xff\x55\x4c\x99\xd5\x7c\x55\xd2\xe1\x3a\x0d\xcf\x57\x5d\xcf\x8c\x92\x55\xc0\x18\xf5\x14\xfd\x0f\x14\xb8\x85\xf6\x20\x12\x5d\xf5\x21\xd0\x05\xa5\xf0\x18\x1a\x7d\x83\x71\x06\x0e\xa3\xde\xef\x29\x2a\xcc\xe3\x39\xab\x57\xf1\xb5\x3c\x7d\xe1\x0e\xc5\x07\xf1\xf4\x10\xfa\x8f\x00\x50\x43\xcc\x9d\xf0\xd3\xdc\x11\xc0\xb3\x44\xe3\xdf\x31\x6f\xf4\xe0\x1f\x30\x77\xa2\x30\xfe\xef\xc3\xec\x30\x7e\x2d\x00\x1d\xbe\x04\xa0\x9e\xf0\x7c\xcf\xb0\xc0\xbd\x29\xe1\x67\x26\xad\xaa\xc0\x9f\x2b\x1c\x30\xc3\xdf\xb3\x44\xfb\xf1\x77\x2d\x1c\x88\x97\x91\xae\x21\xfe\xdc\x46\xe1\xaf\x70\x2c\x57\x31\xfe\x96\x96\x3f\xf1\xad\x18\xa6\xeb\x9f\x45\xb1\x7d\xc8\x66\x5c\x3c\x6d\xbe\x1d\xa4\xbc\x28\x2f\xd7\x2a\xe6\x5b\x7f\x32\x6e\xc8\xbb\xa6\x24\xee\x3d\x35\x2c\xf9\x90\x71\xcd\x6a\xa3\xe2\xd8\xd5\x44\x7a\x21\x02\xae\x49\xb6\x9e\x83\x51\x2a\xbd\xa3\x61\x85\xaf\x7c\x0b\x33\xa6\xe2\xdc\xfb\xd2\x6d\x53\x0c\xb0\x4c\xbd\x5f\x2a\xff\x22\x2c\x3c\x2a\xa7\xf1\xb1\xd3\xfa\xfd\x4f\xa5\xf3\xce\xf4\x60\xa2\x92\x31\x68\x94\xfc\xab\xd1\x6a\x2f\x62\x90\x89\x71\x09\x08\xbc\x12\x46\x66\x65\x5f\xf1\x77\x25\xc6\x21\xfa\xbe\x0c\x6e\xd1\xab\x1f\x99\xfe\xe5\x82\x6b\x90\x3f\x8e\xf5\x2f\x19\x6b\x81\xa6\x80\xb0\x62\x43\xb8\x90\x02\xf3\x35\x69\x69\xfa\xeb\xed\xdb\x7f\x99\x55\xe6\x97\x96\x88\x35\xf2\x77\x2d\x4a\xb9\x55\xbc\x7c\x5c\x4c\xc4\xce\xfa\x98\xb1\x96\x02\xf1\xe3\xd5\xdb\xf3\x0f\x99\x57\x3e\x97\x89\xc4\xea\xf1\x54\xfc\x1a\xbe\xda\xf0\x34\x0a\x77\xef\x70\x32\x6b\x34\xa4\xe6\x37\x57\x02\x77\xca\x41\xe2\x11\x7a\xfc\xfc\x1f\x93\xa6\xfe\xf4\x95\xa6\xa3\x99\xd5\x0b\x4b\xed\x0b\x42\x38\xb3\xfb\x4d\xc1\xe2\x6e\x6d\x5b\x6b\xef\x4f\x6c\x52\x2b\x2d\xda\xf2\x99\x12\xaf\x95\xbf\xa9\x67\x2a\xe4\xa3\x2b\x1c\xe8\xf6\xf5\x54\xb5\xaf\x67\x97\x3b\x74\xe6\xda\x6c\xb4\x57\xca\xb8\x44\x3f\xee\xbe\x51\xf9\x43\x17\xff\xc6\x9f\x26\x9f\xe6\xb6\x98\x0f\x88\xb6\xa0\x46\x67\xf4\x5d\x0b\x27\xfd\xfa\xf3\xfc\x2a\x33\x3c\xfd\xaf\x09\x19\xde\x02\x77\x95\xaf\x36\x91\xf7\x94\xc1\x55\x39\xb3\xdb\xc0\x0f\x23\xb4\xd9\x0c\x5b\xe9\xf3\x92\xd0\xba\xe1\xd8\xbf\x0e\x9d\x46\x77\xd5\xaf\xca\xc7\xe7\x11\x26\x5b\x99\xca\x60\x5e\x6f\x71\x45\x8b\x62\xcc\x94\x2a\x80\xf2\x63\xcc\x47\x98\x81\xec\x02\xcc\x5a\x36\x8e\xa7\xb2\xa1\x78\x58\x9a\xf0\xb8\x89\x70\xc5\x18\x38\x88\x8d\x47\xb2\x14\x78\x8b\x31\x3a\x2e\xc1\xf2\x5f\x1a\x79\xbf\x7d\x7d\x87\x31\x00\xee\xa0\x6b\x2c\x89\x14\xe8\xd5\xe5\xb1\x61\x11\xd3\xe5\xf1\x4b\x25\x45\x78\x20\x0a\x38\x3b\x2f\x96\x68\x4b\xac\xbd\x04\xd8\x93\x32\x00\x6b\xe4\xc7\x0e\x03\xb0\x27\xa6\x80\x3d\x69\x11\x60\x6b\x7c\x4f\x3c\x7a\x57\x06\x60\x8d\xaa\x0a\x0f\x03\xb0\xef\x4c\x01\xfb\xae\x45\x80\xad\xb1\xb8\x66\xf4\xbe\x0c\xc0\x1a\xbd\x66\x3d\x0c\xc0\xfe\x6c\x0a\xd8\xf7\x2d\x02\x6c\x86\x81\xda\x71\xfd\xe4\xe8\x38\x6f\xd5\x64\x1d\x29\x87\x9c\x87\xfb\xb5\x20\x1d\x95\x52\x57\x91\x59\x51\xb1\x6b\xd5\x9f\x74\xaa\xaf\xe2\x85\x7f\x13\x55\xff\xae\x53\x7d\x15\xa7\x37\x35\x51\xf5\xef\x3b\xd5\x97\xa6\xfa\x22\x3b\x35\x2b\x56\xfd\xd2\x5b\x36\x2d\xbc\x12\xc2\xd3\x8b\x81\x51\xc9\x17\x0f\xb7\x5b\xbc\x3c\xbb\x7d\xef\x39\xca\x0f\x6d\xb5\xf0\xc2\x92\xdd\xfe\xd7\xe8\x6b\x97\x2a\x45\x05\x47\xaf\x2e\x06\x7d\xc3\x40\xf7\x42\x11\xec\x41\x8b\x82\xdd\x8a\x09\xd0\xe8\x8a\x83\x79\x1d\x9c\x71\x2d\xe4\x24\xd7\x4b\x99\x44\x25\xa6\xf2\x7a\xea\xb9\x95\x99\xdc\xc2\x1b\x67\x3a\xf4\x6c\x5d\x45\x59\xf8\xc8\xf4\x8c\x62\x0b\x0f\xc0\x31\x2a\x8e\xc9\x5b\x7f\xd9\x94\x77\xb0\x15\xe3\x6e\xe0\x51\xbe\xe4\xba\x83\x09\x6e\x72\xe4\xb6\x79\x97\xd4\x57\x14\xa2\x24\xde\xa7\xae\x8c\x8e\x3b\x9b\x23\x9d\x00\xd7\x66\xe7\x24\x15\x37\x94\x8b\x47\xac\x99\xc7\xf8\xf3\x1d\x13\x46\x92\x6b\x47\xac\x19\x49\x9b\x1f\x87\xb6\xd2\x00\x76\x02\x56\xba\xc0\xb5\xd5\x0b\x01\x77\xfe\xfc\x81\x51\xc0\xe7\xbb\x20\x29\xc9\x81\xa1\xac\xbb\x49\x1b\xb1\x23\xba\xf0\x79\x04\x9d\x9b\x2a\x21\xc8\x59\xaa\x84\x30\xa2\xc2\x2e\x5c\x5c\x10\xb3\x3f\x7c\x6b\x76\x01\x68\xe1\x95\x6c\x29\x78\x6d\x51\x89\x51\xca\x78\xcb\x2f\x31\x52\x1a\x6b\x5f\x75\x35\x46\x75\x15\xb1\x1f\x97\x59\xc5\x3e\xc1\x2e\xa3\xc3\x41\xa8\xd2\x46\x9b\xdc\x74\x33\xf6\x39\x1c\x42\x65\x06\xa9\x2d\x55\x32\x0b\x4a\x26\xd3\x56\x2b\xb8\xff\xb5\xf9\xde\xa6\x3e\xe5\x3a\x4f\x84\xb4\x5a\xbd\x1f\xbf\xf5\x33\xb2\xaf\x4d\x59\x2d\xd7\xa7\x60\x45\xbc\x56\xeb\x77\xd0\xcf\xb8\x2c\xbf\x29\xab\x9b\x43\x2b\x48\x4f\x89\x21\x36\x47\x8b\xcb\x63\x5c\xf8\xf2\xe5\x8b\xd3\x37\xe1\x25\x74\x23\x4c\xa0\xf7\xc3\xff\x05\x00\x00\xff\xff\xc1\xdd\x1b\x7d\xe6\x34\x01\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 79078, mode: os.FileMode(0664), modTime: time.Unix(1609657792, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0x74, 0x49, 0x5b, 0xe1, 0x6b, 0x96, 0xf5, 0x75, 0xce, 0xbd, 0x1b, 0x20, 0x97, 0xf8, 0xbc, 0x7a, 0xd2, 0xc4, 0x3f, 0x7a, 0xa7, 0xdd, 0x9a, 0xef, 0xd0, 0xd4, 0xf0, 0xb0, 0x4a, 0x97, 0x1c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
