// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (40.59kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x6f\xdb\x38\x12\x7f\xef\x5f\xa1\xd3\x01\x45\x0f\x8b\x24\x4d\xd2\xee\x1d\xb6\x89\x16\xa9\xb7\xe9\x16\xdb\xb4\xd7\x38\xdb\xf6\x4d\xa0\xa9\x89\xc4\x9a\x22\x55\x92\x8a\x93\xfb\xeb\x0f\x92\xec\xf8\x43\x1f\x16\x25\xd9\x92\x1c\xbf\x14\xa8\xa4\xa1\xc9\x99\xdf\x7c\x70\x38\xc3\x9c\xfd\x7e\xef\x53\xe3\x0e\x84\x24\x9c\x9d\x9b\xc7\x87\x2f\x4d\x03\x18\xe6\x0e\x61\xee\xb9\xf9\xf7\xcd\xe5\xc1\x7f\xcc\xdf\xad\x67\x67\xff\x38\x38\x30\xde\x03\x03\x81\x14\x38\xc6\x84\x28\xcf\x70\x29\x72\xc0\x38\x3d\x3c\x39\x39\x3c\x31\x0e\x0e\xac\x67\x67\x84\x29\x10\xb7\x08\x83\xf5\xcc\x30\xce\x04\xfc\x0c\x89\x00\x69\x50\x32\x3a\x37\x5d\x35\xfe\xc5\x9c\xff\xd0\xe9\xe1\xc9\x4b\xf3\x28\xfe\x8e\x8f\x7e\x00\x56\x06\xa6\x48\xca\x73\xf3\xbd\x1a\x7f\x23\xcc\xe1\x13\xd3\x20\xce\xb9\x89\x11\xa5\x84\xdd\xf2\xe9\xb3\x88\xc0\x30\xce\x02\xc1\x03\x10\xea\xc1\x60\xc8\x87\xe8\x23\x66\xdf\x72\x1c\x4a\xd3\xba\x44\x54\xc2\xd9\xd1\xec\x83\xec\xef\x11\xc6\x10\xa8\x62\x12\xec\x11\xea\x18\xea\x21\x80\x73\x53\x11\x45\x61\x84\xc4\xf4\xe7\xa3\x01\x29\xc2\xe0\x71\xea\x80\x38\x9a\x12\x1c\xc5\x14\x8b\xd4\x8f\x5f\xa7\x56\xf8\x5e\x10\xe7\x71\xb0\xf4\xfc\xee\x88\x24\x23\x0a\xa6\x75\x23\xc2\xd4\xcc\xaa\x30\x20\x3d\xa7\xec\x79\x7d\x44\x23\xa0\x73\xc6\x4b\xe2\xb2\xe4\xd1\x22\x59\x85\xf9\x56\x9d\x73\x16\x9d\x87\x28\x71\x99\x69\x49\x85\x84\x2a\x4b\xe4\x23\xe1\x12\x66\x53\xb8\x55\xa6\x75\xa2\x49\x25\x88\xeb\xe9\x90\x79\x70\x1f\x20\xe6\xe8\xb1\x23\x94\x60\xfb\x48\x8c\xc3\x60\x0d\x1d\x52\x4a\x90\x51\xa8\x40\x2e\xbf\x58\x7c\x35\x1d\x53\x62\x44\xc1\x34\xee\x10\x0d\xe1\xdc\x7c\x65\x1e\xad\x0c\x75\x94\x3d\xd6\xd9\x51\x02\x8c\xa5\x67\x01\xc2\x63\xc2\xdc\xe2\x45\x44\xfc\xb5\x91\x52\x08\x7b\xa6\xf5\xb2\xec\xd2\x15\x0f\xf4\x89\x26\xc4\x51\x9e\x69\xbd\xca\xfe\xfe\xec\x28\x35\xdf\x25\x05\x35\xf4\x15\xc2\xb9\xc7\x78\xaf\x0c\xdb\x51\x86\x89\x40\x85\x6a\xd0\x26\x42\x8f\x3b\x8b\x50\xcc\x99\x22\x0c\x98\x6a\x19\xa6\x6d\x4a\x27\x07\x97\x1b\xe0\x36\x51\x61\xe7\xcc\x01\x4d\xa6\xa7\x04\x62\x92\x22\x85\x46\x14\xce\xcd\x07\x90\xa6\xf5\xe1\xe6\xef\xdf\x8c\x83\x8d\xca\xab\xb4\x62\xb4\x23\x2f\xfc\xb3\x47\xe2\x1a\x7c\xd9\xb4\xb4\x4a\x1b\xf0\x76\xa4\x85\x84\xa0\x3d\x92\xd7\xc5\xf5\xf5\xc7\x4d\x4b\xec\xb4\x83\x12\x1b\x62\xc1\x29\x05\x67\x71\xcb\x26\xc3\x00\x04\xf6\x00\x8f\x07\x9c\x29\x44\x18\x88\x0d\x0b\x51\x87\xac\x52\x3c\x72\x57\x85\x48\x7a\xc8\xe1\x13\x3b\xda\x42\x9a\x16\x61\xb9\x64\x29\x36\x67\xb3\xfa\x2b\x81\x49\xc0\x85\x32\x57\x3f\xad\xc8\xcf\x35\x3c\x2d\x54\x8c\x4c\xc6\x96\x09\x45\x33\x67\x5b\x95\xb0\x94\x28\x2b\x8b\x33\x5f\x36\xd9\xf2\x59\x30\x5e\x73\x0d\xc8\x32\x61\xb5\xa5\x56\x57\x72\xb5\xa4\x57\x4b\x82\xb5\xa4\x98\xf9\xcb\x75\x88\xcb\x6e\xb9\xf3\xe8\xd7\xed\x52\x1e\xe9\x32\xec\xff\xec\x4d\xb6\xf2\x67\x12\x64\x7c\xdc\x66\xa4\x5d\xda\x1d\xd5\xdd\x07\x2d\x2f\x72\xe1\xe5\xe2\x8b\xe2\x2c\xa2\xc4\x5c\xc0\x6e\xa5\x10\xb3\x3c\x6f\x1c\x91\x64\x39\xdd\x26\x13\x8c\x65\x49\xd6\xea\xb5\xb6\x2e\x57\x70\xb0\x65\x62\x98\x1c\xc7\xba\xdd\x48\xb3\x64\x10\xb0\xe0\x64\x62\x61\xe7\xf9\x97\x7d\x44\xb0\xa9\x88\xa0\x86\x0f\x49\xe1\x17\x28\xe0\x58\x8c\xfa\xb4\x4a\x20\x3c\xb6\x23\xb1\x2a\x70\x6c\x4a\xd8\x78\xbd\x84\x6a\xb8\x95\x66\x4c\xf2\x85\xf3\x23\x94\xca\x07\xa6\xa6\x66\x39\x00\x70\x16\x1e\x66\x9b\x5a\xca\x27\x91\x31\x7b\xbd\xce\x24\x87\x41\x10\x7d\xf7\x6b\xca\x9b\x65\xc0\x2b\x04\xd3\x3a\x49\x79\xa4\x94\x80\x14\x04\x36\x61\x58\x40\x32\xbd\x54\x86\x63\x95\x20\x40\x2e\x2c\x11\xac\xcc\x65\x0d\x7b\x82\x80\x12\x8c\x14\xe1\x6c\xd1\xaa\xfb\x88\xb0\x46\x7d\x57\xa1\x96\xa4\x80\x16\x39\xae\xcc\x3d\xef\x9f\x40\x29\x37\x22\x77\x03\x32\xa5\xa5\x9b\x75\x7e\x6f\xf9\x7d\xc2\x1b\xc1\xb9\x8a\xfe\xb3\x19\x57\x97\x7f\x96\xb6\x42\xc3\x05\x01\xa6\x62\xc9\x99\xd6\x1d\x08\x45\x30\xa2\x55\xfd\xd1\x15\xb0\xf0\x2d\x12\x73\xe1\x47\x0f\xfa\xe0\x9c\xa2\x79\x7e\x50\xe0\x4f\x67\x0e\x2c\xbc\x24\xd1\x9c\xba\xe9\x9d\xf2\x93\x39\x76\x34\x6d\x5d\x27\x10\x32\x07\x04\x25\xac\xcc\x2a\x16\x75\x43\x86\x23\x3f\x2d\xdf\x22\x16\xcf\xf6\x98\xa3\x02\x0e\xd7\xe2\x72\x5d\x4e\x1b\x85\x3b\xe7\xfc\x85\xa5\xb1\xf3\x09\x26\x39\x8b\xab\xbd\xc0\x26\x16\x99\x35\x46\x02\x2b\xeb\x13\x4c\x0e\x0f\x0f\xab\x0c\xa0\x09\xa6\xe9\x20\xb9\x5b\x4c\x23\x7f\x9b\x39\x7d\xd9\x88\xa4\x3e\x07\xc0\x7a\x2a\xaa\x68\xea\x4f\x4a\x56\x43\x74\x07\x17\xb2\xa7\xd2\x8a\x26\x6f\x20\xb9\xa3\x02\x1b\x42\x80\x04\x52\x5c\x2c\x4b\x4e\xce\x1e\x47\xe2\x3b\xee\xb6\xe4\x5a\x87\xf7\xbb\xfb\x68\x37\x3f\x40\x23\x41\x28\xe5\xdd\x66\x96\x4e\x58\x92\xac\xcb\x98\x2d\x6c\x47\x35\xa0\x48\xa6\x17\x7f\x7c\xb8\xdc\x39\x79\x46\x8b\x7a\x82\xb2\x1c\x0c\xbf\xee\x9c\x28\x07\xc3\xaf\x3b\x2a\xc9\x32\x7e\xe9\xa4\xdb\xf2\x6c\x1d\xf7\x43\x50\x8a\x30\xb7\xa7\x81\x57\x16\xec\x67\x2b\x7a\xc2\xa0\x3f\xed\xb6\x34\x5b\x07\xfd\x97\x90\x64\x55\x2c\x74\x88\x45\x3a\x80\x8f\x56\xd3\x7d\xa4\x6f\xee\xbc\xb9\x4e\x2e\x70\x29\x85\x5d\xc4\xac\xae\x65\x03\x93\x89\xf7\x24\x1f\x98\xcb\xe5\x5a\x9c\xae\xcb\x6d\xa3\x11\x7b\x92\xac\x6d\x30\xed\x08\xda\x1d\xab\x32\x5b\xd1\xd6\x2c\x8b\x61\x9c\x21\x8c\x81\x42\xec\xc6\x8c\x31\x3c\x9c\x9b\xc4\x34\x24\x71\x19\xa2\xe7\x26\xc2\x8a\xdc\x21\x05\xa6\xe1\x73\x87\xdc\x12\x10\x91\x44\xfe\xf8\xcb\x1e\x7c\xfe\x74\x73\xfd\xf9\xa3\x7d\x75\x31\xfc\x6b\xb5\x99\x64\x61\xec\x36\x7d\x4e\x82\x91\x21\xe6\x22\x2f\x2d\x9e\xc5\xc5\x8e\x03\x24\x5e\xce\xde\xef\x54\xf3\x3b\x7f\x02\x0d\x7a\xe8\x75\xa2\x69\xf7\xc4\xe7\xe4\x70\xb8\x16\x97\xeb\x72\xda\x68\xc4\x9a\x44\x2b\xbb\x18\xf1\xb0\xa7\x21\xac\x15\xcf\xfd\x29\x1b\x8e\xea\x05\x92\xb3\x1a\x09\xad\x06\x81\x5b\x42\xa9\xde\x19\x7c\xc0\x25\x49\xca\x06\x72\x8a\x30\x37\x59\xa9\x4f\xb9\xfb\x95\xc0\xa4\x6c\x99\x7e\x5c\xc8\x69\x0b\xf8\x19\x82\x54\xa6\xf5\xfa\x75\xaa\x24\x27\x8f\x72\x9b\x05\xfe\x0d\x97\xdd\xdf\x08\x80\x88\x49\x4b\x1c\x2b\xe1\x4f\x3c\x20\xae\xa7\xe6\xdc\x3a\x7e\x99\x5b\x65\x5b\x99\x63\x6b\xb8\xa6\x5f\xb0\xb7\xf5\xf2\x39\x4f\xc6\xb0\xb4\x03\x4e\x09\x7e\x30\x2d\x86\x54\x28\xb2\x4b\x67\x72\x7f\xbb\xfe\x10\x1e\x20\x07\x84\xb4\x31\x25\x78\x9c\xd4\xe3\x69\xf3\x0e\x58\x44\x68\x4b\x40\x02\x7b\x15\xe8\xa5\xc7\x27\x76\xc2\x46\x10\x55\x84\x37\x9d\x80\x2b\x48\x5c\x0f\x18\x05\x11\x45\x95\x48\x6b\x86\x51\x02\x60\x36\x4c\xc9\x58\x22\xbe\xfd\x81\x21\x7a\x10\xff\x77\x56\xde\x18\xdb\xb6\x52\x71\x45\xa4\x69\xc3\x47\x9a\x99\xba\xcd\x9f\x64\x6c\x38\xda\x77\x0f\x3a\x96\xa9\x8e\x77\xc8\x69\xae\x6c\xcc\x3b\x28\xa4\x42\x39\x9a\x55\x9d\xc9\xc7\xff\x6e\xd6\xae\x6b\x39\xd7\xa5\xb6\xf5\xd5\xca\xca\xb5\x64\xd3\xbe\x75\x6d\xba\xb8\x06\xb9\x02\x1d\x44\xe8\xd0\xa6\x52\x3c\x30\xad\x5f\x35\x89\x46\x5c\x29\xee\x6b\xd0\x95\x2e\x57\xcc\x22\x96\x01\xc2\x84\xb9\x05\xad\x85\x5d\x0f\xb9\x10\x1e\x4f\xc3\x03\x60\x8e\xbe\x2a\x6e\xb8\xa5\x32\xbe\x1b\x26\xd6\x42\x60\x4a\x3c\xac\x5c\x15\x93\x35\xb5\xf6\xb4\x30\xa7\xa7\x67\x9d\x12\xea\x92\xc5\x5a\x51\x3a\xd8\x5c\xd1\x8a\xd2\x74\x82\x4f\xec\x47\x70\x97\xa6\xc2\x9c\x86\x3e\x2b\x43\xa8\xdf\xe2\x11\xef\xe2\xb2\x8e\x55\x3b\x11\x2d\xe6\x27\x2f\x6e\x3c\x20\xe2\x37\x9d\xb1\x92\xad\x05\xf6\x50\x14\xfa\xe4\xda\xb1\x2c\xca\xfb\x69\xaf\x48\x41\x74\x9d\xb7\xbd\xcc\xb6\x4a\x99\x4b\x2d\xd5\x2d\x97\x45\x59\xea\xe6\x90\x4c\xe3\x61\xd4\x4d\x85\xbd\x8b\xcc\xc7\xf2\x65\x4e\xc9\xa3\xf5\xb3\x8e\xfe\x35\xad\x25\xaa\x6d\x6f\x5e\xb4\x1b\x62\x38\xa7\x8a\x04\xb6\x82\x7b\x95\x0f\x4a\x63\x30\x5d\x93\xce\xd0\x0b\xcd\x0a\xf9\xc3\x47\x03\x6f\x0d\x82\x05\x48\xaa\x0c\xc1\x1c\xa5\x2c\xb8\x29\x62\xe3\xb0\x55\x91\xc8\xae\x21\xe0\x42\xe9\x21\x77\x95\x70\x47\xc0\x9b\xac\x48\x67\x60\x1f\xdd\xdb\x14\x98\xab\x8a\x1a\x76\x73\x65\x3f\x33\xc8\x5a\x94\xd1\x4f\x56\xa7\x2e\xa5\x6b\xd7\xc3\x1b\x9d\x31\x09\x0b\x42\x65\x07\xa1\x08\xb8\x04\xd3\x72\x88\x4b\x94\xdc\x9a\xae\x6a\x2d\xbf\x1b\xee\x22\x56\x9f\x4f\xa1\x3f\x02\x51\x41\xef\x16\x08\x77\x44\xef\x92\x15\x55\x56\x9f\xdc\x90\x30\x8b\xb2\x94\x02\xfc\xb3\x3f\xf0\xcf\x8d\xf5\xb3\xe5\xd1\x05\xf8\xfb\x0f\x55\x7c\xce\x12\x55\xef\x81\x7f\xf5\x30\xf5\x36\xc6\x8b\x81\x12\xf4\x40\xfc\x6b\xef\x76\x36\xeb\x76\xb2\x8a\x32\xc4\xbc\x28\xc3\x15\x68\x74\x90\x48\x5b\xaf\x2c\xa3\x2b\xee\xac\x70\x83\xb6\x61\x7d\xae\xe2\xcb\x96\xa8\xb6\xa2\xcf\x12\x98\x24\x8a\xdc\x55\x39\x7e\xa8\xb3\x91\x2f\x63\x0c\xf6\x2e\xb0\x05\x17\xb8\x65\x95\x59\xcd\x3c\x65\x35\x9a\x75\x3c\xf3\x74\xf5\xa0\x95\x76\x02\x4a\x49\x20\xc9\xff\xa0\xc2\x5d\x23\x4f\x22\x65\xd5\x1e\x02\x7d\x90\x12\xb9\xdd\xbe\xe0\xa6\x00\x87\xc9\xec\x77\x14\x15\x05\x19\xa1\xdc\x2c\xd2\xbf\xb7\x8b\xa4\x01\xf7\x47\xfc\x2d\xbf\xbf\x89\xfd\x47\x04\xa8\x11\x62\x4e\xfc\xb4\x74\x04\xf0\x48\xd1\xf9\xc2\x8d\xb5\x1e\xfc\x2d\x62\x4e\x12\xc9\xff\x32\x2a\x8e\xe4\x53\x31\xe8\x68\x1e\x83\x06\x3c\x08\x83\x76\xc3\xcf\xca\x99\xcf\x2d\x5b\xb2\x34\xfe\x7c\xee\x80\x1e\xfe\x1e\x29\xfa\x8f\xbf\x2b\xee\xc0\x74\x27\xe9\x6b\xe2\xcf\xef\x14\xfe\xb4\x4c\x5f\x8b\xf8\x7b\x1b\x2a\x35\xab\xa2\x11\x20\x41\x4d\x1f\xd4\x71\x6a\xd7\xd1\x38\x9d\xc7\xa2\x00\x0c\xe4\x0e\xa4\xed\xc0\x2d\x0a\xa9\xda\x40\x72\x24\x66\x84\xf1\xe2\x39\x55\x6f\xde\x0d\x07\xcf\x5d\xf5\xa6\x00\xd3\x0d\x03\x50\x2b\xd2\xec\x08\x00\x29\x77\x1b\x80\xdf\x47\xee\xee\xc1\x17\xb3\xc1\x50\x1e\x18\x5f\x86\x9f\xa7\x10\x64\x0a\x44\x4f\x40\xd8\x66\x52\xf7\x3b\xf6\x10\x73\x41\x37\x0b\xb4\x48\xb6\x0b\x69\xdd\x77\xf7\xc9\x82\xb6\xb3\xd7\x2d\x95\xcb\xf9\x3e\xf0\x0a\x54\xbb\x61\xec\x6a\xa5\xa2\xba\x91\xc0\x8c\x8f\xd5\x2a\xc1\x37\x45\xd9\x7b\x04\x27\x27\x72\x7b\x10\xb7\x69\x80\xbb\x5f\xe2\xf9\x58\xac\x99\x73\x5c\xd1\x7c\xb1\xe6\x84\x8b\x71\xb4\x61\x6b\xbd\x5e\x53\x3f\xd5\x36\x9b\x7a\x4f\x73\x6d\xdf\xa6\xd3\x2f\xc8\xfc\x76\x25\x71\xb6\x65\x17\x72\x8d\x1c\xc2\x17\x03\xf1\xa4\x3b\xe5\xbf\x3c\x64\x18\xa2\x2d\x79\x03\x51\xf9\x30\x1e\xf2\x39\xf2\x83\x37\xc9\xb8\x5d\xf7\x30\xe9\x10\x5d\x1b\x8b\x71\x83\x7c\x85\x59\x3b\x02\x4d\x6c\xc2\x1c\x82\x91\xe2\x62\x1d\xfd\x13\xcd\x9c\xa5\x40\x2b\x42\xd6\x10\x56\xaf\x43\xad\xba\xcf\x3d\x3a\xb5\xe8\x5d\xc1\xc3\xc0\xb4\xb2\x6d\xcc\xd6\x60\xde\x6e\x82\xae\x47\x91\xd1\x86\xff\x2e\xe5\x3c\x32\x1a\xc3\x03\x88\xd6\xc3\xa2\x15\xba\x27\xd2\xc6\x52\xfa\xaf\xfc\xad\xb6\xb1\x94\x26\x8c\x7e\xce\xe3\x3e\x77\x81\x01\x5f\xdb\xab\x5d\x21\x79\x78\x7b\xdc\x80\xe5\xbf\xd4\xf2\x7e\xbb\x9a\x3a\x1c\x02\x73\x8c\x2b\x24\xb0\xe0\xc6\x8b\xcb\x63\xcd\x83\x98\xcb\xe3\xf9\x49\x4c\xdc\x29\x0d\xce\xc6\x8f\x5b\xfa\x12\x69\x2f\x01\xf6\xa4\x09\xc0\x6a\xf9\xb1\xa7\x01\xd8\x13\x5d\xc0\x9e\xf4\x08\xb0\x5b\xce\x8c\x2f\x01\xf6\xb4\x09\xc0\x6a\x15\x86\x3e\x0d\xc0\x9e\xea\x02\xf6\xb4\x47\x80\xdd\x72\x5b\xd8\x12\x60\x5f\x35\x01\x58\xad\xb2\xcc\xa7\x01\xd8\xd7\xba\x80\x7d\xd5\x23\xc0\x16\x18\xa8\x0d\x9f\xdf\xdc\x1e\x97\x3d\xb5\x69\x23\xe5\x50\xf2\xd6\x9f\x1e\xa4\xa3\x72\xce\x7c\x0a\x2b\xb0\x37\x2d\xfa\x93\xbd\xe8\x5b\xed\x5e\x6e\x51\xf4\xa7\x7b\xd1\x37\x26\xfa\x2a\x25\xc7\x2d\x8a\xfe\xd5\x5e\xf4\x8d\x89\x5e\xbf\x81\x70\xeb\xa2\x5f\x3a\x63\x53\x3c\x68\x22\x3c\xd5\x3a\xe2\x4f\xaa\x3d\xe6\x3f\xdd\xbf\x63\x8e\xe6\x23\x5b\xc5\x83\xb8\x50\x6e\xf0\x2d\x79\xed\x13\x29\x09\x67\x55\xc2\xdc\xd7\x3d\x0a\x73\xb7\x0c\xfd\x4e\x17\x0d\x54\xfe\x0b\xd4\x5e\xa9\xe3\x98\x4c\x21\xe6\x6a\xf4\x24\xf0\xb7\x66\x6c\x2b\xb7\x1c\xee\xd1\x93\x46\x4f\xc1\x2d\x71\x99\x64\x55\x2f\x43\x2d\x28\xb2\x08\x00\x1c\xad\xce\xc6\x1f\xa1\x54\xe4\xf6\xc1\xb4\xe2\xb3\xaa\xee\x9f\xbe\x6e\x19\x77\xc3\x80\xb0\x25\xa7\x1d\x31\xb8\xcb\x31\xdb\x5a\x77\x37\xf8\x66\xc4\x28\x99\x76\xd9\x48\xad\xfb\x1a\x66\x48\xc7\xc0\x94\x5e\x97\x77\x75\x43\xb9\x78\x47\x84\x7e\x74\x3f\xab\xe3\xd4\xa2\x4c\xdd\x11\xa1\x45\xad\x7f\x9f\xc3\xca\x00\x68\xe1\x2f\xdd\xaf\xfc\xe9\x7b\xad\x58\x2f\xf4\x41\x10\x5c\x02\x43\xa9\x40\x46\xee\xd0\x7d\x12\x7b\x4f\xd5\x40\x9c\xb3\x54\x06\xa1\xa5\x0d\x9b\xf0\x72\x51\xc4\x7e\xf3\xbd\xfb\x3b\xd2\x46\xa0\xd7\xa3\x52\xa1\x9c\xad\xe8\xfa\x52\xa1\xe5\x35\x2e\xbc\x9c\xbf\x38\x3b\x8a\xef\x0d\xbf\x45\x18\xac\x67\xff\x0f\x00\x00\xff\xff\xa5\x36\x14\x17\x8e\x9e\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 40590, mode: os.FileMode(0664), modTime: time.Unix(1605905588, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x13, 0x93, 0xf4, 0xb1, 0x8d, 0xb1, 0x9e, 0xf8, 0x47, 0x6e, 0xdb, 0x8c, 0x4e, 0x2b, 0xfe, 0x69, 0x4f, 0x79, 0x5a, 0xc8, 0x92, 0x89, 0x5f, 0xb5, 0xe9, 0x27, 0xa3, 0x36, 0x5d, 0x1b, 0xad}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
