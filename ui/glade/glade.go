// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (37.851kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xeb\x6f\xdb\x38\x12\xff\xde\xbf\x42\xa7\x03\x8a\x1e\x16\x49\x9a\xa4\xdd\x3b\x6c\x63\x2d\x52\x6f\xd3\x2d\xb6\x69\xaf\x71\xb6\xed\x37\x83\x96\xc6\x12\x1b\x8a\x54\x49\x2a\x8e\xef\xaf\x3f\xe8\xe1\xf8\xa1\x87\x45\x3d\x2c\xc9\xf1\x97\x00\x91\x34\x14\x39\xf3\x9b\x07\x67\x86\xf2\xc5\xef\x0f\x2e\xd1\xee\x81\x0b\xcc\xe8\x40\x3f\x3d\x7e\xa9\x6b\x40\x4d\x66\x61\x6a\x0f\xf4\xbf\x6f\xaf\x8e\xfe\xa3\xff\x6e\x3c\xbb\xf8\xc7\xd1\x91\xf6\x1e\x28\x70\x24\xc1\xd2\x66\x58\x3a\x9a\x4d\x90\x05\xda\xf9\xf1\xd9\xd9\xf1\x99\x76\x74\x64\x3c\xbb\xc0\x54\x02\x9f\x22\x13\x8c\x67\x9a\x76\xc1\xe1\xa7\x8f\x39\x08\x8d\xe0\xc9\x40\xb7\xe5\xdd\x2f\xfa\xf2\x45\xe7\xc7\x67\x2f\xf5\x93\xf0\x39\x36\xf9\x01\xa6\xd4\x4c\x82\x84\x18\xe8\xef\xe5\xdd\x37\x4c\x2d\x36\xd3\x35\x6c\x0d\x74\x13\x11\x82\xe9\x94\xc5\xd7\x02\x02\x4d\xbb\xf0\x38\xf3\x80\xcb\xb9\x46\x91\x0b\xc1\x43\x74\x3c\x65\xa6\x2f\x74\xe3\x0a\x11\x01\x17\x27\x8b\x07\xe2\xe7\x4d\x07\x13\x4b\x93\x73\x0f\x06\xba\xc4\x92\xc0\x04\xf1\x78\xac\x60\x34\x82\x4c\x70\x18\xb1\x80\x9f\xc4\x04\x27\x21\xc5\x2a\xf5\xe3\xd3\x89\xe9\xbe\xe7\xd8\x7a\x1c\x2c\x39\xb9\x7b\x2c\xf0\x84\x80\x6e\xdc\x72\x3f\x31\xb3\x32\xab\x49\xce\x29\x7d\x5e\x1f\xd1\x04\xc8\x92\x8b\x02\xdb\x34\xba\xb4\x4a\x56\x62\xbe\x65\xe7\x9c\x46\xe7\x20\x82\x6d\xaa\x1b\x42\x22\x2e\x8b\x12\xb9\x88\xdb\x98\x8e\x09\x4c\xa5\x6e\x9c\x29\x52\x71\x6c\x3b\x2a\x64\x0e\x3c\x78\x88\x5a\x5b\xd8\x81\xa4\xe4\x78\xe2\x4b\x10\xeb\x37\x56\x6f\xc5\x03\x0a\x13\x11\xd0\xb5\x7b\x44\x7c\x18\xe8\xaf\xf4\x93\x8d\xa1\x4e\xd2\xc7\xba\x38\x89\x04\xbc\x76\xcd\x43\xe6\x1d\xa6\x76\xfe\x0a\x02\x3e\x8d\x91\x94\xc8\x74\x74\xe3\x65\xd1\x75\x4b\xe6\xa9\x13\xcd\xb0\x25\x1d\xdd\x78\x95\xfe\xfc\xc5\x49\x62\xbe\x6b\x8a\xa6\xa9\x03\xdb\x7a\x30\xcd\x03\xa8\x1b\x02\xf5\xa6\x70\x39\xf2\xf2\x28\xda\x44\xe8\x69\x67\x11\x6a\x32\x2a\x31\x05\x2a\x5b\x86\x69\x9b\xd2\xc9\xc0\x65\x03\xdc\xc6\xd2\xef\x9c\x39\x20\xd1\xf4\x24\x47\x54\x10\x24\xd1\x84\xc0\x40\x9f\x83\xd0\x8d\x0f\xb7\x7f\xff\xa6\x1d\x35\x2a\xaf\xc2\x8a\xd1\x8e\xbc\xcc\x9f\x3d\x12\xd7\xf0\x4b\xd3\xd2\x2a\x6c\xc0\xdb\x91\x16\xe2\x9c\xf4\x48\x5e\x97\x37\x37\x1f\x9b\x96\xd8\x79\x07\x25\x36\x32\x39\x23\x04\xac\xd5\x7d\x94\xf0\x3d\xe0\xa6\x03\xe6\xdd\x90\x51\x89\x30\x05\xde\xb0\x10\x55\xc8\x4a\xc5\x23\xf7\x65\x88\x84\x83\x2c\x36\x1b\x07\x5b\x41\xdd\xc0\x34\x93\x2c\xc1\xe6\x74\x56\x7f\xc5\x30\xf3\x18\x97\xfa\xe6\xa3\x25\xf9\xb9\x85\xa7\xb9\x8a\x91\xca\xd8\x22\xa1\x68\xea\x6c\xcb\x12\x16\x12\x65\x69\x71\x66\xcb\x26\x5d\x3e\x2b\xc6\x6b\xa9\x01\x69\x26\xac\xb2\xd4\xaa\x4a\xae\x92\xf4\x2a\x49\xb0\x92\x14\x53\xdf\x5c\x85\xd8\x17\x30\x76\x11\xbf\xf3\x73\xf7\x1a\xd9\xf4\xdb\x76\x29\x8f\x74\x29\xf6\x7f\x71\x27\x5d\xf9\x53\x09\x52\x1e\x6e\x33\xd2\x2e\xec\x8e\xaa\xee\x83\xd6\x17\xb9\x72\x73\xf5\x46\x52\x1f\x2f\xad\x1f\xbe\x90\x2e\x50\x19\x2b\xa5\x07\x60\xad\x5c\x4c\xcf\xef\x11\x36\x0b\xdc\xd5\xeb\x44\x5e\x6f\x13\x3b\x9e\x17\x3c\xf7\x6b\x82\x75\x29\xba\xe1\x83\x6e\x9c\x25\x96\x9f\x70\x17\x12\xbc\x31\xa6\x26\x87\x68\x7a\x89\x70\x7a\x93\xc0\x43\x36\xac\x11\x6c\xcc\x65\x0b\x7b\x3c\x8f\x60\x13\x49\xcc\xe8\xaa\xf3\x76\x11\xa6\xd5\x12\xa0\x2a\xea\x9d\xc0\x17\x96\x04\x52\x03\xac\x3f\x81\x10\xa6\x05\x01\x05\x88\x84\x89\x69\x36\xe9\xfa\x96\x3d\x44\xbc\xe1\x8c\xc9\xe0\x9f\x15\xa4\xaa\x9a\xf0\x52\x09\xd8\x0d\x1a\xc6\x31\x50\x19\x4a\x4e\x37\xee\x81\x4b\x6c\x22\x52\x36\x73\x7b\x0d\xd4\x7f\x8b\xf8\x52\xf8\xc1\x85\x56\x63\xee\x82\xe1\x50\x30\xcf\x0f\x12\xdc\x78\xe6\x40\xfd\x2b\x1c\xcc\xa9\x9b\xc1\x51\xf6\xce\x61\x1c\x4c\x5b\x65\xa8\xc0\x6b\xf9\xd4\x02\x4e\x30\x2d\xb2\x8a\x55\xdd\x10\xfe\xc4\x4d\xca\x37\x8f\xc5\x8b\x80\x66\x92\xc3\xe1\x4a\x5c\xae\xca\x69\x2d\x37\x4c\xcb\x5e\x58\x12\x3b\x9f\x60\x96\xb1\xb8\xca\x0b\xac\x63\x91\x69\x63\x44\xb0\x32\x3e\xc1\xec\xf8\xf8\xb8\xcc\x00\x8a\x60\x8a\x07\xc9\x8c\x67\xb4\xec\x98\x26\xbe\x59\x8b\xa4\x3e\x7b\x40\x7b\x2a\xaa\x60\xea\x4f\x4a\x56\x23\x74\x0f\x97\xa2\xa7\xd2\x0a\x26\xaf\x21\xb1\xa7\x02\x1b\x81\x87\x38\x92\x8c\xaf\x4b\x4e\x2c\x2e\x07\xe2\x3b\xed\xb6\xe4\x5a\x87\xf7\xbb\x07\x8f\x71\x39\x44\x13\x8e\x09\x61\xdd\x66\x96\x4a\x58\x12\xad\x4b\x5b\x2c\x6c\x4f\x35\x20\x4f\xa6\x97\x7f\x7c\xb8\xda\x3b\x79\x06\x8b\x7a\x82\xb2\x1c\x8e\xbe\xee\x9d\x28\x87\xa3\xaf\x7b\x2a\xc9\x22\x7e\xe9\xac\xdb\xf2\x6c\x1d\xf7\x5f\x7c\x9c\x56\x29\xe8\x10\x8b\x54\x20\x1f\xac\xa6\xfb\x48\x6f\x2e\xcf\x5b\x25\x2d\xb2\x96\xcd\xcb\x63\x56\xd7\x12\x23\xd1\xc4\x7b\x92\x1a\xc9\xe4\x72\x25\x4e\x57\xe5\xb6\x56\x8b\x3d\x89\xd6\x36\x8c\xdb\x63\xf7\xc7\xaa\x2c\x56\xb4\x33\xcb\xa2\x69\x17\xc8\x34\x81\x40\xe8\xc6\xb4\x3b\x98\x0f\x74\xac\x6b\x02\xdb\x14\x91\x81\x8e\x4c\x89\xef\x91\x04\x5d\x73\x99\x85\xa7\x18\x78\x20\x91\x3f\xfe\x1a\x0f\x3f\x7f\xba\xbd\xf9\xfc\x71\x7c\x7d\x39\xfa\x6b\xb3\x89\x73\x65\xec\xfd\xb2\x5b\x7f\x02\xf1\x7a\x68\xb5\x82\x69\xf7\xc4\x66\x65\x70\xb8\x12\x97\xab\x72\x5a\xab\xc5\x62\x05\x2b\xbb\x9c\x30\xbf\xa7\x21\x90\x11\xce\xfd\x29\x07\x3c\xe5\x0b\xdb\x8b\x72\xa3\x52\x63\xd7\x14\x13\xa2\x56\xce\xf2\x98\xc0\x51\x05\x2e\xa3\x78\xde\x64\x87\x15\x61\xf6\x57\x0c\xb3\xa2\xed\x55\x61\x01\x7e\xcc\xe1\xa7\x0f\x42\xea\xc6\xeb\xd7\x89\xea\x76\x16\xe5\x2e\x1b\xb3\x6a\x6e\x97\xba\xe5\x00\x01\x93\xd6\x38\x56\xc0\x9f\x38\x80\x6d\x47\x2e\xb9\x75\xfa\x32\xb3\x3b\xa2\x34\xc7\xb6\x70\x4d\xbd\xf5\xaa\xf9\x46\xa8\xcd\x37\x8a\x10\x96\x63\x8f\x11\x6c\xce\x75\x83\x22\xe9\xf3\xf4\x2a\x74\xe6\xbb\xab\x0f\xe1\x00\xb2\x80\x8b\xb1\x49\xb0\x79\x87\x42\xb6\x2b\xf3\x0e\x68\x40\x38\x16\x80\xb8\xe9\x94\xa0\x17\x0e\x9b\x8d\x23\x36\x02\x2f\x23\xbc\x78\x02\x36\xc7\xd6\x38\xb0\xda\x22\xbf\xa8\xbf\x65\x18\xc9\x01\x16\xc3\x14\x8c\x25\xc2\xa3\x74\x14\x91\xa3\xf0\xdf\x81\x2e\x80\x80\x19\xd9\xb6\x42\x71\x45\xa0\x69\xa3\x47\x9a\x85\xba\x2d\xaf\xa4\x04\xac\xed\xbb\x07\x15\xcb\x54\xc5\x3b\x64\x34\xc5\xd7\xe6\x1d\x24\x92\xbe\x98\x2c\x1a\x38\xc4\xe3\xbf\xcd\xda\x75\x25\xe7\xba\x76\xdc\x68\xb3\x49\x69\x2b\x59\x7c\xde\x48\x99\x2e\xec\x45\x2c\x41\x07\x01\x3a\x94\xa9\x24\xf3\x74\xe3\x57\x45\xa2\x09\x93\x92\xb9\x0a\x74\x85\x3b\x7f\xd2\x88\x85\x87\x4c\x4c\xed\x9c\x96\xf0\xae\x87\x5c\xc8\xbc\x8b\xc3\x03\xa0\x96\xba\x2a\x36\xdc\x0a\x1f\x9e\xcd\x0d\xb5\x10\xa8\xe4\xf3\x8d\xa3\xba\x69\x53\x6b\x4f\x0b\x33\x7a\x31\xb7\x29\xa1\x2a\x59\xa8\x15\x85\x83\xcd\x0d\xad\x28\x4c\xc7\xd9\x6c\xfc\x08\xee\xc2\x54\x26\x23\xbe\x4b\x8b\x10\x16\x0c\x38\x57\xfa\xbf\xc3\x5d\x5c\x5a\x85\xa2\x13\xd1\x62\x76\xf2\xe2\xd6\x01\xcc\x7f\x53\x19\x2b\xda\x5a\x98\x0e\x0a\x42\x9f\x4c\x3b\x96\x46\xf9\x10\xf7\x8c\xe7\x44\xd7\x59\xdb\xcb\x74\xab\x94\xba\xd4\x42\x5d\xce\x69\x94\x85\x4e\x7c\xa6\x1a\x0f\xad\x6a\x2a\xec\x5d\x60\x3e\xd6\x0f\xd3\x47\x97\xb6\xcf\x3a\xf8\xab\x1b\x6b\x54\xbb\xde\xbc\xa8\x92\x4a\xc6\x88\xc4\xde\x58\xc2\x83\xcc\x06\xa5\x36\x8c\xd7\xa4\x32\xf4\x4a\xdf\x6f\xf6\xf0\xc1\xc0\x3b\x83\x60\x0e\x92\x4a\x43\x30\x43\x29\x73\x4e\xf8\x35\x0e\x5b\x19\x88\xec\x06\x3c\xc6\xa5\x1a\x72\x37\x09\xf7\x04\xbc\xd1\x8a\x54\x06\x76\xd1\xc3\x98\x00\xb5\x65\xde\x41\x8b\x4c\xd9\x2f\x0c\xb2\x12\x65\xf0\xca\xf2\xd4\x85\x74\xed\x66\x74\xab\x32\x26\xa6\x9e\x2f\xc7\x9e\xcf\x3d\x26\x40\x37\x2c\x6c\x63\x29\x76\xa6\xab\x4a\xcb\xef\x86\xbb\x08\xd5\xe7\x93\xef\x4e\x80\x97\xd0\xbb\x15\xc2\x3d\xd1\xbb\x68\x45\xa5\xd5\x27\x33\x24\x4c\xa3\x2c\xa4\x00\xff\xec\x0f\xfc\x33\x63\xfd\x74\x79\x74\x01\xfe\xee\xbc\x8c\xcf\x59\xa3\xea\x3d\xf0\xaf\xe7\xb1\xb7\xd1\x5e\x0c\x25\x27\x47\xfc\x5f\x07\xb7\xd3\xac\xdb\x49\x2b\xea\xf3\x65\x51\xdf\xe6\x68\x72\x14\x49\x5b\xad\xac\xdf\x15\x77\x96\xbb\x41\x6b\x58\x9f\xcb\xf8\xb2\x35\xaa\x9d\xe8\xb3\x00\x2a\xb0\xc4\xf7\x65\xca\x0f\x55\x36\xf2\x45\x8c\xc1\xc1\x05\xb6\xe0\x02\x77\xac\x32\x9b\x99\xa7\xb4\x33\x1b\x1d\xcf\x3c\x5d\xcf\x95\xd2\x4e\x40\x08\xf6\x04\xfe\x1f\x94\xf8\x6a\xc4\x93\x48\x59\xb5\x87\x40\x17\x84\x40\x36\x64\x7d\xf8\xa2\xeb\x38\x8c\x66\xbf\xa7\xa8\xc8\xc9\x08\x65\x66\x91\xfe\xbd\x5b\x24\x0d\x99\x3b\x61\x6f\xd9\xc3\x6d\xe8\x3f\x02\x40\x4d\x10\xb5\xc2\xab\x85\x23\x80\x47\x8a\xce\x37\x6e\x6c\xf5\xe0\x6f\x11\xb5\xa2\x48\xfe\x97\x49\x7e\x24\x9f\x88\x41\x27\xcb\x18\xd4\x63\x9e\xef\xb5\x1b\x7e\x96\xce\x7c\xee\xd8\x92\x25\xf1\xe7\x32\x0b\xd4\xf0\xf7\x48\xd1\x7f\xfc\x5d\x33\x0b\xe2\x9d\xa4\xab\x88\x3f\xb7\x53\xf8\x53\x32\x7d\x2d\xe2\xef\xad\x2f\xe5\xa2\x8b\x86\x83\x00\x19\x5f\xa8\xe2\xd4\x6e\x82\x71\x3a\x8f\x45\x0e\x26\xe0\x7b\x10\x63\x0b\xa6\xc8\x27\xb2\x81\xe4\x48\xc8\x08\xed\xc5\x73\x22\xdf\xbc\x1b\x0d\x9f\xdb\xf2\x4d\x0e\xa6\x6b\x06\xa0\x52\xa4\xd9\x11\x00\x12\x66\xd7\x00\xbf\x8f\xcc\x3e\x80\x2f\x64\x83\x26\x1d\xd0\xbe\x8c\x3e\xc7\x10\xa4\x12\x78\x4f\x40\xd8\x66\x52\xf7\xbb\xe9\x20\x6a\x83\x6a\x16\x68\x95\x6c\x1f\xd2\xba\xef\x1e\xa2\x05\xed\x66\xaf\x5b\x28\x97\xf3\x7d\xe8\xe4\xa8\x76\xcd\xd8\x55\x4a\x45\x75\x23\x81\x19\x96\xd5\x4a\xc1\x37\x41\xd9\x7b\x04\x47\x15\xb9\x03\x88\xdb\x34\xc0\xdd\x6f\xf1\x7c\x6c\xd6\xcc\x28\x57\xd4\xdf\xac\x39\x63\xfc\x2e\xd8\xb0\xb5\xde\xaf\xa9\x9e\x6a\x5b\x4c\xbd\xa7\xb9\xb6\x6f\xf1\xf4\x73\x32\xbf\x5d\x49\x9c\xed\xd8\x85\xdc\x20\x0b\xb3\xd5\x40\x3c\x3a\x9d\xf2\x5f\xe6\x53\x13\x82\x2d\x79\x0d\x51\xf9\x28\x1c\xf2\x39\x72\xbd\x37\xd1\xb8\x5d\xf7\x30\xc9\x10\x5d\x19\x8b\xe1\x01\xeb\x12\xb3\xb6\x38\x9a\x8d\x31\xb5\xb0\x89\x24\xe3\xdb\xe8\x9f\x68\xe6\x2c\x01\x5a\xee\xd3\x9a\xb0\x7a\xe3\x2b\xf5\x7d\x1e\xd0\xa9\x44\x6f\x73\xe6\x7b\xba\x91\x6e\x63\x76\x06\xf3\x76\x13\x74\x3d\x8a\x8c\x1a\xfe\x3d\xa1\x65\x64\x74\x07\x73\xe0\xad\x87\x45\x1b\x74\x4f\xe4\x18\x4b\xe1\x5f\x67\xd9\x3c\xc6\x52\x98\x30\x78\x9d\xc3\x5c\x66\x03\x05\xb6\xf5\xac\x76\x89\xe4\xe1\xf4\xb4\x06\xcb\x7f\xa5\xe4\xfd\xf6\x35\x75\x38\x02\x6a\x69\xd7\x88\x9b\x9c\x69\x2f\xae\x4e\x15\x0b\x31\x57\xa7\xcb\x4a\x4c\x78\x52\x1a\xac\xc6\xcb\x2d\x7d\x89\xb4\xd7\x00\x7b\x56\x07\x60\x95\xfc\xd8\xd3\x00\xec\x99\x2a\x60\xcf\x7a\x04\xd8\x1d\x67\xc6\xd7\x00\x7b\x5e\x07\x60\x95\x1a\x43\x9f\x06\x60\xcf\x55\x01\x7b\xde\x23\xc0\xee\xf8\x58\xd8\x1a\x60\x5f\xd5\x01\x58\xa5\xb6\xcc\xa7\x01\xd8\xd7\xaa\x80\x7d\xd5\x23\xc0\xe6\x18\xa8\x86\xeb\x37\xd3\xd3\xa2\x55\x9b\x36\x52\x0e\x05\xbf\xfa\xd3\x83\x74\x54\x46\xcd\x27\xb7\x03\xbb\x69\xd1\x9f\x1d\x44\xdf\xea\xe9\xe5\x16\x45\x7f\x7e\x10\x7d\x6d\xa2\x2f\xd3\x72\xdc\xa2\xe8\x5f\x1d\x44\x5f\x9b\xe8\xd5\x0f\x10\xee\x5c\xf4\x6b\x35\x36\xc9\xbc\x3a\xc2\x53\xa5\x12\x7f\xd4\xed\xb1\x7c\x75\xff\xca\x1c\xf5\x47\xb6\x92\x79\x61\xa3\xdc\xf0\x5b\x74\xdb\xc5\x42\x60\x46\xcb\x84\xb9\xaf\x7b\x14\xe6\xee\x18\xfa\x9d\x6e\x1a\x28\xfd\x5b\xc2\x4e\xa1\x72\x4c\xaa\x10\x33\x35\x7a\xe6\xb9\x3b\x33\xb6\xa5\x8f\x1c\x1e\xd0\x93\x44\x4f\xce\x57\xe2\x52\xc9\xca\x7e\x0c\x35\xa7\xc9\xc2\x03\xb0\x94\x4e\x36\xfe\xf0\x85\xc4\xd3\xb9\x6e\x84\xb5\xaa\xee\x57\x5f\x77\x8c\xbb\x91\x87\xe9\x9a\xd3\x0e\x18\xdc\xe5\x98\x6d\xab\xbb\x1b\x7e\xd3\x42\x94\xc4\xa7\x6c\x84\xd2\xf7\x1a\x16\x48\x37\x81\x4a\xb5\x53\xde\xe5\x0d\xe5\xea\x37\x22\xd4\xa3\xfb\x45\x1f\xa7\x12\x65\xe2\x1b\x11\x4a\xd4\xea\xdf\x73\xd8\x18\x00\xad\xfc\x68\xf4\xc6\xaf\x48\x2b\xc5\x7a\xbe\x0b\x1c\x9b\x05\x30\x94\x08\x64\xc4\x1e\x7d\x4f\xe2\xe0\xa9\x6a\x88\x73\xd6\xda\x20\x94\xb4\xa1\x09\x2f\x17\x44\xec\xb7\xdf\xbb\xbf\x23\xad\x05\x7a\x3d\x6a\x15\xca\xd8\x8a\xd6\xf2\x93\xfb\x17\x27\xe1\x77\xc3\xa7\xc8\x04\xe3\xd9\xff\x03\x00\x00\xff\xff\x9a\x3a\x75\x05\xdb\x93\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 37851, mode: os.FileMode(0664), modTime: time.Unix(1603042313, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0xb4, 0xdd, 0xdb, 0xe2, 0x7d, 0x94, 0x31, 0x6, 0x89, 0x40, 0xd9, 0x8b, 0xed, 0xae, 0x2e, 0x0, 0x79, 0x7a, 0xe1, 0xe8, 0x41, 0x77, 0x3d, 0xbd, 0x73, 0xba, 0x24, 0x5c, 0x81, 0xfe, 0xee}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
