// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (39.601kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x6f\xdb\x38\x12\x7f\xef\x5f\xa1\xd3\x01\x45\x0f\x8b\x24\x4d\xd2\xee\x1d\xb6\xb1\x16\xa9\xb7\xe9\x16\xdb\xb4\xd7\x38\xdb\xf6\xcd\xa0\xa9\xb1\xc4\x86\x22\x55\x92\x8a\xe3\xfb\xeb\x0f\x92\xec\xf8\x43\x1f\x16\x25\xd9\x92\x1c\xbf\x14\xa8\xa4\xa1\x87\x33\xbf\xf9\xe0\x70\xc8\x5c\xfc\xfe\xe0\x51\xe3\x1e\x84\x24\x9c\xf5\xcc\xd3\xe3\x97\xa6\x01\x0c\x73\x9b\x30\xa7\x67\xfe\x7d\x7b\x75\xf4\x1f\xf3\x77\xeb\xd9\xc5\x3f\x8e\x8e\x8c\xf7\xc0\x40\x20\x05\xb6\x31\x21\xca\x35\x1c\x8a\x6c\x30\xce\x8f\xcf\xce\x8e\xcf\x8c\xa3\x23\xeb\xd9\x05\x61\x0a\xc4\x18\x61\xb0\x9e\x19\xc6\x85\x80\x9f\x01\x11\x20\x0d\x4a\x46\x3d\xd3\x51\x77\xbf\x98\x8b\x1f\x3a\x3f\x3e\x7b\x69\x9e\x44\xdf\xf1\xd1\x0f\xc0\xca\xc0\x14\x49\xd9\x33\xdf\xab\xbb\x6f\x84\xd9\x7c\x62\x1a\xc4\xee\x99\x18\x51\x4a\xd8\x98\xcf\x9e\x85\x04\x86\x71\xe1\x0b\xee\x83\x50\x53\x83\x21\x0f\xc2\x8f\xd8\x70\xcc\x71\x20\x4d\xeb\x0a\x51\x09\x17\x27\xf3\x0f\x66\xdf\x63\x97\x50\xdb\x50\x53\x1f\x7a\xa6\x22\x8a\xc2\x08\x89\xd9\x58\xe1\x68\x14\x61\x70\x39\xb5\x41\x9c\xcc\x08\x4e\x22\x8a\x65\xea\xc7\xaf\x13\xec\xbe\x17\xc4\x7e\x1c\x2c\xc9\xdc\x3d\x91\x64\x44\xc1\xb4\x6e\x45\x90\xe0\xac\xcc\x6c\x92\x3c\xa5\xf3\xf5\x11\x8d\x80\x2e\xa4\x28\x89\xc3\xe2\x47\xcb\x64\x25\xf8\x2d\xcb\x73\x1a\x9d\x8b\x28\x71\x98\x69\x49\x85\x84\x2a\x4a\xe4\x21\xe1\x10\x36\xa4\x30\x56\xa6\x75\xa6\x49\x25\x88\xe3\xea\x90\xb9\xf0\xe0\x23\x66\xeb\x89\x23\x90\x30\xf4\x90\xb8\x0b\xfc\x0d\x74\x48\x29\x41\x46\x81\x02\xb9\xfa\x62\xf9\xd5\x6c\x4c\x89\x11\x05\xd3\xb8\x47\x34\x80\x9e\xf9\xca\x3c\x59\x1b\xea\x24\x7d\xac\x8b\x93\x18\x18\x2b\xcf\x7c\x84\xef\x08\x73\xf2\x27\x11\xca\x77\x88\x94\x42\xd8\x35\xad\x97\x45\xa7\xae\xb8\xaf\x4f\x34\x21\xb6\x72\x4d\xeb\x55\xfa\xf7\x17\x27\x09\x7e\x57\x0c\xd4\xd0\x37\x08\xfb\x01\xe3\x83\x31\xec\xc6\x18\x26\x02\xe5\x9a\x41\x93\x08\x3d\x6d\x2d\x42\x31\x67\x8a\x30\x60\xaa\x61\x98\x36\xa9\x9d\x0c\x5c\x6e\x41\xda\x44\x05\xad\x73\x07\x34\x66\x4f\x09\xc4\x24\x45\x0a\x8d\x28\xf4\xcc\x29\x48\xd3\xfa\x70\xfb\xf7\x6f\xc6\xd1\x56\xf5\x55\xd8\x30\x9a\xd1\x17\xfe\xd9\x21\x75\xf5\xbf\x6c\x5b\x5b\x85\x1d\x78\x33\xda\x42\x42\xd0\x0e\xe9\xeb\xf2\xe6\xe6\xe3\xb6\x35\x76\xde\x42\x8d\x0d\xb0\xe0\x94\x82\xbd\xbc\xfe\x92\x81\x0f\x02\xbb\x80\xef\xfa\x9c\x29\x44\x18\x88\x2d\x2b\x51\x87\xac\x54\x3e\x72\x5f\x86\x48\xba\xc8\xe6\x93\x61\xb8\x84\x34\x2d\xc2\x32\xc9\x12\x62\x4e\x17\xf5\x57\x02\x13\x9f\x0b\x65\xae\x7f\x5a\x52\x9e\x1b\x64\x9a\x6b\x18\xa9\x82\x2d\x92\x8a\xa6\x72\x5b\x96\xb0\x90\x2a\x4b\xab\x33\x5b\x37\xe9\xfa\x59\x72\x5e\x0b\x0b\x48\x73\x61\x95\xb5\x56\x55\x73\x95\xb4\x57\x49\x83\x95\xb4\x98\xfa\xcb\x55\x88\x8b\x2e\xb9\xb3\xe8\x37\xad\x52\x1e\xe9\x52\xfc\xff\xfc\x4d\xba\xf1\xa7\x12\xa4\x7c\xdc\x64\xa6\x5d\x38\x1c\x55\x5d\x07\xad\x4e\x72\xe9\xe5\xf2\x8b\xfc\x92\xa0\xc4\x5c\x40\x8b\xeb\x81\x69\x61\x34\x4a\x2f\xd2\x22\x68\x9d\xd5\xc2\xa2\x24\x1b\x8d\x54\xdb\x30\x4b\x44\xcb\x22\x09\x49\x46\x94\xdc\x6d\xda\x58\x30\xa2\x2f\x45\x8c\x48\xd9\x59\xc1\xe2\x10\xde\xb7\x15\xde\x4b\x07\x84\x0a\x1e\xba\x1e\xef\x76\x69\xff\x08\xa4\xf2\x80\xa9\x99\x87\xf3\x01\xec\xa5\x87\xe9\x5e\x8e\xf2\x49\xe8\x4a\x5e\x27\xbc\xdb\xba\x20\x7c\x3f\xfc\xee\xd7\x44\x60\x48\x51\x6e\x00\xa6\x75\x96\x70\xee\x09\xf3\x56\xe0\x0f\x09\xc3\x02\x62\xf6\x12\xc5\x82\x75\x02\x1f\x39\xb0\x42\xb0\xc6\xcb\x06\xf1\xf8\x3e\x25\x18\x29\xc2\xd9\xb2\x4f\xf5\x10\x61\xd5\xc2\x80\x0e\x46\x13\xd1\x33\x0c\x1b\xa9\xcb\xc7\x3f\x81\x52\x6e\x84\xce\x1e\x64\xc2\x46\xb6\x1b\x7a\xde\xf2\x87\x58\x36\x82\x73\x15\xfe\x67\x3b\x81\x26\x7b\x5b\x6a\x8d\x86\x0b\x02\x4c\x45\x9a\x33\xad\x7b\x10\x8a\x60\x44\xcb\x46\x83\x6b\x60\xc1\x5b\x24\x16\xca\x0f\x1f\x74\x21\x34\x84\x7c\x7e\x50\xe0\xcd\x38\x07\x16\x5c\x91\x90\xa7\x76\xc6\x86\xec\xba\xc8\x30\x64\x5b\xd7\x05\x07\xcc\x06\x41\x09\x2b\x32\x8b\x65\xdb\x90\xc1\xc8\x4b\xea\x37\x4f\xc4\xf3\xe5\xda\x28\x47\xc2\x95\xa4\x5c\x55\xd2\x46\xee\x22\x34\x7b\x62\x49\xec\x7c\x82\x49\xc6\xe4\x2a\x4f\xb0\x8e\x49\xa6\x8d\x11\xc3\xca\xfa\x04\x93\xe3\xe3\xe3\x32\x03\x68\x82\x69\x36\x48\xe6\x6a\xcd\xc8\x5e\xb1\xcd\x5e\xd6\xa2\xa9\xcf\x3e\xb0\x8e\xaa\x2a\x64\xfd\x49\xe9\x6a\x80\xee\xe1\x52\x76\x54\x5b\x21\xf3\x06\x92\x7b\xaa\xb0\x01\xf8\x48\x20\xc5\xc5\xaa\xe6\xe4\xfc\x71\xa8\xbe\xd3\x76\x6b\xae\x71\x78\xbf\x7b\x08\xd7\xd2\x7d\x34\x12\x84\x52\xde\x6e\x61\xe9\xa4\x25\xf1\xbc\x8c\xf9\xc4\xf6\xd4\x02\xf2\x74\x7a\xf9\xc7\x87\xab\xbd\xd3\x67\x38\xa9\x27\xa8\xcb\xfe\xe0\xeb\xde\xa9\xb2\x3f\xf8\xba\xa7\x9a\x2c\x12\x97\xce\xda\xad\xcf\xc6\x71\xff\x25\x20\x69\xfb\xa0\x2d\x12\x91\x0e\xe4\xc3\xd9\xb4\x1f\xe9\xdb\xdb\xc5\xaa\x52\x16\x59\xa9\xe6\xe5\x09\xab\x6d\x85\x91\x98\xf1\x8e\x94\x46\x32\xa5\x5c\x49\xd2\x55\xa5\x6d\xd4\xe2\x4f\xe2\xb9\xf5\x67\x87\x06\xf6\xc7\xab\xcc\x67\xb4\x33\xcf\x62\x18\x17\x08\x63\xa0\x10\x85\x31\xe3\x0e\xa6\x3d\x93\x98\x86\x24\x0e\x43\xb4\x67\x22\xac\xc8\x3d\x52\x60\x1a\x1e\xb7\xc9\x98\x80\x08\x35\xf2\xc7\x5f\xc3\xfe\xe7\x4f\xb7\x37\x9f\x3f\x0e\xaf\x2f\x07\x7f\xad\xb7\xa8\x2f\x8d\xdd\x64\xcc\x89\x31\x32\xc0\x5c\x64\x55\x08\xd3\xa4\xd8\x72\x80\x44\xd3\x39\xc4\x9d\x72\x71\xe7\x4f\xa0\x7e\x07\xa3\x4e\xc8\x76\x47\x62\x4e\x86\x84\x2b\x49\xb9\xaa\xa4\x8d\x5a\xbc\x49\x38\xb3\xcb\x11\x0f\x3a\x9a\xc2\x5a\x11\xef\x4f\xd9\x71\x94\x6f\xbb\x9a\x6f\x17\x6b\xb5\x1d\x8f\x09\xa5\x7a\xdb\x91\x3e\x97\x24\xde\x41\xcd\x68\xed\xda\x66\xff\x2f\xe5\xce\x57\x02\x93\xa2\xcd\xbf\x51\x7b\xd8\x50\xc0\xcf\x00\xa4\x32\xad\xd7\xaf\x13\xdd\x09\x59\x94\xbb\x6c\x1b\xae\xb9\x99\xf7\x56\x00\x84\x42\x5a\x91\x58\x81\x78\xe2\x02\x71\x5c\xb5\x90\xd6\xe9\xcb\xcc\xde\xbd\xd2\x12\xdb\x20\x35\xfd\xce\xa1\x9d\xf7\xf1\xb8\x32\x82\xe5\xd0\xe7\x94\xe0\xa9\x69\x31\xa4\x02\x91\xde\x45\x90\xf9\xdb\xd5\x87\x70\x01\xd9\x20\xe4\x10\x53\x82\xef\x50\x24\x76\x6d\xd9\x01\x0b\x09\x87\x12\x90\xc0\x6e\x09\x7a\xe9\xf2\xc9\x30\x16\x23\x88\x32\xca\x9b\x31\xe0\x08\x62\x0f\x43\xaf\x2d\xf3\x9b\x32\x36\x0c\xa3\x04\xc0\x7c\x98\x82\xb9\x44\x74\x40\x9c\x21\x7a\x14\xfd\xb7\x67\x4a\xa0\x80\x63\xdf\x56\x28\xaf\x08\x2d\x6d\xf0\x48\x33\x37\xb7\xc5\x93\x94\x05\x47\xf3\xe1\x41\xc7\x33\x55\x89\x0e\x19\x47\xb6\x6a\x8b\x0e\x0a\xa9\x40\x8e\xe6\x0d\x38\xf2\xf1\xbf\xdb\xf5\xeb\x5a\xc1\x75\xe5\x30\xec\x7a\x93\xd9\x46\xb2\xd9\x69\x58\x6d\xba\xa8\x19\xb2\x04\x1d\x84\xe8\xd0\xa6\x52\xdc\x37\xad\x5f\x35\x89\x46\x5c\x29\xee\x69\xd0\x15\xee\xdc\x4a\x23\x96\x3e\xc2\x84\x39\x39\x07\x96\xda\x9e\x72\x21\x7c\x37\x4b\x0f\x80\xd9\xfa\xa6\xb8\xe5\x83\x5a\xd1\x8d\x13\x91\x15\x02\x53\x62\xba\x76\x01\x45\x1a\x6b\xcd\x59\x61\xc6\x49\x81\x4d\x46\xa8\x4b\x16\x59\x45\xe1\x64\x73\xcd\x2a\x0a\xd3\x09\x3e\x19\x3e\x82\xbb\x30\x15\xe6\x34\xf0\x58\x11\x42\xfd\x5e\xf3\x68\x15\x97\xb6\xc3\xd4\x8a\x6c\x31\xbb\x78\x71\xeb\x02\x11\xbf\xe9\x8c\x15\x2f\x2d\xb0\x8b\xc2\xd4\x27\xd3\x8f\xa5\x51\x3e\xcc\x9a\xd6\x73\xb2\xeb\xac\xe5\x65\xba\x57\x4a\x9d\x6a\xa1\x33\x38\x69\x94\x85\xee\x23\x48\x75\x1e\x46\xd5\x52\xd8\xbb\xd0\x7d\xac\x5e\x11\x13\x3f\xda\xcc\x75\xf8\xaf\x69\xad\x50\xed\x7a\xf1\xa2\x4b\xaa\x38\xa7\x8a\xf8\x43\x05\x0f\x2a\x1b\x94\x46\x7f\x36\x27\x9d\xa1\x97\xfa\xb6\xb3\x87\x0f\x07\xde\x19\x04\x73\x90\x54\x1a\x82\x19\x46\x99\x73\xfe\x7c\xeb\xb0\x55\xa1\xca\x6e\xc0\xe7\x42\xe9\x21\x77\x9d\x70\x4f\xc0\x1b\xcf\x48\x67\x60\x0f\x3d\x0c\x29\x30\x47\xe5\x1d\x03\xcc\xd4\xfd\xdc\x21\x6b\x51\x86\x3f\x59\x9e\xba\x90\xad\xdd\x0c\x6e\x75\xc6\x24\xcc\x0f\xd4\xd0\x0f\x84\xcf\x25\x98\x96\x4d\x1c\xa2\xe4\xce\x6c\x55\x6b\xfa\xed\x08\x17\x91\xf9\x7c\x0a\xbc\x11\x88\x12\x76\xb7\x44\xb8\x27\x76\x17\xcf\xa8\xb4\xf9\x64\xa6\x84\x69\x94\x85\x0c\xe0\x9f\xdd\x81\x7f\x66\xae\x9f\xae\x8f\x36\xc0\xdf\x9b\x96\x89\x39\x2b\x54\x9d\x07\xfe\xf5\x74\x16\x6d\x8c\x17\x7d\x25\xe8\x91\xf8\xd7\x21\xec\x6c\x37\xec\xa4\x35\x65\x88\x45\x53\x86\x23\xd0\xe8\x28\xd6\xb6\x5e\x5b\x46\x5b\xc2\x59\xee\x02\x6d\xcb\xf6\x5c\x26\x96\xad\x50\xed\xc4\x9e\x25\x30\x49\x14\xb9\x2f\xb3\xfd\x50\x65\x21\x5f\xc4\x19\x1c\x42\x60\x03\x21\x70\xc7\x26\xb3\x5e\x79\x4a\x3b\x73\xd3\xf2\xca\xd3\xf5\x54\xab\xec\x04\x94\x12\x5f\x92\xff\x41\x89\x4b\x0f\x9e\x44\xc9\xaa\x39\x04\x7a\x20\x25\x72\xda\x7d\xd3\x46\x0e\x0e\x63\xee\xf7\x14\x15\x39\x15\xa1\xcc\x2a\xd2\xbf\x77\x8b\xa4\x3e\xf7\x46\xfc\x2d\x7f\xb8\x8d\xe2\x47\x08\xa8\x11\x62\x76\xf4\xb4\x70\x06\xf0\x48\xd1\xfa\xc6\x8d\x8d\x11\xfc\x2d\x62\x76\x9c\xc9\xff\x32\xca\xcf\xe4\x13\x39\xe8\x68\x91\x83\xfa\xdc\x0f\xfc\x66\xd3\xcf\xd2\x95\xcf\x1d\x7b\xb2\x24\xfe\x3c\x6e\x83\x1e\xfe\x1e\x29\xba\x8f\xbf\x6b\x6e\xc3\x6c\x25\xe9\x69\xe2\xcf\x6b\x15\xfe\xb4\x5c\x5f\x83\xf8\x7b\x1b\x28\x35\xef\xa2\x11\x20\x41\xcd\x1e\x54\x09\x6a\x37\xe1\x38\xad\xc7\xa2\x00\x0c\xe4\x1e\xe4\xd0\x86\x31\x0a\xa8\xda\x42\x71\x24\x12\x84\xf1\xe2\x39\x55\x6f\xde\x0d\xfa\xcf\x1d\xf5\x26\x07\xd3\x35\x03\x50\x2b\xd3\x6c\x09\x00\x29\x77\x6a\x80\xdf\x47\xee\x1c\xc0\x17\x89\xc1\x50\x2e\x18\x5f\x06\x9f\x67\x10\x64\x0a\x44\x47\x40\xd8\x64\x51\xf7\x3b\x76\x11\x73\x40\xb7\x0a\xb4\x4c\xb6\x0f\x65\xdd\x77\x0f\xf1\x84\x76\xb3\xd6\x2d\x54\xcb\xf9\xde\x77\x73\x4c\xbb\x66\xec\x6a\x95\xa2\xda\x51\xc0\x8c\xb6\xd5\x4a\xc1\x37\x41\xd9\x79\x04\xc7\x3b\x72\x07\x10\x37\xe9\x80\xdb\xdf\xe2\xf9\xd8\xac\x99\xb1\x5d\x51\x7f\xb3\xe6\x84\x8b\xbb\x70\xc1\xd6\x78\xbf\xa6\x7e\xa9\x6d\xce\x7a\x47\x6b\x6d\xdf\x66\xec\xe7\x54\x7e\xdb\x52\x38\xdb\x71\x08\xb9\x41\x36\xe1\xcb\x89\x78\x7c\x3a\xe5\xbf\x3c\x60\x18\xc2\x25\x79\x0d\x59\xf9\x20\x1a\xf2\x39\xf2\xfc\x37\xf1\xb8\x6d\x8f\x30\xc9\x14\x5d\x1b\x8b\xd1\x01\xf9\x12\x5c\xdb\x02\x4d\x86\x84\xd9\x04\x23\xc5\x45\xb9\x9b\x8b\xf7\xbe\x72\x96\x00\xad\x08\x58\x4d\x58\xbd\x09\xb4\xfa\x3e\x0f\xe8\xd4\xa2\x77\x04\x0f\x7c\xd3\x4a\xf7\x31\x3b\x83\x79\xb3\x05\xba\x0e\x65\x46\x5b\xfe\x6b\x77\x8b\xcc\xe8\x0e\xa6\x20\x1a\x4f\x8b\xd6\xe8\x9e\xc8\x31\x96\xc2\x7f\x3b\x6c\xfd\x18\x4b\x61\xc2\xf0\xe7\x5c\xee\x71\x07\x18\xf0\x8d\x67\xb5\x4b\x14\x0f\xc7\xa7\x35\x78\xfe\x2b\xad\xe8\xb7\xaf\xa5\xc3\x01\x30\xdb\xb8\x46\x02\x0b\x6e\xbc\xb8\x3a\xd5\xdc\x88\xb9\x3a\x5d\xec\xc4\x44\x27\xa5\xc1\xde\xfa\x76\x4b\x57\x32\xed\x15\xc0\x9e\xd5\x01\x58\xad\x38\xf6\x34\x00\x7b\xa6\x0b\xd8\xb3\x0e\x01\x76\xc7\x95\xf1\x15\xc0\x9e\xd7\x01\x58\xad\xc6\xd0\xa7\x01\xd8\x73\x5d\xc0\x9e\x77\x08\xb0\x3b\x3e\x16\xb6\x02\xd8\x57\x75\x00\x56\xab\x2d\xf3\x69\x00\xf6\xb5\x2e\x60\x5f\x75\x08\xb0\x39\x0e\x6a\xcb\xfb\x37\xe3\xd3\xa2\xbb\x36\x4d\x94\x1c\x0a\xde\xfa\xd3\x81\x72\x54\xc6\x9e\x4f\x6e\x07\xf6\xb6\x55\x7f\x76\x50\x7d\xa3\xa7\x97\x1b\x54\xfd\xf9\x41\xf5\xb5\xa9\xbe\x4c\xcb\x71\x83\xaa\x7f\x75\x50\x7d\x6d\xaa\xd7\x3f\x40\xb8\x73\xd5\xaf\xec\xb1\x29\xee\xd7\x91\x9e\x6a\x6d\xf1\xc7\xdd\x1e\x8b\x9f\xee\xde\x36\x47\xfd\x99\xad\xe2\x7e\xd4\x28\xd7\xff\x16\xbf\xf6\x88\x94\x84\xb3\x32\x69\xee\xeb\x0e\xa5\xb9\x3b\x86\x7e\xab\x9b\x06\x4a\xff\x29\x5c\xb7\xd0\x76\x4c\xaa\x12\x33\x2d\x7a\xe2\x7b\x3b\x73\xb6\xa5\x8f\x1c\x1e\xd0\x93\x44\x4f\xce\x2d\x71\xa9\x64\x65\x2f\x43\xcd\x69\xb2\xf0\x01\x6c\xad\x93\x8d\x3f\x02\xa9\xc8\x78\x6a\x5a\xd1\x5e\x55\xfb\x77\x5f\x77\x8c\xbb\x81\x4f\xd8\x4a\xd0\x0e\x05\xdc\xe6\x9c\x6d\x63\xb8\xeb\x7f\x33\x22\x94\xcc\x4e\xd9\x48\xad\xfb\x1a\xe6\x48\xc7\xc0\x94\xde\x29\xef\xf2\x8e\x72\xf9\x8e\x08\xfd\xec\x7e\xde\xc7\xa9\x45\x99\xb8\x23\x42\x8b\x5a\xff\x3e\x87\xb5\x01\xd0\xd2\x1f\xfd\x5e\xfb\x2b\xe0\x5a\xb9\x5e\xe0\x81\x20\xb8\x00\x86\x12\x89\x8c\xdc\xa3\xfb\x24\x0e\x91\xaa\x86\x3c\x67\xa5\x0d\x42\xcb\x1a\xb6\x11\xe5\xc2\x8c\xfd\xf6\x7b\xfb\x57\xa4\xb5\x40\xaf\x43\xad\x42\x19\x4b\xd1\xcd\xad\x42\xab\x73\x5c\x7a\xb9\x78\x71\x71\x12\xdd\x1b\x3e\x46\x18\xac\x67\xff\x0f\x00\x00\xff\xff\xcf\x4e\x45\x0d\xb1\x9a\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 39601, mode: os.FileMode(0664), modTime: time.Unix(1604848440, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0x6f, 0x70, 0x89, 0xb6, 0x84, 0x8a, 0x3d, 0xd3, 0x57, 0xb2, 0xc4, 0xa9, 0xc7, 0x7e, 0x77, 0x64, 0x68, 0xe1, 0xb2, 0x7e, 0x5c, 0x58, 0x2f, 0x9f, 0x51, 0x96, 0x67, 0xcc, 0xf2, 0x5c, 0xa1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
