// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contest.glade (46.221kB)

package glade

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contestGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x73\xdb\x36\xf2\x7f\x9f\x4f\x81\x3f\xff\x33\x9d\xdc\x74\x6c\xc7\x76\xd2\xbb\xb9\xda\xea\x38\xaa\x9d\x76\x6a\xc7\x8d\xe5\x4b\xfa\x8e\x03\x91\x6b\x0a\x15\x08\x30\x00\x68\xd9\xf7\xe9\x6f\x40\x52\xb6\x24\x3e\x88\x20\x29\x89\x94\xf4\xa2\x9d\x31\xc5\x05\x81\xdd\xdf\x3e\x60\xb1\xd8\x9c\xfd\xf2\xe4\x53\xf4\x08\x42\x12\xce\xce\xad\xe3\xc3\x77\x16\x02\xe6\x70\x97\x30\xef\xdc\xfa\xcf\xfd\xd5\xc1\xbf\xac\x5f\x7a\x6f\xce\xfe\xef\xe0\x00\x7d\x02\x06\x02\x2b\x70\xd1\x84\xa8\x11\xf2\x28\x76\x01\x9d\x1e\x9e\x9c\x1c\x9e\xa0\x83\x83\xde\x9b\x33\xc2\x14\x88\x07\xec\x40\xef\x0d\x42\x67\x02\xbe\x87\x44\x80\x44\x94\x0c\xcf\x2d\x4f\x8d\x7f\xb4\x5e\x3f\x74\x7a\x78\xf2\xce\x3a\x8a\xde\xe3\xc3\xbf\xc1\x51\xc8\xa1\x58\xca\x73\xeb\x93\x1a\x7f\x23\xcc\xe5\x13\x0b\x11\xf7\xdc\x72\x30\xa5\x84\x3d\xf0\xe4\x99\x26\x40\xe8\x2c\x10\x3c\x00\xa1\x9e\x11\xc3\x3e\xe8\x97\x98\xfd\xc0\x9d\x50\x5a\xbd\x2b\x4c\x25\x9c\x1d\x4d\x5f\xc8\x7e\x1f\x3b\x0e\x04\xaa\x98\xc4\x19\x11\xea\x22\xf5\x1c\xc0\xb9\xa5\x88\xa2\x30\xc4\x22\xf9\xbc\x1e\x90\x62\x07\x46\x9c\xba\x20\x8e\x12\x82\xa3\x88\x62\x96\xfa\xe5\xed\xd4\x0a\x3f\x09\xe2\xbe\x0c\x96\x9e\xdf\x23\x91\x64\x48\xc1\xea\xdd\x8b\x30\x35\xb3\x2a\x0c\x48\xcf\x29\x7b\x5e\xd7\x78\x08\xf4\x95\xf1\x92\x78\x2c\x7e\x34\x4b\x56\x61\xbe\x55\xe7\x9c\x45\x37\xc2\x94\x78\xcc\xea\x49\x85\x85\x2a\x4b\xe4\x63\xe1\x11\x66\x53\x78\x50\x56\xef\xc4\x90\x4a\x10\x6f\x64\x42\x36\x82\xa7\x00\x33\xd7\x8c\x1d\xa1\x04\xdb\xc7\x62\x1c\x06\x66\x74\x13\x81\x97\x51\x60\xa5\x04\x19\x86\x0a\xe4\xfc\x0f\xb3\x3f\x25\xa3\x49\x07\x53\xb0\xd0\x23\xa6\x21\x9c\x5b\xef\xad\xa3\x85\xa1\x8e\xb2\xc7\x3a\x3b\x8a\xa1\x34\xf7\x2c\xc0\xce\x98\x30\xaf\x78\xfa\x5a\x22\x36\x56\x0a\x3b\x23\xab\xf7\xae\xec\xa2\x15\x0f\x96\x11\x9d\x1d\xa5\xbe\x3f\xa7\xa2\xc8\x5c\x25\xdc\x27\xc7\xd9\xab\x43\xb7\xd5\x61\x93\x48\x3d\x5e\x1b\x52\x23\xfd\xdd\x43\x75\x0f\xd5\xaa\x50\xcd\xe1\x58\x53\x50\x1d\x38\x82\x53\x0a\xee\x6c\xa4\x27\xc3\x00\x84\x33\x02\x67\xdc\xe7\x4c\x61\xc2\x40\xac\x18\xbc\x26\x64\x95\x90\xf1\x58\x85\x48\x8e\xb0\xcb\x27\xb6\x8e\x3c\xad\x1e\x61\xb9\x64\x29\x36\x67\xb3\xfa\x2b\x81\x49\xc0\x85\xb2\x16\x5f\xad\xc8\xcf\x25\x3c\x2d\x34\x08\x99\x8c\x2d\x63\x14\x32\x67\x5b\x95\xb0\x94\x28\x2b\x8b\x33\x5f\x36\xd9\xf2\x99\xb1\xda\xaf\x1a\x90\x65\xba\x6b\x4b\xad\xae\xe4\x6a\x49\xaf\x96\x04\x6b\x49\x31\xf3\xcb\x75\x88\xcb\xda\xfb\x3c\xfa\xe5\x11\x7b\x42\x97\x61\xff\xa7\xbf\x64\x2b\x7f\x26\x41\xc6\xcb\x9b\xf4\x2c\xa7\x55\x3d\xcb\xfc\xa4\x67\x7e\x9c\xfd\xa1\x38\x99\x20\xb0\x82\xed\x4a\x24\x64\x39\x52\xbd\xca\x7b\x3c\xa4\x90\xe5\x47\x9b\x4c\x35\x94\x25\x59\xaa\xaa\xc6\xea\x59\xc1\x67\x96\x09\x4b\x72\x7c\xe5\x7a\x83\xe6\x92\x7e\x7d\xc6\x6f\xbc\x08\x3c\xcf\x6d\xec\x1d\xfd\xaa\x1c\x7d\x0d\xd7\x90\xc2\x30\x50\x70\x14\xae\x24\x17\x25\xb0\x33\xb6\xb5\x58\x15\xb8\x36\x25\x6c\xbc\x5c\x42\x35\xbc\x45\xf3\x96\x59\x3a\x5c\xec\x80\x69\x56\x7b\xb3\xbc\x3b\x66\x59\xed\x4d\xf2\xde\x24\x77\xcb\x24\x5f\xb8\x7f\x87\x52\xf9\xc0\x54\x62\x96\x03\x00\x77\xe6\x61\xb6\xa9\xa5\x7c\xa2\x8d\xd9\x87\x65\x26\x39\x0c\x02\xfd\xde\x4f\xa9\x7d\x43\x06\xbc\x42\xb0\x7a\x27\xef\x97\xbd\x28\x15\x04\x36\x61\x8e\x80\x78\x7a\xa9\x0c\xeb\x22\x41\x80\x3d\x98\x23\x58\x98\xcb\x12\xf6\x04\x01\x25\x0e\x56\x84\xb3\x59\xab\xee\x63\xc2\x1a\xf5\x5d\x85\x5a\x92\x02\x9a\x76\x5c\x16\x52\x02\x33\x49\x71\x84\xd6\x73\xeb\x19\xa4\xd5\xfb\x0d\x28\xe5\x48\xbb\x1b\x90\x29\x2d\x5d\xad\xf3\xfb\xc8\x9f\x92\xd8\x94\x73\xa5\xff\x58\x8d\xab\xcb\x3f\xec\x5c\xa0\xe1\x82\x00\x53\x91\xe4\xac\xde\x23\x08\x45\x1c\x4c\xab\xfa\xa3\x1b\x60\xe1\x47\x2c\x5e\x85\xaf\x1f\x74\xc1\x39\xe9\x79\xfe\xae\xc0\x4f\x66\x0e\x2c\xbc\x22\x7a\x4e\xed\xf4\x4e\x34\x76\xa5\x19\xc0\xb6\xf5\xb4\x4d\x9d\x40\xc8\x5c\x10\x94\xb0\x32\xab\x98\xd5\x0d\x19\x0e\xfd\xb4\x7c\x8b\x58\x3c\xcd\xe6\x0d\x0b\x38\x5c\x8b\xcb\x75\x39\x8d\x0a\x73\x94\xf9\x0b\x4b\x63\xe7\x33\x4c\x72\x16\x57\x7b\x81\x4d\x2c\x32\x6b\x8c\x18\x56\x3d\xfb\x33\x4c\x0e\x0f\x0f\xab\x8c\x60\x88\xa6\x64\x90\xdc\x6c\x1e\xca\xcf\xe8\x25\x3f\x36\x22\xaa\xdb\x00\x58\x57\x65\xa5\xe7\xbe\x53\xc2\x1a\xe0\x47\xb8\x90\x5d\x15\x97\x9e\x3d\xba\x90\x5b\x2a\xb1\x01\x04\x58\x60\xc5\xc5\xbc\xe8\xe4\xf4\xb1\x96\xdf\x71\xbb\x45\xb7\x71\x7c\x5f\x3e\xe9\x0d\x7d\x1f\x0f\x05\xa1\x94\xb7\x9b\x59\x26\x91\x49\xbc\x2e\x64\x4f\x57\xb6\xa5\x2a\x50\x24\xd4\x8b\x5f\x7f\xbf\xda\x3e\x81\xea\x55\xed\xa0\x30\xfb\x83\xaf\x5b\x27\xcb\xfe\xc0\xfe\xba\xa5\xa2\x2c\xe3\x9a\x4e\xda\x2d\xd0\x8d\x03\x7f\x00\x4a\x11\xe6\x75\x34\xf8\xca\xdc\x2e\x4f\x97\xb4\xc3\xa8\x3f\x6d\xb7\x38\x37\x8e\xfa\x2f\x21\xc9\x2a\x11\x6b\x11\x8b\x8c\x10\xaf\x97\xb3\x36\xa8\x23\x74\x86\x1d\x07\x28\x44\x68\x43\x63\x78\x3e\xb7\xbe\x5b\x48\x12\x8f\x61\x7a\x6e\x61\x47\x91\x47\xac\xc0\x42\x3e\x77\xc9\x03\x01\xa1\x05\xf1\xeb\x1f\x76\xff\xf6\xf3\xfd\xdd\xed\xb5\x7d\x73\x31\xf8\x63\xb1\xd2\x7e\x66\xec\xaa\xd0\x58\x5d\xfd\x50\x9d\x8c\xe3\xa5\x9b\x09\xb4\xb6\x67\x1c\xf5\xb4\x5b\x9c\x71\xdc\xca\x04\xa3\xe6\x79\x9f\x02\x16\x97\x4c\x89\xe7\x2b\x02\xd4\xed\x9c\x57\x56\x9c\x53\x45\x02\x5b\xc1\x93\xca\x44\x56\xb4\x40\xa4\x46\x80\x40\xaf\x12\x3d\x44\xcb\x6c\xd8\x1c\xc6\x1f\x89\xd8\x88\xae\x2a\x7f\xa0\x31\xe3\xe8\x6c\xde\x38\x36\x85\xcf\x4f\x5c\xf1\x0e\xc3\x33\x1f\x33\x7a\x61\xc8\x6e\x0d\x64\x60\x7b\x20\xa3\xff\xbb\xc6\x52\x7d\x19\xdc\x76\x0d\x2e\x4b\xad\x99\x5e\x5b\x64\xcc\x28\x96\x0a\x7d\x19\xdc\x36\xbc\x83\xd7\xc3\xdb\xd7\x35\xc6\x6e\x0c\x90\x74\x7b\x00\x79\xcd\xbd\x0e\x62\xb1\xc0\xdd\x5d\x73\x6f\xad\xf8\xd8\xe8\x5e\xb7\xd5\x62\x5b\x23\x67\xee\xb0\x4b\x78\x36\xc0\x07\x7f\xb6\x9b\x4b\x86\xc9\x1c\x2c\x9c\x11\xfa\x01\xfb\xc1\xcf\xe8\x4f\x1e\x32\xa7\xd2\x17\xaa\x1a\xc2\x85\x61\x22\xdb\x57\x83\xde\x15\x78\x62\x63\x69\x0b\x2d\xbd\x3a\xf6\x58\x76\xd1\x1e\x17\x60\xf6\x2e\xec\xe8\x69\x7d\x26\x68\xef\xc2\xdc\x8b\x8c\x45\x23\x36\x04\xd2\xaa\x20\x5b\x18\xc6\x13\x3c\x0c\xac\xde\xab\x55\xa9\x86\x54\xb1\x79\xa4\xb6\x33\x35\x34\x57\x43\x39\x47\xdc\xf2\xe4\x50\x3c\xf1\x16\xa7\x87\x66\x0b\xd2\x72\xb9\x5c\x8b\xd3\x75\xb9\x8d\x1a\x89\x66\xe3\xb5\xf5\x93\x9e\x41\xdb\x63\x3f\xf5\x8a\x6c\xbd\xa4\x6d\x0c\x69\xf3\xc4\x38\x70\xb8\xc8\x2b\x9d\xcc\x5a\x67\xcb\x65\x68\x47\xeb\xd9\x25\x01\xde\x69\xcf\xb6\x35\xf2\xfb\x32\xb8\x45\xb6\x5e\x52\xfb\x45\xd8\x4e\xf7\xfe\x1b\xd0\xa0\x83\xce\x5d\x4f\xbb\x23\xae\x3d\x87\xc3\xb5\xb8\x5c\x97\xd3\xa8\x11\x83\xa2\x57\x76\x31\xe4\x61\x47\xcf\xa8\x7b\x76\x34\xf9\x5d\xb6\x1c\xd5\x7b\x4e\x4c\x2f\x43\x19\xf5\x9a\x7a\x20\x94\x9a\x5d\xb6\x09\xb8\x24\xf1\xfd\xa0\x15\x77\x94\xcb\xba\x18\x4c\xb9\xf7\x95\xc0\xa4\x6c\xe7\xa3\x09\x71\xd5\xc8\x16\xf0\x3d\x04\xa9\xac\xde\x87\x0f\xa9\xbb\x77\x79\x94\xeb\xec\x99\xd4\x70\x27\xa3\x7b\x01\xa0\x99\x34\xc7\xb1\x12\x0e\x65\x04\xc4\x1b\xa9\x57\x6e\x1d\xbf\xcb\x6d\x5c\x52\x99\x63\x4b\xb8\x66\x7e\x33\x77\xed\xf7\x64\x47\x32\x82\xa5\x1d\x70\x4a\x9c\x67\xab\xc7\xb0\x0a\x45\xf6\x1d\xb9\xdc\x6f\xd7\x1f\x62\x04\xd8\x05\x21\x6d\x87\x12\x67\x1c\x5f\xbc\x35\xe6\x1d\x30\x4d\x68\xcb\x28\x4f\x5a\x81\x5e\x8e\xf8\xc4\x8e\xd9\x08\xa2\x8a\xf0\x92\x09\x78\x82\x44\x17\x7f\x75\x14\x51\x74\xe5\x70\xc9\x30\x4a\x00\x4c\x87\x29\x19\x4c\x44\x7d\x78\x19\xa6\x07\xd1\x9f\xd3\x7b\xcc\x91\x6d\x2b\x15\x58\x68\x4d\x1b\xbc\xd0\x4c\xd5\xed\xf5\x49\x46\x42\x6a\xf3\xee\xc1\xc4\x32\xd5\xf1\x0e\x2b\xee\xe2\x38\x50\x58\x85\x72\x38\xbd\x5e\x2a\x5f\xfe\x5c\xad\x5d\x37\x72\xae\x73\x3d\x19\x17\xaf\x50\x2f\x25\x4b\x9a\x32\x1a\xd3\x45\xcd\x06\x2a\xd0\x81\x46\x87\x31\x95\xe2\x81\xd5\xfb\xc9\x90\x68\xc8\x95\xe2\xbe\x01\x5d\xe9\x7b\xc9\x59\xc4\x32\xc0\x0e\x61\x5e\x41\xb7\xc6\xb6\x87\x5c\xd8\x19\x27\xe1\x01\x30\xd7\x5c\x15\x57\xdc\xa5\x32\xea\xd2\x1d\x69\x61\x54\x9a\xb5\xd0\xb4\x3b\x6b\x6a\x9b\xd3\xc2\x54\xab\x84\x25\x54\x89\x12\x9a\x92\x45\x5a\x51\x3a\xd8\x5c\xd0\x8a\xd2\x74\x82\x4f\xec\x17\x70\x97\xa6\x72\x38\x0d\x7d\x56\x86\xd0\xbc\x97\x4b\xb4\x8d\xcb\xba\x39\xd1\x8a\x68\x31\x3f\x7b\x71\x3f\x02\x22\xfe\x6d\x32\x56\xbc\xb5\x70\x46\x58\x87\x3e\xb9\x76\x2c\x8b\xf2\x29\x69\x0a\x53\x10\x5d\xe7\x6d\x2f\xb3\xad\x52\xe6\x52\x4b\x35\x20\xcc\xa2\x2c\xd1\x89\x19\x65\x1b\x0f\x54\x37\x17\x16\x55\xd1\xcd\xb7\xd5\x8f\x1f\x2d\x9f\xb5\xfe\xbf\xd5\x9b\xa3\x5a\xf7\xe6\xc5\xb8\xf3\xcd\xb2\x22\xb1\x08\x94\xa8\x9f\xac\xc9\x64\xe8\x99\xae\x24\x05\x15\xb5\x98\x16\xc4\xd9\x0d\x43\xb0\x00\x49\x95\x21\x98\xa3\x94\x05\x7d\xac\x57\x0e\x5b\xa5\x45\x76\x07\x01\x17\xca\x0c\xb9\x8b\x84\x5b\x02\xde\x78\x45\x26\x03\xfb\xf8\xc9\xa6\xc0\x3c\x95\xdf\x03\xb5\x40\xf6\x53\x83\x6c\x44\xa9\x3f\x59\x9d\xba\x94\xae\xdd\x0d\xee\x4d\xc6\x24\x2c\x08\x95\x1d\x84\x22\xe0\x12\xac\x9e\x4b\x3c\xa2\x0a\xea\x8a\x1b\xd6\x55\xa3\xe5\xb7\xc3\x5d\x44\xea\xf3\x39\xf4\x87\x20\x2a\xe8\xdd\x0c\xe1\x96\xe8\x5d\xbc\xa2\xca\xea\x93\x1b\x12\x66\x51\x96\x52\x80\xff\xef\x0e\xfc\x73\x63\xfd\x6c\x79\xb4\x01\xfe\xfe\x73\x15\x9f\x33\x47\xd5\x79\xe0\xdf\x3c\x27\xde\x06\xbd\xed\x2b\x41\x0f\xc4\x3f\xf6\x6e\x67\xb5\x6e\x67\x49\xd1\x9e\x27\xf0\xf0\x20\x96\xb6\x59\xd9\x5e\x5b\xdc\x59\xe1\x06\x6d\xc5\xfa\x5c\xc5\x97\xcd\x51\xad\x45\x9f\x25\x30\x49\xe2\xc2\x66\xe3\xcd\x78\x9d\x8d\x7c\x19\x63\xb0\x77\x81\x1b\x70\x81\x6b\x56\x99\xc5\xcc\x53\x56\x3b\xa9\x96\x67\x9e\x6e\x9e\x8d\xd2\x4e\x40\x29\x09\x24\xf9\x2f\x54\x68\x2a\xbc\x13\x29\xab\xcd\x21\xd0\x07\x29\xb1\xd7\xee\x4e\xd6\x05\x38\x8c\x67\xbf\xa5\xa8\x28\xc8\x08\xe5\x66\x91\xfe\xb9\x5e\x24\xf5\xb9\x3f\xe4\x1f\xf9\xd3\x7d\xe4\x3f\x34\xa0\x86\x98\xb9\xd1\xd3\xd2\x11\xc0\x0b\x45\xeb\x0b\x37\x96\x7a\xf0\x8f\x98\xb9\x71\x24\xff\xe3\xb0\x38\x92\x4f\xc5\xa0\xc3\xd7\x18\x34\xe0\x41\x18\x6c\x36\xfc\xac\x9c\xf9\x5c\xb3\x25\x4b\xe3\xcf\xe7\x2e\x98\xe1\xef\x85\xa2\xfb\xf8\xbb\xe1\x2e\x24\x3b\x49\xdf\x10\x7f\x7e\xab\xf0\x67\x64\xfa\x36\x88\xbf\x8f\xa1\x52\xd3\x2a\x1a\x87\x02\x16\xc9\x83\x3a\x4e\x2d\xea\xe7\xd1\x7a\x2c\x0a\x70\x80\x3c\x82\xb4\x5d\x78\xc0\x21\x55\x2b\x48\x8e\x98\x76\x4f\x69\x18\x83\x46\xc1\x66\x4b\x30\x48\xb9\xd7\x00\x02\xaf\xb9\xb7\xc7\x5f\xc4\x86\x08\x7d\x5f\x06\xb7\xe8\xed\x0f\x54\xfd\x7c\xc9\x14\x88\x1f\x3c\xf5\x73\x81\x6d\x6d\x0b\x08\x37\x99\xd7\xfd\xcb\x19\x61\xe6\x81\x69\x22\x68\x96\x6c\x1b\x32\xbb\x97\x4f\xf1\x82\xd6\xb3\xdd\x2d\x95\xce\xf9\xab\x3f\x2a\x50\xed\x86\xb1\x6b\x94\x8d\x6a\x47\x0e\x33\x3a\x59\xab\x04\xdf\x14\x65\xe7\x11\x1c\x1f\xca\xed\x41\xbc\x49\x03\xdc\xfe\x2a\xcf\x97\x7a\xcd\xca\xff\xf6\xab\x69\xbd\xe6\x84\x8b\xb1\xde\xb3\x6d\xbc\x64\xd3\x3c\xdb\x36\x9d\x7a\x47\xd3\x6d\xdf\x92\xe9\x1b\x25\x7f\x3b\x94\x70\x5b\xb3\xdf\x89\x1a\xc4\xcc\x46\xef\xf1\xad\x96\xb8\xed\x8f\xde\xca\x37\x10\xca\x1b\x36\x14\x6a\x83\x63\x4a\x47\xf6\xc6\x10\x2e\xdb\xb8\x68\x91\x2e\xea\x25\x43\x98\x4b\x1c\xac\xb8\x58\x46\xbf\xa3\x39\xb7\x14\x6c\x45\xc8\x1a\x42\xeb\x92\x4e\x42\x7b\x74\x1a\xa0\x33\x4d\x9f\xb4\x38\xca\xb6\x32\x6b\x83\xf9\x66\x53\x7b\x1d\x0a\xa8\x72\xce\xb3\x9b\x0f\xa8\xc6\xf0\x0c\x62\xe3\xd1\xd4\x02\xdd\x8e\x5c\x80\xc9\xd5\x86\x14\x1f\x17\x2e\xc0\x94\x26\xd4\x9f\x1b\x71\x9f\x7b\xc0\x80\x2f\xbd\xe5\x5d\x21\xe7\xf8\x70\xdc\x80\xe5\xbf\x32\xf2\x7e\xdb\x9a\x71\x1c\x00\x73\xd1\x0d\x16\x8e\xe0\xe8\xed\xd5\xb1\xe1\x11\xce\xd5\xf1\xeb\x19\x4e\x74\xc7\x1a\xdc\x95\x1f\xd4\x74\x25\xd6\x9e\x03\xec\x49\x13\x80\x35\xf2\x63\xbb\x01\xd8\x13\x53\xc0\x9e\x74\x08\xb0\x6b\x4e\xa8\xcf\x01\xf6\xb4\x09\xc0\x1a\x95\x94\xee\x06\x60\x4f\x4d\x01\x7b\xda\x21\xc0\xae\xf9\x42\xd9\x1c\x60\xdf\x37\x01\x58\xa3\x82\xce\xdd\x00\xec\x07\x53\xc0\xbe\xef\x10\x60\x0b\x0c\xd4\x8a\x8f\x7d\x1e\x8e\xcb\x1e\xf6\x6c\x22\xe5\x50\xb2\x5f\x50\x07\xd2\x51\x39\x47\x45\x85\xb5\xdb\xab\x16\xfd\xc9\x5e\xf4\x1b\xbd\xf7\xbc\x41\xd1\x9f\xee\x45\xdf\x98\xe8\xab\x14\x2b\x6f\x50\xf4\xef\xf7\xa2\x6f\x4c\xf4\xe6\x57\x0f\xd7\x2e\xfa\xb9\x53\x36\xc5\x83\x06\xc2\xd3\xcb\x41\xdf\x64\xdd\x71\x95\xc8\xeb\xb7\xbb\x77\xce\xd1\x7c\x68\xab\x78\x10\x15\xd8\xf5\xbf\xc5\x3f\xfb\x44\x4a\xc2\x19\x7a\x7b\x39\xe8\x1b\x06\xba\x97\xd2\xc1\x01\x74\x28\xd8\x5d\xb3\x02\xb4\xba\xe2\x60\x94\x94\x08\x18\x5f\x0e\x1b\x95\x3a\x94\xc9\x14\x62\xae\x5e\x4f\x02\x7f\x6d\x26\xb7\xf2\x95\xc5\x3d\x7a\xd2\xe8\x29\xe8\x32\x97\x49\x56\xb5\x99\x6a\x41\xb1\x45\x00\xe0\x1a\x15\xc7\xfc\x1d\x4a\x45\x1e\x9e\xad\x5e\x74\x62\xd5\xfe\x33\xd8\x35\xe3\x6e\x10\x10\x36\xe7\xba\x35\x83\xdb\x1c\xb9\x2d\xbf\xd3\xf0\x0d\x45\x28\x49\x6e\xe9\x48\xa3\x7e\x0f\x53\xa4\x3b\xc0\x94\xd9\x2d\xf1\xea\x86\x72\xb6\xc7\x84\x79\x8c\x3f\x2d\x02\x35\xa2\x4c\xf5\x98\x30\xa2\x36\xef\x07\xb1\x30\x00\x76\xb5\x56\xfa\xc0\x94\xd5\x8b\x00\x77\xf1\xf2\xc0\x28\xe0\x0b\x7d\x10\xc4\x29\x81\xa1\xa2\x7f\xee\xac\xf3\xfd\x28\xf6\x9e\xaa\x81\x38\x67\xae\x18\xc2\x48\x1b\x56\xe1\xe5\x74\xd8\x7e\xff\x57\xbb\x6b\x40\x2b\x6f\x66\x1b\xc1\x6b\x87\xaa\x8c\x72\xca\x56\x96\x57\x19\xcd\xaf\x71\xe6\xc7\xd7\x1f\xce\x8e\xa2\x66\xe5\x0f\xd8\x81\xde\x9b\xff\x05\x00\x00\xff\xff\x30\x71\xc4\xfb\x8d\xb4\x00\x00")

func contestGladeBytes() ([]byte, error) {
	return bindataRead(
		_contestGlade,
		"contest.glade",
	)
}

func contestGlade() (*asset, error) {
	bytes, err := contestGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contest.glade", size: 46221, mode: os.FileMode(0664), modTime: time.Unix(1609060332, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xc4, 0x96, 0x35, 0xe3, 0x8e, 0x2a, 0xc2, 0xa3, 0xbd, 0x97, 0xd8, 0x8e, 0xbb, 0x4c, 0x15, 0x11, 0x15, 0x62, 0x39, 0x16, 0xf8, 0xf8, 0x20, 0xa6, 0x81, 0xf7, 0x24, 0x9f, 0xa8, 0xf3, 0xb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contest.glade": contestGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contest.glade": &bintree{contestGlade, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
