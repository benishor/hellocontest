package adif

import (
	"fmt"
	"io"
	"strings"
	"time"

	"github.com/ftl/hellocontest/core"
)

// Export writes the given QSOs to the given writer in the ADIF ADI format.
// The header is very limited.
func Export(w io.Writer, qsos ...core.QSO) error {
	_, err := fmt.Fprintln(w, "Generated by Hello Contest\n<adif_ver:5>3.0.9\n<programid:11>HelloContest\n<EOH>")
	if err != nil {
		return err
	}
	for _, qso := range qsos {
		err := record(w, qso)
		if err != nil {
			return err
		}
	}
	return nil
}

var qrg = map[core.Band]string{
	core.NoBand:   "",
	core.Band160m: "1.800",
	core.Band80m:  "3.500",
	core.Band60m:  "5.351",
	core.Band40m:  "7.000",
	core.Band30m:  "10.100",
	core.Band20m:  "14.000",
	core.Band17m:  "18.100",
	core.Band15m:  "21.000",
	core.Band12m:  "24.890",
	core.Band10m:  "28.000",
}

func record(w io.Writer, qso core.QSO) error {
	var frequency string
	if qso.Frequency == 0 {
		frequency = qrg[qso.Band]
	} else {
		frequency = fmt.Sprintf("%5.3f", qso.Frequency/1000000.0)
	}
	fields := []struct {
		name string
		data string
	}{
		{"QSO_DATE", qso.Time.In(time.UTC).Format("20060102")},
		{"TIME_ON", qso.Time.In(time.UTC).Format("1504")},
		{"TIME_OFF", qso.Time.In(time.UTC).Format("1504")},
		{"CALL", qso.Callsign.String()},
		{"FREQ", frequency},
		{"BAND", qso.Band.String()},
		{"MODE", qso.Mode.String()},
		{"RST_SENT", toReportValue(qso.Mode, qso.MyReport)},
		{"RST_RCVD", toReportValue(qso.Mode, qso.TheirReport)},
		{"COMMENT", fmt.Sprintf("%s %s", strings.Join(qso.MyExchange, " "), strings.Join(qso.TheirExchange, " "))},
	}
	for _, field := range fields {
		err := data(w, field.name, "", field.data)
		if err != nil {
			return err
		}
	}
	_, err := fmt.Fprintln(w, "<EOR>")
	return err
}

var defaultReport = map[core.Mode]core.RST{
	core.ModeCW:      "599",
	core.ModeSSB:     "59",
	core.ModeFM:      "5",
	core.ModeRTTY:    "599",
	core.ModeDigital: "599",
}

func toReportValue(mode core.Mode, rst core.RST) string {
	if rst == "" {
		return defaultReport[mode].String()
	}
	return rst.String()
}

func data(w io.Writer, field string, datatype string, data string) error {
	var err error
	if datatype != "" {
		_, err = fmt.Fprintf(w, "<%s:%d:%s>%s", field, len(data), datatype, data)
	} else {
		_, err = fmt.Fprintf(w, "<%s:%d>%s", field, len(data), data)
	}
	return err
}
