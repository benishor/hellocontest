package adif

import (
	"fmt"
	"io"
	"time"

	"github.com/ftl/hellocontest/core"
)

// Export writes the given QSOs to the given writer in the ADIF ADI format.
// The header is very limited.
func Export(w io.Writer, qsos ...core.QSO) error {
	_, err := fmt.Fprintln(w, "Generated by Hello Contest\n<adif_ver:5>3.0.9\n<programid:11>HelloContest\n<EOH>")
	if err != nil {
		return err
	}
	for _, qso := range qsos {
		err := record(w, qso)
		if err != nil {
			return err
		}
	}
	return nil
}

func record(w io.Writer, qso core.QSO) error {
	fields := []struct {
		name string
		data string
	}{
		{"QSO_DATE", qso.Time.In(time.UTC).Format("20060102")},
		{"TIME_ON", qso.Time.In(time.UTC).Format("1504")},
		{"TIME_OFF", qso.Time.In(time.UTC).Format("1504")},
		{"CALL", qso.Callsign.String()},
		{"BAND", qso.Band.String()},
		{"MODE", qso.Mode.String()},
		{"RST_SENT", qso.MyReport.String()},
		{"RST_RCVD", qso.TheirReport.String()},
		{"COMMENT", fmt.Sprintf("%03d %s %03d %s", qso.MyNumber, qso.MyXchange, qso.TheirNumber, qso.TheirXchange)},
	}
	for _, field := range fields {
		err := data(w, field.name, "", field.data)
		if err != nil {
			return err
		}
	}
	_, err := fmt.Fprintln(w, "<EOR>")
	return err
}

func data(w io.Writer, field string, datatype string, data string) error {
	var err error
	if datatype != "" {
		_, err = fmt.Fprintf(w, "<%s:%d:%s>%s", field, len(data), datatype, data)
	} else {
		_, err = fmt.Fprintf(w, "<%s:%d>%s", field, len(data), data)
	}
	return err
}
